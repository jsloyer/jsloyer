<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sample Code on Jeff Sloyer</title><link>https://www.jeffsloyer.io/categories/sample-code/</link><description>Recent content in Sample Code on Jeff Sloyer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Aug 2015 11:21:03 -0500</lastBuildDate><atom:link href="https://www.jeffsloyer.io/categories/sample-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Peering Inside a Criminal’s Mind using IBM Watson</title><link>https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/</link><pubDate>Mon, 24 Aug 2015 11:21:03 -0500</pubDate><guid>https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/glasses.jpg" alt="Featured image of post Peering Inside a Criminal’s Mind using IBM Watson" />&lt;p>With the recent shooting in South Carolina in reminds us that criminal&amp;rsquo;s can and will continue to harm people.  They seem like random acts to most of us but to a criminal the acts make sense to them?  No one can answer this question except the criminal.  To peer inside a criminal&amp;rsquo;s would be next to impossible but what if there existed another way to peer inside their mind&amp;rsquo;s?  This could be used to try to identify patterns or personality traits that exist.  This information could be used to prevent these horrible acts and better humanity.&lt;!-- more -->&lt;/p>
&lt;p>So how would we do this?  I work at IBM so the answer is obviously IBM Watson.  We all have heard of Watson, IBM Watson &lt;a class="link" href="http://blog.ted.com/how-did-supercomputer-watson-beat-jeopardy-champion-ken-jennings-experts-discuss/" target="_blank" rel="noopener"
>beat Ken Jennings on Jeopardy&lt;/a>.  However there is so much more that Watson can do, &lt;a class="link" href="https://console.ng.bluemix.net/catalog?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>check this out&lt;/a> for all the cool things Watson can do.  One of the really cool services that Watson now provides is something called Personality Insights.  This service can analyze the personality of text in meer seconds via a REST API.  One of the things IBM is trying to do now is make all these really cool technologies available to everyone and anyone.  They are doing it through something called &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>IBM Bluemix&lt;/a>.  &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a> is IBM&amp;rsquo;s platform as a service (PaaS), and it has a whole giant catalog of really cool technologies from IBM as well as lots of other third parties.  You can sign up for a free 30 day account by going &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>So how does this fit back with peering inside of a criminal.  Well I hope you guessed the answer, we are going to use Personality Insights to analyze the personality of a couple criminal&amp;rsquo;s and look for some common traits.&lt;/p>
&lt;p>Let&amp;rsquo;s take the most recent horrible attack, the South Carolina church shooting.  Dylann Roof posted a manifesto online and we are going to use that as the basis to peer into his mind.&lt;/p>
&lt;p>There are two ways to try this out for yourself.  Let&amp;rsquo;s go through both of them.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Sign up a &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix account&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click the button deploy.  The button will automagically deploy the Personality Insights starter app that we are going to use.  If you are interested in the code head over to &lt;a class="link" href="https://github.com/IBM-Bluemix/personality-insights-nodejs" target="_blank" rel="noopener"
>Github&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![Deploy to Bluemix](button.png)](https://bluemix.net/deploy?repository=https://github.com/IBM-Bluemix/personality-insights-nodejs.git&amp;amp;cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd)
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>
&lt;p>Once you app is finished deploying click &amp;ldquo;View your app&amp;rdquo;.  You will be taken to your app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hint, if you are lazy and don&amp;rsquo;t want to do the above steps go &lt;a class="link" href="http://watson-um-demo.mybluemix.net" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to get the text from Dylann Roof that we want to analyze.  It can be found &lt;a class="link" href="http://lastrhodesian.com/data/documents/rtf88.txt" target="_blank" rel="noopener"
>here&lt;/a>.  Open the link and copy all the text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on &amp;ldquo;Clear&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![clear](clear.jpg)](clear.jpg)
&lt;/code>&lt;/pre>
&lt;ol start="7">
&lt;li>Paste the text into the text box&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![enter-text](enter-text.jpg)](enter-text.jpg)
&lt;/code>&lt;/pre>
&lt;ol start="8">
&lt;li>Click &amp;ldquo;Analyze&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![analyze](analyze.jpg)](analyze.jpg)
&lt;/code>&lt;/pre>
&lt;p>Watson will return us Dylann Roof&amp;rsquo;s personality based on the manifesto in just a matter of seconds.&lt;/p>
&lt;blockquote>You are unconventional, shrewd and can be perceived as critical.
&lt;p>You are unconcerned with art: you are less concerned with artistic or creative activities than most people who participated in our surveys. You are laid-back: you appreciate a relaxed pace in life. And you are intermittent: you have a hard time sticking with difficult tasks for a long period of time.&lt;/p>
&lt;p>More than most people, your choices are driven by a desire for well-being.&lt;/p>
&lt;p>You consider helping others to guide a large part of what you do: you think it is important to take care of the people around you. You are relatively unconcerned with tradition: you care more about making your own path than following what others have done.&lt;cite> &amp;ndash; IBM Watson Analysis of Dylann Roof&amp;rsquo;s manifesto&lt;/cite>&lt;/blockquote>&lt;/p>
&lt;p>Additionally Watson provides us a visualization as well.&lt;/p>
&lt;p>&lt;a class="link" href="personality.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality.jpg"
width="1198"
height="1220"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality_hu_d7345404d8724d7d.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality_hu_f02ca00fd2a8abde.jpg 1024w"
loading="lazy"
alt="personality"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/a>&lt;/p>
&lt;p>Let&amp;rsquo;s next take a look at Anders Behring Breivik, who was responsible for the 2011 attacks in Norway.  His manifesto is available &lt;a class="link" href="https://info.publicintelligence.net/AndersBehringBreivikManifesto.pdf" target="_blank" rel="noopener"
>here&lt;/a>.  You will need to convert it to a &lt;code>.txt&lt;/code> file. You can do this &lt;a class="link" href="http://www.zamzar.com/convert/pdf-to-txt/" target="_blank" rel="noopener"
>here&lt;/a>. It will email you a copy of the manifesto in a &lt;code>.txt&lt;/code> file.&lt;/p>
&lt;p>&lt;a class="link" href="pdf-to-txt.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt.jpg"
width="1654"
height="566"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_488527f5fe907ed.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_e5ee609b9c42be6f.jpg 1024w"
loading="lazy"
alt="pdf-to-txt"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/a>&lt;/p>
&lt;p>So let&amp;rsquo;s repeat the same steps as above.&lt;/p>
&lt;ol>
&lt;li>Clear the text area&lt;/li>
&lt;li>Paste the text&lt;/li>
&lt;li>Click Analyze&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>NOTE:&lt;/strong> You will need to make sure you have deployed the Bluemix app yourself for this one, the text file is really big and the default app does not support really large files.&lt;/p>
&lt;blockquote>You are shrewd, skeptical and tranquil.
&lt;p>You are philosophical: you are open to and intrigued by new ideas and love to explore them. You are imaginative: you have a wild imagination. And you are independent: you have a strong desire to have time to yourself.&lt;/p>
&lt;p>You are motivated to seek out experiences that provide a strong feeling of prestige.&lt;/p>
&lt;p>You are relatively unconcerned with both taking pleasure in life and tradition. You prefer activities with a purpose greater than just personal enjoyment. And you care more about making your own path than following what others have done. &lt;cite> &amp;ndash; IBM Watson Analysis of Anders Behring Breivik&amp;rsquo;s manifesto&lt;/cite>&lt;/blockquote>&lt;/p>
&lt;p>&lt;a class="link" href="personality-norway.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-norway.jpg"
width="1230"
height="1230"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-norway_hu_c2e6a0357be66d76.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-norway_hu_fd7a699f75baa399.jpg 1024w"
loading="lazy"
alt="personality-norway"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/a>One last example.  I went to Virginia Tech and I was at the school when the &lt;a class="link" href="http://www.cnn.com/2013/10/31/us/virginia-tech-shootings-fast-facts/" target="_blank" rel="noopener"
>massacre happened there&lt;/a>.  This one hits quite close to home to me.  I was supposed to be in a classroom that fellow students were massacred but I overslept.  Let&amp;rsquo;s take a look at Seung Hui Cho’s &amp;ldquo;Manifesto&amp;rdquo;.  His manifesto is available &lt;a class="link" href="https://schoolshooters.info/sites/default/files/cho_manifesto_1.1.pdf" target="_blank" rel="noopener"
>here&lt;/a>.  You will need to convert it to a &lt;code>.txt&lt;/code> file. You can do this &lt;a class="link" href="http://www.zamzar.com/convert/pdf-to-txt/" target="_blank" rel="noopener"
>here&lt;/a>. It will email you a copy of the manifesto in a &lt;code>.txt&lt;/code> file.&lt;/p>
&lt;p>&lt;a class="link" href="pdf-to-txt.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt.jpg"
width="1654"
height="566"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_488527f5fe907ed.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_e5ee609b9c42be6f.jpg 1024w"
loading="lazy"
alt="pdf-to-txt"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/a>&lt;/p>
&lt;p>So let&amp;rsquo;s repeat the same steps as above.&lt;/p>
&lt;ol>
&lt;li>Clear the text area&lt;/li>
&lt;li>Paste the text&lt;/li>
&lt;li>Click Analyze&lt;/li>
&lt;/ol>
&lt;blockquote>You are boisterous and somewhat shortsighted.
&lt;p>You are content: you are content with your level of accomplishment and do not feel the need to set ambitious goals. You are confident: you are hard to embarrass and are self-confident most of the time. And you are carefree: you do what you want, disregarding rules and obligations.&lt;/p>
&lt;p>More than most people, your choices are driven by a desire for modernity.&lt;/p>
&lt;p>You consider independence to guide a large part of what you do: you like to set your own goals to decide how to best achieve them. You are relatively unconcerned with tradition: you care more about making your own path than following what others have done. &lt;cite> &amp;ndash; IBM Watson Analysis of Seung Hui Cho&amp;rsquo;s manifesto&lt;/cite>&lt;/blockquote>&lt;/p>
&lt;p>&lt;a class="link" href="personality-virginia-tech.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-virginia-tech.jpg"
width="1158"
height="1232"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-virginia-tech_hu_858bfa774aa2f2f1.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-virginia-tech_hu_fc8b911f51ab7e12.jpg 1024w"
loading="lazy"
alt="personality-virginia-tech"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/a>Let&amp;rsquo;s do some analysis on all this data now.  It looks like all the shooter&amp;rsquo;s from these massacres have the following in common.&lt;/p>
&lt;p>It looks like from the Charleston and Norway events both share the following traits and a high percentage of both of them.&lt;/p>
&lt;ul>
&lt;li>Authority-challenging&lt;/li>
&lt;li>Self-transcendence&lt;/li>
&lt;li>Openness to change&lt;/li>
&lt;/ul>
&lt;p>Also on the flip side they both share the following traits with low percentages, which if you think about it means probably huge red flags.&lt;/p>
&lt;ul>
&lt;li>Conversation (Charleston was 3%, Norway was 11%)&lt;/li>
&lt;li>Cheerfulness (Charleston 12%, Norway 2%)&lt;/li>
&lt;li>Trust (Charleston 11%, Norway 8%)&lt;/li>
&lt;li>Uncompromising (Charleston 9%, 3%)&lt;/li>
&lt;/ul>
&lt;p>So digging into it a little more by no means am I a psychologist but it seems to me that a person that has low values in conversation, cheerfulness, trust, and uncompromising could definitely be red flags.  Additionally, high values in authority-challenging, self-transcendence, openness to change paired with the above low characteristics could be a model to try to detect some of these behaviors and thoughts earlier on.&lt;/p>
&lt;p>Going forward if police or schools could analyze the text of suspected criminal&amp;rsquo;s before hand maybe these horrible massacre&amp;rsquo;s could of been prevented.  Maybe for the Dylann Roof case if the FBI examiner that reviewed Dylann Roof&amp;rsquo;s gun permit had access to a tool like this it could of prevented the whole situation.  I know that is kinda big brother but I really believe in a somewhat of an invasion of privacy for the overall good of humanity.&lt;/p>
&lt;p>This demo could easily be extended to use more automated methods as well.  Think of companies like Dropbox analyzing files or your ISP analyzing files.  I know this would be quite creepy but it could honestly possibly save lives and prevent these horrible massacres.&lt;/p>
&lt;p>I know this post is kind of controversial but it is good to be talking about this and hopefully some good will come from this.  Please leave me feedback below or tweet me &lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a>.&lt;/p></description></item><item><title>Deploying your Meteor app to Cloud Foundry and Bluemix</title><link>https://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</link><pubDate>Wed, 05 Aug 2015 11:03:35 -0500</pubDate><guid>https://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/meteor.jpg" alt="Featured image of post Deploying your Meteor app to Cloud Foundry and Bluemix" />&lt;p>&lt;a class="link" href="meteor-logo.png" >&lt;img src="https://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/meteor-logo.png"
width="600"
height="142"
srcset="https://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/meteor-logo_hu_d57525fbabf0753f.png 480w, https://www.jeffsloyer.io/post/deploying-your-meteor-app-to-cloud-foundry-and-bluemix/meteor-logo_hu_ae8b5e4f60bf2df4.png 1024w"
loading="lazy"
alt="meteor-logo"
class="gallery-image"
data-flex-grow="422"
data-flex-basis="1014px"
>&lt;/a>Meteor is a pretty powerful and cool framework for developing modern webapps all in Javascript.  It provides some really cool things as a modern UI, responsive code that works on a desktop and a mobile device, and some really slick features with websockets with client and server side rendering.&lt;/p>
&lt;p>I heard about Meteor mid-2014 but it peaked my interest last week when I was at a customer and a developer at the customer was building a Meteor app and they were asking how to run it on Bluemix.  Of course doing my job I helped the developer get the app running but it took a couple tweaks to the Cloud Foundry buildpack for Meteor.&lt;!-- more -->&lt;/p>
&lt;p>You might be asking what a buildpack is, that&amp;rsquo;s totally fine.  In Cloud Foundry you can use basically any language you want for your app, all you need is some code to laydown the app server or middleware and compile your code together and install dependencies.  For Meteor there is a buildpack available but it was slighly out of date.&lt;/p>
&lt;p>Last week and this week I committed some changes to the buildpack to make it more robust and compatible for newer Meteor apps.&lt;/p>
&lt;p>The buildpack now will allow you to use your existing Meteor app and push it to Cloud Foundry and Bluemix.&lt;/p>
&lt;p>For the rest of this blog post I am going to walk through on how to build an example Meteor app and push it to Bluemix.&lt;/p>
&lt;h2 id="pre-reqs">Pre-req&amp;rsquo;s
&lt;/h2>&lt;ul>
&lt;li>Sign up for a &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-MeteorSample-_-Node-MongoLab-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a> account.  Go &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-MeteorSample-_-Node-MongoLab-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a> and click on Sign-up in the top right hand corner.&lt;/li>
&lt;li>Meteor installed locally, go &lt;a class="link" href="https://www.meteor.com/install" target="_blank" rel="noopener"
>Meteor install&lt;/a> to install Meteor&lt;/li>
&lt;li>Cloud Foundry Command Line (CLI) installed, go &lt;a class="link" href="https://www.ng.bluemix.net/docs/#starters/install_cli.html" target="_blank" rel="noopener"
>install CLI&lt;/a> for instructions&lt;/li>
&lt;/ul>
&lt;h2 id="steps">Steps
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Create a sample Meteor app, we are going to use the leaderboard example&lt;/p>
&lt;pre>&lt;code> meteor create --example leaderboard
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Push the sample app to Bluemix. &lt;strong>Note&lt;/strong>, this command will not start the app, we will need to choose our database next. Also replace leaderboard with a unique name for your app, for example leaderboard-jbs (my intials).&lt;/p>
&lt;pre>&lt;code> cf push leaderboard -b https://github.com/cloudfoundry-community/cf-meteor-buildpack.git --no-start
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Next we need to choose if we want to use the built on Mongo DB with Cloud Foundry or an external third party MongoLab. It honestly doesn&amp;rsquo;t matter too much but MongoLab is built for scale is more reliable, I would choose MongoLab myself.&lt;/p>
&lt;p>&lt;strong>Built in MongoDB:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create the database.
cf create-service mongodb 100 leaderboard-mongodb&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect the database to our app. Replace leaderboard with the name of your app (ex. leaderboard-jbs).&lt;/p>
&lt;pre>&lt;code> cf bind-service leaderboard leaderboard-mongodb
&lt;/code>&lt;/pre>
&lt;p>would then become&lt;/p>
&lt;pre>&lt;code> cf bind-service leaderboard-jbs leaderboard-mongodb
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>MongoLab:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Create the database.
cf create-service mongolab sandbox leaderboard-mongolab&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect the database to our app. Replace leaderboard with the name of your app (ex. leaderboard-jbs).&lt;/p>
&lt;pre>&lt;code> cf bind-service leaderboard leaderboard-mongolab
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>would then become&lt;/p>
&lt;pre>&lt;code> cf bind-service leaderboard-jbs leaderboard-mongolab
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Start the application. Replace leaderboard with the name of your app&lt;/p>
&lt;pre>&lt;code> cf start leaderboard
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>Open up two web browsers and goto the same url, for me my URL would be &lt;a class="link" href="http://leaderboard-jbs.mybluemix.net" target="_blank" rel="noopener"
>http://leaderboard-jbs.mybluemix.net&lt;/a>.  I got this url by putting the name of my app in front of mybluemix.net.&lt;/p>
&lt;p>In the video below you can see when you choose a player and then click add 5 points the other browser is updated instantly.  The example app is saving this information in the Mongo database then using websockets to notify all the connected clients of the change.  This is one of the really powerful features of Meteor.&lt;/p>
&lt;p>The work with the developer at the client last week has renewed my interest in Meteor and will have to dig into it more.&lt;/p>
&lt;p>If you prefer to watch a video of this as well, check out Video – &lt;a class="link" href="https://www.jeffsloyer.io/post/video-deploying-your-meteor-app-to-cloud-foundry-and-bluemix/" >Deploying your Meteor app to Cloud Foundry and Bluemix&lt;/a>.&lt;/p>
&lt;p>I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter [@jsloyer](&lt;a class="link" href="https://twitter.com/jsloyer" target="_blank" rel="noopener"
>https://twitter.com/jsloyer&lt;/a> target=).  There will also be a video forth coming as well.&lt;/p></description></item><item><title>Zero Downtime Deployment with the CF Autopilot Plugin</title><link>https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</link><pubDate>Fri, 19 Jun 2015 10:41:59 -0500</pubDate><guid>https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/unplug.jpg" alt="Featured image of post Zero Downtime Deployment with the CF Autopilot Plugin" />&lt;p>Zero down time deployments are a must for any Internet app running at scale.  Without the use of zero down time deployments, you would have to take down your application even just for a fraction of a second but in that fraction of a second you could lose a transaction or a purchase from a customer.  This is not acceptable anymore.  Some people like to call these apps cloud based apps, which I think is fine, but I’d rather call them Internet scale or born on the cloud apps.  The companies who create these apps understand the apps’s need to stay up, because their app is their only lifeline and, hopefully, a source of income from the world.&lt;/p>
&lt;p>Companies such as Facebook, Etsy, and Twitter have been using zero down time deployments for years.  They thrive because they do multiple deployments to production a day.  The number of deployments they do in one day is actually larger than most enterprise companies do in a full year.  Part of the trick is that the code changes are small but they have employed strategies such as zero down time deployments to get code into production as fast as they can.&lt;/p>
&lt;!-- more -->
&lt;h2 id="ground-rules">Ground Rules…
&lt;/h2>&lt;p>There are many names for this, zero down time deployments, obviously, but some people use the term blue/green, while others use the term red/back.  They all mean the same thing.  Instead of having a bias for colors in this post lets use the term “zero down time”.&lt;/p>
&lt;p>So what is it?&lt;/p>
&lt;p>Zero Down time deployments are basically what they sound like.  You update production without taking downtime.  It’s not always that simple though.  For the context of this post we are going to be talking about how to do zero down time deployments in Cloud Foundry.&lt;/p>
&lt;p>Basically it’s a little trick to taking advantage of the way Cloud Foundry runs underneath the covers.  Before we jump into it, there are a couple of caveats that we should discuss first.  To successfully take advantage of zero down time deployments you should have followed the &lt;a class="link" href="http://12factor.net/" target="_blank" rel="noopener"
>12 Factor App guidelines&lt;/a>. This will ensure that your app is horizontally scalable and can be deployed in a manner that will result in zero down time.  Below are some highlights that you should abide by.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Do not store sessions on disk or in memory.  Store them in some type of shared database or file system.  This could be your favorite database or an in memory database as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Do not store configuration information in your application or on disk.  You should store your config info for your app in environment variables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is probably the most important, your application needs to be forward and backwards compatible with your database schema…  Say what?  Yes, you need to trust your developers to manage the database schema from your code.If you are using a relational database, you will need some kind of framework to do database migrations for you.  It’s not just that simple with relational databases though…  If you have a big database migration DO NOT PERORM MIGRATIONS THAT WILL INTERRUPT TRAFFIC!  Perform them slowly over time where migrations do not impact users and traffic.  Yahoo had a major application upgrade and it took them 6 months to do the migration to avoid impacting users and taking an outage.  Remember we do not take outages…  If you are in NoSQL land, your life is easier.  Just revision your API’s and educate your developers on forward and backwards data compatibility.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="importance-of-zero-down-time-deployments">Importance of Zero Down Time Deployments
&lt;/h2>&lt;p>So why are zero down time deployments so important?  The answer is simple, to keep your website/app up so you can make money!  Well that might be over-simplified a bit, but basically it all boils down to keeping your app up so you can continue to do what you do best, and hopefully that involves making money.  If you look at Facebook, for example, they put code into production weeks and months before a feature is exposed to the public.  They extensively test the features on employees first, then slowly enable the features to the rest of the world.&lt;/p>
&lt;p>This is key, getting features in front of your customers and getting feedback from them.  If it works that’s great, but if it doesn’t at least you know in a short time frame so you can remove it and pivot to go in a different direction.  The current landscape is so fast paced that if you don’t get a feature out, your competition could beat you.&lt;/p>
&lt;h2 id="how-does-it-work">How does it work?
&lt;/h2>&lt;p>So let’s walk through what needs to happen to perform zero downtime deployments in Cloud Foundry.  For the use of the walk-through, the application is currently taking traffic on &lt;code>myapp.mybluemix.net&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Deploy your app or use a currently running app.
Currently your application is taking traffic on &lt;code>myapp.mybluemix.net&lt;/code>.
&lt;a class="link" href="zero-downtime-graphics.001.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.001.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.001_hu_67a6719a618981e5.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.001_hu_9cf09c6100caf55a.png 1024w"
loading="lazy"
alt="zero downtime graphics.001 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deploy the new version of your app to &lt;code>myapp-temp.mybluemix.net&lt;/code>.
At this time there is currently two versions of your app running.  &lt;code>myapp.mybluemix.net&lt;/code> is still taking production traffic.
The new app &lt;code>myapp-temp.mybluemix.net&lt;/code> is separate, it can be pointed to your production API keys and databases at this point.
&lt;a class="link" href="zero-downtime-graphics.002.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.002.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.002_hu_eb1fe4ca1db1eba1.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.002_hu_f8db8cd111c0f3e7.png 1024w"
loading="lazy"
alt="zero downtime graphics.002 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Perform smoke tests on the new version of the application.
Some people say this step is optional, but to me its not.  This is key to make sure there wasn’t any weird regressions or merge issues, they CAN happen…&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Map production traffic to the new version of your app.
At this point the old version of your app and the new version are both taking production traffic.
&lt;a class="link" href="zero-downtime-graphics.003.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.003.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.003_hu_63c6b419a410167d.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.003_hu_17ea991aa50404ca.png 1024w"
loading="lazy"
alt="zero downtime graphics.003 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unmap production traffic from the old version of the app.  You can optionally delete the old version as well.
At this point the new version becomes production and ONLY it is taking traffic.
The new version still has two URL’s though, &lt;code>myapp.mybluemix.net&lt;/code> and &lt;code>myapp-temp.mybluemix.net&lt;/code>.
&lt;a class="link" href="zero-downtime-graphics.004.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.004.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.004_hu_19326b037542fa88.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.004_hu_49e08d9f24a6dbc1.png 1024w"
loading="lazy"
alt="zero downtime graphics.004 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remove the temporary route &lt;code>myapp-temp.mybluemix.net&lt;/code> from the new version of your app.
&lt;a class="link" href="zero-downtime-graphics.005.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.005.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.005_hu_679aa03b0584be84.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.005_hu_669e628ff6813144.png 1024w"
loading="lazy"
alt="zero downtime graphics.005 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>While this can be scripted there really isn’t a need to do that, there is a Cloud Foundry CLI plugin to do this.&lt;/p>
&lt;h2 id="autopilot-plugin">Autopilot plugin
&lt;/h2>&lt;p>Recently the Cloud Foundry CLI started supporting plugins.  This is the holy grail for CF and you can start doing some fun stuff.  In this case, the fun stuff is automating the complex, possibly human error-prone, steps above.  As a dev, if I can automate something and reduce the chance of something going wrong, I am all in.  If you do this, your IT/operations department will love you.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/concourse/autopilot" target="_blank" rel="noopener"
>The plugin&lt;/a> performs the above steps for you for performing the zero downtime deployment.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Ensure you have a &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a> account, if you do not sign up &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install dependencies.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>1. Golang installed ([instructions](https://golang.org/doc/install))
2. Version 6.7.0 or greater of the Cloud Foundry CLI
To check what version you have running, run `cf -v` in your terminal.
[01:36 PM] jsloyer@jeffs-mbp-2 [~]&amp;gt;cf -v
cf version 6.8.0-b15c536-2014-12-10T23:34:29+00:00
To upgrade go [here](https://github.com/cloudfoundry/cli/releases).
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>
&lt;p>Ensure you have an app running/already deployed.  The plugin requires that you have an app already deployed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run the following.  I will describe what each line is doing.&lt;/p>
&lt;p>go get github.com/concourse/autopilot
cf install-plugin $GOPATH/bin/autopilot
cf login -a ${CF_API} -u ${CF_USERNAME} -p ${CF_PASSWORD} -o ${CF_ORG} -s ${CF_SPACE}
cf zero-downtime-push myapp -f manifest.yml&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Line 1 fetches the source code for the plugin.
Line 2 installs the plugin
Line 3 logins into Bluemix.  I have the sensitive information replace with environment variables.
Line 4 performs the zero down time deployment.
&lt;/code>&lt;/pre>
&lt;p>The plugin does require a &lt;code>manifest.yml&lt;/code>.  The plugin basically views the &lt;code>manifest.yml&lt;/code> files as the truth of the state of the application.&lt;/p>
&lt;h2 id="extensions-with-ci-pipelines">Extensions with CI Pipelines
&lt;/h2>&lt;p>This will be forthcoming in an upcoming blog post on how to use some of the most popular CI engines out there.&lt;/p>
&lt;h2 id="recap">Recap
&lt;/h2>&lt;p>Just to review what we did here, we learned what zero down time deployments are, why they are crucial to any Internet scale application, and how to perform a zero down time deployment.  Then, we took it a step further on how to use a Cloud Foundry plugin to do the heavy lifting for us and automate the zero down time deployment.&lt;/p>
&lt;p>I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter [@jsloyer](&lt;a class="link" href="https://twitter.com/jsloyer" target="_blank" rel="noopener"
>https://twitter.com/jsloyer&lt;/a> target=)&lt;/p>
&lt;h2 id="video">Video
&lt;/h2>&lt;p>I have also published a video if you prefer to watch that instead, please check out &lt;a class="link" href="https://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/" >Zero Downtime Deployment with the CF Autopilot Plugin – Video.&lt;/a>&lt;/p>
&lt;h2 id="additional-parts">Additional part&amp;rsquo;s
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix-and-codeship/" >Zero downtime deployments with Bluemix and Codeship&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>IoT Python app with a Raspberry Pi and Bluemix</title><link>https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/</link><pubDate>Thu, 02 Apr 2015 10:29:53 -0500</pubDate><guid>https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/iot-pi.jpg" alt="Featured image of post IoT Python app with a Raspberry Pi and Bluemix" />&lt;p>This is an extension/continuation from the blog post on how to create a &lt;a class="link" href="https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/" >basic Python webapp&lt;/a>.  In this tutorial we are going to go through how to integrate a Python Flask webapp in Bluemix with the &lt;a class="link" href="https://internetofthings.ibmcloud.com/" target="_blank" rel="noopener"
>Internet of Things Foundation&lt;/a> in Bluemix with a Raspberry Pi and two sensors on the Raspberry Pi.  The tutorial also uses Twilio to interact with the Raspberry Pi.&lt;/p>
&lt;p>So what does this look like?  Here is a simple architecture diagram.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/raspberrypidiagram.png"
width="1733"
height="1135"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/raspberrypidiagram_hu_b8d126391b66e46f.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/raspberrypidiagram_hu_7ea4d030be7309b.png 1024w"
loading="lazy"
alt="raspberrypidiagram IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="152"
data-flex-basis="366px"
>&lt;/p>
&lt;!-- more -->
&lt;p>In the above diagram there is two flows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The first flow involves pressing a HTML button in the Python Flask app in Bluemix to either turn on or off an LED on the Raspberry Pi.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The second flow involves pressing a physical button on the breadboard on the Raspberry Pi and using the IoT service in Bluemix and our app in Bluemix it will send a text message of our choosing to a phone number we enter in the Python Flask app in Bluemix using Twilio.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>This all took only about 100 lines of code, pretty cool huh?&lt;/p>
&lt;p>If you prefer to watch a video of this instead of going through the written steps in this tutorial, check out the video below.&lt;/p>
&lt;h2 id="setup">Setup
&lt;/h2>&lt;p>There is two parts to setting this up.  If we take a look at the architecture diagram above we see that there is a Raspberry Pi piece and then a Bluemix piece.  We are going to go through the Raspberry Pi piece first then we will go through the Bluemix piece.&lt;/p>
&lt;h2 id="raspberry-pi-setup-steps">Raspberry Pi Setup Steps
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Sign up for a Bluemix account, visit &lt;a class="link" href="http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp" target="_blank" rel="noopener"
>http://bluemix.net&lt;/a> in your web browser and click “Sign-up” in the top right.  We require a couple bits of information&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wait for an email to arrive, it should only take a couple minutes.  There should be a link in the email that says “Click here to complete your registration”, click that.  Sign in with the username and password you created from step 1.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Obtain a Raspberry Pi, a bread board, wires, a LED, and a button  (your best bet is getting a starter kit such as the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Place an LED in the breadboard (place the shorter side to the left)&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/led.png"
width="2554"
height="1306"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/led_hu_749bc4504e3b5cc6.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/led_hu_4471df89387d8785.png 1024w"
loading="lazy"
alt="led IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Place a 220 ohm resistor in the breadboard connecting the short side (the left side of the LED) to the ground rail (the rail with the – sign).  Make sure to place the side of the resistor with the red stripes closest to the LED_NOTE:_ The way the breadboard works is connections run vertically not horizontally&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/resistor.png"
width="2560"
height="1290"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/resistor_hu_120786989cc9512e.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/resistor_hu_24cd22be088cca61.png 1024w"
loading="lazy"
alt="resistor IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect a wire from the ground rail to the GND on the pinout board&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/ground.png"
width="2550"
height="1249"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/ground_hu_79ad35a9de1a948.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/ground_hu_96202a92d48757b1.png 1024w"
loading="lazy"
alt="ground IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="204"
data-flex-basis="489px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the right side of the LED, connect a wire to the the port labeled 17.&lt;strong>NOTE:&lt;/strong> The way the breadboard works is connections run vertically not horizontally.&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/gpio17.png"
width="2555"
height="1297"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/gpio17_hu_dc3ca2a2afad3c5e.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/gpio17_hu_a296772ce5d30e4c.png 1024w"
loading="lazy"
alt="gpio17 IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="472px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Place the button in the breadboard, it takes a bit of force to press it in all the way.  It won’t break it.&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/button.png"
width="2551"
height="1309"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/button_hu_a5fd50e46fdcb725.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/button_hu_7ec726de74ff3cce.png 1024w"
loading="lazy"
alt="button IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="194"
data-flex-basis="467px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect a wire from the right side of the button to the ground rail.&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/buttonground.png"
width="2571"
height="1308"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/buttonground_hu_af4c512b0d95dbf3.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/buttonground_hu_f859855800145f1b.png 1024w"
loading="lazy"
alt="buttonground IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="196"
data-flex-basis="471px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Connect a wire from the ground rail to a GND port, it doesn’t matter which one it is&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/buttongroundrail.png"
width="2036"
height="1438"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/buttongroundrail_hu_7b138b6945318671.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/buttongroundrail_hu_ec70a82753480480.png 1024w"
loading="lazy"
alt="buttongroundrail IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Lastly, connect a wire from the left side of the button to GPIO port 18.&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/gpio18.png"
width="2036"
height="1438"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/gpio18_hu_7b138b6945318671.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/gpio18_hu_ec70a82753480480.png 1024w"
loading="lazy"
alt="gpio18 IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to either use the console for our Raspberry Pi and the terminal application on the device itself or use SSH.  I am going to use SSH.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To get the IP address of your Raspberry Pi the easiest thing is to open up the terminal app on the Raspberry Pi, it is under accessories -&amp;gt; Terminal&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type &lt;code>ifconfig&lt;/code>..  If you are connected over Ethernet the IP address will be under eth0, if you are connected over wifi, the IP address will be under wlan0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to ssh into the device.—Windows, download Putty and use that to connect to the IP address—Mac and Linux, open the Terminal app, type &lt;code>ssh pi@myipaddress&lt;/code> where myipaddress is the IP address of the Raspberry Pi, ex. &lt;code>192.168.1.65&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The password is raspberrypi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to run some commands to update our Raspberry Pi, run the following.  It will ask you to confirm with the “Y” key&lt;/p>
&lt;p>sudo apt-get update
sudo-apt-get upgrade&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to install a helper library for using GPIO&lt;/p>
&lt;p>git clone git://git.drogon.net/wiringPi
cd wiringPi
./build&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to install the IoT library on the Raspberry Pi&lt;/p>
&lt;p>curl -LO &lt;a class="link" href="https://github.com/ibm-messaging/iot-raspberrypi/releases/download/1.0.2/iot_1.0-1_armhf.deb" target="_blank" rel="noopener"
>https://github.com/ibm-messaging/iot-raspberrypi/releases/download/1.0.2/iot_1.0-1_armhf.deb&lt;/a>
sudo dpkg -i iot_1.0-1_armf.deb&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to get the device ID of our raspberry Pi do this run the following and save the output&lt;/p>
&lt;p>service iot getdeviceid
#example output
The device id is b827eba5b236&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>We will want to copy the id `b827eba5b236`, yours obviously will be different
&lt;/code>&lt;/pre>
&lt;ol start="21">
&lt;li>
&lt;p>Open up a web browser and goto &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>bluemix.net&lt;/a>, and click on “Catalog” in the top.  Scroll down to the very bottom and click “Internet of Things”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Give the service a name, use iot-python (you must do this exactly or later things won’t work), for App choose “Leave unbound”, click “Create”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the left of the next page click “Launch dashboard”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>At the top click on “Devices”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click “Add Device”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For the second field (it says e.g. mydevice type) type in exactly &lt;code>raspberrypi&lt;/code> (you need to have it spelled like this or there will be issues).  For device ID paste in the device ID we got from step 20, mine is &lt;code>b827ba5b236&lt;/code>.  Click continue.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the next page it will show something like below, copy this and switch back to terminal on your Raspberry Pi.&lt;/p>
&lt;p>org=pwftki
type=raspberrypi
id=000000000000
auth-method=token
auth-token=cXQaGx8o!a9HwxM-ka&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Choose your favorite text editor but I am going to use vi.  Type the following to open the file we want to edit.&lt;/p>
&lt;p>sudo vi /etc/iotsample-raspberrypi/device.cfg&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To paste the text press the “i” key.  Then paste the text, this will depend on the OS you are on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To save the file hit the “Esc” key.  Then Type “:wq” and then press “Enter”.  That will save the file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Let’s restart the IoT service on our Raspberry Pi to start sending the data to the IoT service&lt;/p>
&lt;p>sudo service iot restart&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to download the Python code to run on the Raspberry Pi, run the following:&lt;/p>
&lt;p>cd ~
git clone &lt;a class="link" href="https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git" target="_blank" rel="noopener"
>https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git&lt;/a>
cd python-iot-raspberry-pi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now we need to install the package manager for Python:&lt;/p>
&lt;p>sudo apt-get install python-pip
sudo pip install -r requirements.txt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>One last bit, we need a config file for our app before we can start it.  Lets run the following:&lt;/p>
&lt;p>vi ~/device.cfg&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remember this is vi again, so remember the shortcuts for inserting text and saving it from step 29,30.  The contents of the file should look something like below, replacing yourapikey, yourdeviceid, youriotorg, and yourapitoken with the correct values. To generate the API key and token we can get them from going back to the web browser and going to the Internet of Things Foundation.  At the top  click on API Keys.  Click “New API Key”.  The values that it gives you will be the values you use for the yourapitoken and yourapikey. &lt;code>yourdeviceid&lt;/code> is the value we got from step 20 &lt;code>youriotorg&lt;/code> is from step 27, it is also in your config file; in my case my value is pwftki. Let’s save the file (remember, “Esc”, “:wq”, “Enter”)&lt;/p>
&lt;p>[application]
org=youriotorg
id=yourdeviceid
auth-method=apikey
auth-key=yourapikey
auth-token=yourauthtoken&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OK, so now we can launch/start the app on the Raspberry Pi.  To do that run the following:&lt;/p>
&lt;p>cd ~/python-iot-raspberry-pi
sudo python client.py&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="bluemix-app-setup-steps">Bluemix App Setup Steps
&lt;/h2>&lt;h6 id="note--the-following-steps-are-to-be-run-on-your-desktop-not-the-raspberry-pi">NOTE: The following steps are to be run on your desktop NOT the Raspberry Pi.
&lt;/h6>&lt;ol>
&lt;li>
&lt;p>We will need to install the Cloud Foundry CLI to deploy our app to Bluemix.  To do this head over to &lt;a class="link" href="https://github.com/cloudfoundry/cli/releases" target="_blank" rel="noopener"
>https://github.com/cloudfoundry/cli/releases&lt;/a>.  Choose the appropriate installer for your platform, download it and run the installer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>So let’s open up a new terminal Window, we will need to do the rest on our development machine/laptop.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to download the Python code for our app.  Run the following.  If you don’t have git installed follow these instructions &lt;a class="link" href="http://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>git clone &lt;a class="link" href="https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git" target="_blank" rel="noopener"
>https://github.com/IBM-Bluemix/python-iot-raspberry-pi.git&lt;/a>
cd python-iot-raspberry-pi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In your web browser go back to the tab that you have Bluemix open with.  In the top click “Catalog”, scroll down to find “Twilio”.  Click on that.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you already have a Twilio account and want to use that skip to step 6.  If you don’t have a Twilio account on the right hand side click “Register at Twilio”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Twilio will ask you for some information and you will need to verify your phone number.  This is important as only numbers verified with the free plan will work with your app.   If you want to be able to text any number you need to pay for Twilio, its $1/month/phone number.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once you are signed up for your account, head to &lt;a class="link" href="https://www.twilio.com/user/account/voice-messaging" target="_blank" rel="noopener"
>https://www.twilio.com/user/account/voice-messaging&lt;/a>.  Near the top right there will be a twistie that says “Show API Credentials”, click that.  There is two pieces of information here, the Account SID and Auth Token.  We will need to copy these back to the Bluemix tab we have open with Twilio.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Paste your Account SID in the field in Bluemix that says Account SID, paste your Auth Token in the Auth Token field.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For the Service name you must type in this exactly iot-twilio&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For the App, choose “Leave Unbound”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click Create.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Switch back to the terminal that you have on your local dev machine, not your Raspberry Pi.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We need to login to Bluemix, to do that, type &lt;code>cf login -a https://api.ng.bluemix.net&lt;/code>. It will ask you for your username and password. This is from step 1 in the Raspberry Pi section above.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To deploy our application all we need to do now is type &lt;code>cf push myappname&lt;/code> where myapp name is a unique name you choose for your app.&lt;em>NOTE:&lt;/em> If you get an error mentioning a route is taken, choose a different name and run &lt;code>cf push&lt;/code> with a new app name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It will take about a minute or two to deploy your application but eventually you will get some output that looks like the following:&lt;/p>
&lt;p>requested state: started
instances: 1/1
usage: 1G x 1 instances
urls: testapp-jbs.mybluemix.net
last uploaded: Fri Jul 31 00:25:17 UTC 2015
stack: lucid64
buildpack: SDK for Node.js(TM) (ibm-node.js-0.12.7)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>There is a row that says &lt;code>urls:&lt;/code>, copy that URL and paste it into your browser.&lt;/p>
&lt;p>If everything went well you should have a page that looks like the following:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/pythoniotapp.png"
width="671"
height="192"
srcset="https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/pythoniotapp_hu_4e9b23f804cbe845.png 480w, https://www.jeffsloyer.io/post/iot-python-app-with-a-raspberry-pi-and-bluemix/pythoniotapp_hu_2167463e78183380.png 1024w"
loading="lazy"
alt="pythoniotapp IoT Python app with a Raspberry Pi and Bluemix"
class="gallery-image"
data-flex-grow="349"
data-flex-basis="838px"
>&lt;/p>
&lt;p>An important note here, do not press the button on the Raspberry Pi until you enter a phone number and text message here, if you do the app will crash.  If you do this you can restart you app with &lt;code>cf restart myappname&lt;/code>, where myappname is the name of the app you chose above.&lt;/p>
&lt;p>When you click the “On” button it should turn the light on for you.  If you press the “Off” button it should turn the light off.&lt;/p>
&lt;h2 id="feedback">Feedback
&lt;/h2>&lt;p>Follow us on Twitter at &lt;a class="link" href="https://twitter.com/IBMBluemix" target="_blank" rel="noopener"
>@IBMBluemix&lt;/a> and follow the author of this blog post (Jeff Sloyer, one of our developer advocates) at &lt;a class="link" href="https://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a>&lt;/p></description></item><item><title>Simple Hello World Python App using Flask</title><link>https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/</link><pubDate>Mon, 30 Mar 2015 10:17:51 -0500</pubDate><guid>https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/helloworld.png" alt="Featured image of post Simple Hello World Python App using Flask" />&lt;p>Hey Y’all!  Jeff here again, today we are going to be going through some really simple steps to get started deploying a simple hello world python app using Flask on Bluemix.&lt;/p>
&lt;p>&lt;a class="link" href="http://flask.pocoo.org/" target="_blank" rel="noopener"
>Flask&lt;/a> is an awesome and really lightweight framework in Python to create powerful webapps.  We are going to use it make a really simple hello world app in Python though.&lt;/p>
&lt;!-- more -->
&lt;p>In this post we are going to go through the written instructions on how to do it but if you prefer watching a video check out the video below.&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/b-SF3bgaQTw" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>In this tutorial we are going to go through two steps to deploy the app.  One is a simple click a button to deploy to your app, we will go through that first.  The second approach is a little more in depth and involves installing a command line tool to upload the application.  This is great and preferred if you will be editing the code or you want to dig into the nuts and bolts of things.&lt;/p>
&lt;h2 id="simple-getting-started-steps">Simple Getting Started Steps
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Sign up for a Bluemix account, visit &lt;a class="link" href="http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp" target="_blank" rel="noopener"
>http://bluemix.net&lt;/a> in your web browser and click “Sign-up” in the top right.  We require a couple bits of information&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wait for an email to arrive, it should only take a couple minutes.  There should be a link in the email that says “Click here to complete your registration”, click that.  Sign in with the username and password you created from step 1.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click the button below (this will deploy the app for you).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You will come to a page that has a button called “Login”.  Go ahead and click that.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next you will be taken to a page that asks you to create an alias.  If my email address was &lt;a class="link" href="mailto:jeff.davis251@gmail.com" >jeff.davis251@gmail.com&lt;/a> I would use jeffdavis251.  Hint it doesn’t like periods &lt;img src="https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/icon_smile.gif"
width="15"
height="15"
srcset="https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/icon_smile_hu_68a78047e27b967b.gif 480w, https://www.jeffsloyer.io/post/simple-hello-world-python-app-using-flask/icon_smile_hu_e6072a0436c6ceff.gif 1024w"
loading="lazy"
alt="icon smile Simple Hello World Python App using Flask"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click Create.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It will take you to another page, click “Continue”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now everything is basically setup, it will take us to a page that looks like what is below, just click the “Deploy” button.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Grab a cup of coffee or take a bathroom break, well a quick one!  It will only take a minute or two to deploy the app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In a hot second you should be taken to a page that looks like what is below.  To view your hello world app just click the button “View your App”.
[![deploy done 1024x544 Simple Hello World Python App using Flask]&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Thats it for the quick and easy steps.  Let’s go through the more advanced steps where you can modify the code and upload the app from your own machine.&lt;/p>
&lt;h2 id="a-little-more-involved-steps">A little more involved steps
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>This will assume you have signed up for an account, steps 1 and 2 from above.  If you haven’t signed up for an account scroll up and do that now.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install Git, follow the instructions from &lt;a class="link" href="http://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install the Cloud Foundry command line.  Choose the appropriate installer from &lt;a class="link" href="https://github.com/cloudfoundry/cli/releases" target="_blank" rel="noopener"
>here&lt;/a> and download it and run the installer.  You might be asking what Cloud Foundry is, its the open source Platform as a Service that Bluemix is built on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open up the terminal/command prompt
Mac – Click on the finder icon in the top right, search for terminal and open that
Linux – Depends on your distro, but you probably know where it is, in the menu look for accessories usually then terminal, open that
Windows – Click the start button, search for cmd, open that&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Type the following.  The following commands downloads the starter app and puts us into the right directory to deploy the app.&lt;/p>
&lt;p>git clone &lt;a class="link" href="https://github.com/IBM-Bluemix/python-hello-world-flask.git" target="_blank" rel="noopener"
>https://github.com/IBM-Bluemix/python-hello-world-flask.git&lt;/a>
cd python-hello-world-flask&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to login to Bluemix, we will use the terminal window that we already have open for this.&lt;/p>
&lt;p>cf login -a &lt;a class="link" href="https://api.ng.bluemix.net" target="_blank" rel="noopener"
>https://api.ng.bluemix.net&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>__Note__: It will ask for your username and password, this is the one you just created.
&lt;/code>&lt;/pre>
&lt;ol start="7">
&lt;li>
&lt;p>Last step, we just need to upload the app, run the following replacing myappname with the URL you want your app to be available at.  Bluemix will give you a URL based on this name.  If I chose jeff-is-awesome, my app would be available at &lt;a class="link" href="http://jeff-is-awesome.mybluemix.net" target="_blank" rel="noopener"
>http://jeff-is-awesome.mybluemix.net&lt;/a>.&lt;/p>
&lt;p>cf push myappname&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you get an error mentioning something like below, that means someone already has an app using that URL, just choose another one and rerun the command&lt;/p>
&lt;h4 id="error">Error:
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[01:54 PM] jsloyer@Jeffs-MacBook-Pro [python-hello-world-flask]&amp;gt;cf push jeff-is-awesome
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating app jeff-is-awesome in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Creating route jeff-is-awesome.mybluemix.net...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FAILED
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server error, status code: 400, error code: 210003, message: The host is taken: jeff-is-awesome
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="fix">Fix:
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push myappname-unique
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You will basically get some output that looks like the following.  It will give you the URL to access your app.  In this case the URL to my app is &lt;code>http://jeff-is-awesome2.mybluemix.net&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[02:05 PM] jsloyer@Jeffs-MacBook-Pro [python-hello-world-flask]&amp;gt;cf push jeff-is-awesome2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Updating app jeff-is-awesome2 in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">... snip ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">App jeff-is-awesome2 was started using this command `python hello.py`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Showing health and status for app jeff-is-awesome2 in org jbsloyer@us.ibm.com / space demos as jbsloyer@us.ibm.com...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="wrapping-up">Wrapping Up
&lt;/h2>&lt;p>To recap we just went through two different ways to deploy a python app to Bluemix.  The first method is really quick so you can see the power of the platform and get something up and running quick.  The second approach used the command line so you can modify the app and hack on it and customize it.&lt;/p>
&lt;h2 id="feedback">Feedback
&lt;/h2>&lt;p>Follow us on Twitter at &lt;a class="link" href="http://twitter.com/IBMBluemix" target="_blank" rel="noopener"
>@IBMBluemix&lt;/a>.&lt;/p>
&lt;p>Follow the author of this blog post (Jeff Sloyer, one of our developer advocates) at &lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a>&lt;/p></description></item><item><title>Tips for Migrating Ruby on Rails Applications to Bluemix</title><link>https://www.jeffsloyer.io/post/tips-for-migrating-ruby-on-rails-applications-to-bluemix/</link><pubDate>Thu, 05 Mar 2015 10:09:31 -0500</pubDate><guid>https://www.jeffsloyer.io/post/tips-for-migrating-ruby-on-rails-applications-to-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/tips-for-migrating-ruby-on-rails-applications-to-bluemix/migrate.jpg" alt="Featured image of post Tips for Migrating Ruby on Rails Applications to Bluemix" />&lt;p>&lt;img src="https://www.jeffsloyer.io/post/tips-for-migrating-ruby-on-rails-applications-to-bluemix/Ruby_on_Rails-logo.png"
width="316"
height="376"
srcset="https://www.jeffsloyer.io/post/tips-for-migrating-ruby-on-rails-applications-to-bluemix/Ruby_on_Rails-logo_hu_c0baf2a74f99fe6.png 480w, https://www.jeffsloyer.io/post/tips-for-migrating-ruby-on-rails-applications-to-bluemix/Ruby_on_Rails-logo_hu_9616540ae7f03bb2.png 1024w"
loading="lazy"
alt="Ruby on Rails.svg 231x300 Tips for Migrating Ruby on Rails Applications to Bluemix"
class="gallery-image"
data-flex-grow="84"
data-flex-basis="201px"
>Who doesn’t love some Ruby?  Bluemix definitely loves Ruby on Rails!  Sometimes running a Ruby on Rails app can be a little tricky, so I have included some tips and tricks for migrating your Ruby on Rails app to Bluemix. They will include:&lt;/p>
&lt;ul>
&lt;li>Required gems&lt;/li>
&lt;li>Code tweaks&lt;/li>
&lt;li>Accessing external databases&lt;/li>
&lt;li>Deploying your app&lt;/li>
&lt;/ul>
&lt;!-- more -->
&lt;h3 id="required-gems">Required gems
&lt;/h3>&lt;p>If you are using PostgreSQL you need to include &lt;code>pg&lt;/code>. Sqlite3 is included to get local development working as well.  Add the following line to your Gemfile.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gem &amp;#39;pg&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gem &amp;#39;sqlite3&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Additionally there are two more gems you should include as well.  These gems will be included by some Ruby buildpacks but we should include them just in case.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gem &amp;#34;cf-autoconfig&amp;#34;, &amp;#34;~&amp;gt; 0.2.1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gem &amp;#39;rails_12factor&amp;#39;, group: :production
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="code-tweaks--external-databases">Code tweaks &amp;amp; external databases
&lt;/h3>&lt;p>When you deploy your app to Bluemix, the Ruby buildpack will overwrite your database.yml file to pull in the attached DB service.  You should have a &lt;code>database.yml&lt;/code> file if you are running locally.  Below is a pretty standard one:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># SQLite version 3.x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># gem install sqlite3-ruby (not necessary on OS X Leopard)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">development:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> adapter: sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> database: db/development.sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool: 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timeout: 5000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Warning: The database defined as &amp;#34;test&amp;#34; will be erased and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># re-generated from your development database when you run &amp;#34;rake&amp;#34;.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Do not set this db to the same as development or production.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> adapter: sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> database: db/test.sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool: 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timeout: 5000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">production:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> adapter: sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> database: db/production.sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool: 5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timeout: 5000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you are using Redis and PostgreSQL, it can be a little tricky to use two databases.  Here is the config for using Redis with &lt;a class="link" href="https://github.com/resque/resque" target="_blank" rel="noopener"
>Resque&lt;/a> (a task scheduler that is backed by Redis).  This file is specific to resque and its located at &lt;code>config/initializers/resque.yml&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">require&lt;/span> &lt;span class="s1">&amp;#39;resque/status_server&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">require&lt;/span> &lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rails_root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;RAILS_ROOT&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="ne">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">__FILE__&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/../..&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rails_env&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;RAILS_ENV&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s1">&amp;#39;development&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">resque_config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">YAML&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">load_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rails_root&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/config/resque.yml&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">rails_env&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="s2">&amp;#34;production&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Resque&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">redis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">resque_config&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">rails_env&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vcap_services&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">JSON&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ENV&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;VCAP_SERVICES&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">credentials&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vcap_services&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;rediscloud&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;credentials&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Resque&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">redis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;@&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;hostname&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;:&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">credentials&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;port&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="deploy-your-app">Deploy your app!
&lt;/h3>&lt;p>To deploy your app, you need to create some services in Bluemix for your app.  We will do this with the Cloud Foundry command line.&lt;/p>
&lt;p>&lt;em>PostgreSQL:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf create-service elephantsql turtle postgres-myapp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#postgres-myapp is the name of your service, you can name this whatever you want
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>Redis:&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf create-service rediscloud 25mb redis-myapp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#redis-myapp is the name of your service, you can name this whatever you want
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="prepare-your-app">Prepare your app
&lt;/h3>&lt;p>Cloud Foundry requires a file called &lt;code>manifest.yml&lt;/code> to help bind services to your app and defining memory limits, CPU limits, and the number of instances required.  Belows is an example file I used.  The name of the app is the unique identifier of your app that will be in your account.  Hostname is the hostname of the app, it will be &lt;em>yourhostname&lt;/em>.mybluemix.net or if you are running in London it will be &lt;em>yourhostname&lt;/em>.eu-gb.mybluemix.net.  The &lt;code>command&lt;/code> is pretty important, it says it will run the &lt;code>db:setup&lt;/code> everytime the app is deployed, this should probably be changed to &lt;code>db:migrate&lt;/code> instead though.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">---
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">applications:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#swap out myapp-jbs for your own app name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- name: myapp-jbs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memory: 1GB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> instances: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> path: .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> command: bundle exec rake db:setup &amp;amp;&amp;amp; bundle exec rails s -p $PORT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #swap out the below for your own
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #cf cs elephantsql turtle yourownname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #cf cs rediscloud 25mb yourownname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #redis cloud has different plans, check out cf marketplace for the plans
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - postgres-myapp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - redis-myapp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="push-your-app">Push your app
&lt;/h3>&lt;p>So we are on the final step, time to push our app!  If you are using Ruby 2.2.0, it’s not officially supported by Cloud Foundry, but there is a buildpack that is part of the Cloud Foundry community github that we can use.  It tracks pretty close to the latest Ruby and Rails.  For my app I used Ruby 2.2.0 and Rails 4.2.0:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push -b https://github.com/cloudfoundry/ruby-buildpack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="one-last-little-tip">One last little tip…
&lt;/h3>&lt;p>One last little tweak if you are familiar with Git it will make your life in Cloud Foundry land a little better.  There is a file called &lt;code>.cfignore&lt;/code> that goes in the root of your project, it basically acts like &lt;code>.gitgnore&lt;/code> and prevents files being updated to Cloud Foundry.  So for Ruby on Rails you probably would want your vendor folder here and etc.  I have put one below that I use.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.DS_STORE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Ignore bundler config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/.bundle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Ignore the default SQLite database.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/db/*.sqlite3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Ignore all logfiles and tempfiles.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/log/*.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/tmp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Ignore coverage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/coverage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Tag file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tags
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.idea/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.swo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.swp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.envrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cscope*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">doc/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.jira-url
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vendor/*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you have any issues please reach out to us on &lt;a class="link" href="http://stackoverflow.com/questions/tagged/bluemix" target="_blank" rel="noopener"
>StackOverflow&lt;/a>!  In the top righthand corner click “Ask Question”.&lt;/p></description></item><item><title>Control home devices with Bluemix Internet of Things (Part 2)</title><link>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/</link><pubDate>Tue, 17 Feb 2015 10:02:18 -0500</pubDate><guid>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/robots-blog-post-header1.jpg" alt="Featured image of post Control home devices with Bluemix Internet of Things (Part 2)" />&lt;h2 id="part-2-configuring-the-raspberry-pi">Part 2: Configuring the Raspberry Pi
&lt;/h2>&lt;p>This is a continuation of Part 1 of Controlling home devices with Bluemix Internet Of Things  If you haven’t read &lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/" >Part 1&lt;/a>, please do that first…&lt;/p>
&lt;p>In Part 1 we got the electrical work out of the way.  We wired up the relay’s and connected the circuit’s.  In this part of the 3 part series we will configure the Raspberry Pi to control the relay’s that we wired up in part 1.&lt;/p>
&lt;p>So without delay let’s jump into the next part.&lt;/p>
&lt;!-- more -->
&lt;h2 id="install-software-on-the-raspberry-pi">Install software on the Raspberry Pi
&lt;/h2>&lt;p>The first step of getting your Raspberry Pi setup is installing Raspbian.  If you have the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a> its pretty easy, just plug in the wifi dongle and insert the SD card and plug in power.  If you don’t have the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a> follow the instructions from &lt;a class="link" href="http://www.raspberrypi.org/help/noobs-setup" target="_blank" rel="noopener"
>here&lt;/a>.  Once you get Raspbian installed open up a terminal.&lt;/p>
&lt;p>Next, we will need to update Raspbian to the latest.  To do this run the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Next, we will need to download  &lt;a class="link" href="http://lightshowpi.org" target="_blank" rel="noopener"
>LightShowPi&lt;/a>.  &lt;a class="link" href="http://lightshowpi.org" target="_blank" rel="noopener"
>LightShowPi&lt;/a> is the foundation for syncing the lights to the music.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Install git (if you don&amp;#39;t already have it)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install git-core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Clone the repository to /home/pi/lightshowpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd ~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://togiles@bitbucket.org/togiles/lightshowpi.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Grab the stable branch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd lightshowpi git fetch &amp;amp;&amp;amp; git checkout stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Next, we need to install LightShowPi, run the following.  Please not the install step will take some time, be patient…&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd /home/pi/lightshowpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Once the install is complete we need to reboot the Raspberry Pi to pickup some new environment variables. To reboot run the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="wire-up-the-raspberry-pis-breadboard">Wire up the Raspberry Pi’s breadboard
&lt;/h2>&lt;p>Once we have rebooted we need to connect the bread board to the Raspberry Pi and connect the bread board to the relays.  This took some tinkering to figure out the GPIO ports but below I have posted a picture of mybread board on how it was constructed.   For me I set everything up with 8 channels first and using LED’s provided in the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a> to make sure everything was working then I moved over to the real relays.  So let’s do that.&lt;/p>
&lt;p>I would highly recommend following the steps in &lt;a class="link" href="https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI" target="_blank" rel="noopener"
>this page&lt;/a> on getting your bread board working.&lt;/p>
&lt;p>Below is a picture of my finished bread board with 16 channels.  I have included a wiring diagram as well.  Basically each GPIO port goes to the input side of the relay controller.  If you notice I have a couple left over LED’s on the bread board, this was done via the tutorial list above.&lt;/p>
&lt;p>&lt;a class="link" href="2015-02-16-11.31.19.jpg" >&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/2015-02-16-11.31.19.jpg"
width="768"
height="1024"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/2015-02-16-11.31.19_hu_8e3a3585f737ad83.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/2015-02-16-11.31.19_hu_83f5355663a712a4.jpg 1024w"
loading="lazy"
alt="2015 02 16 11.31.19 768x1024 Control home devices with Bluemix Internet of Things (Part 2)"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/a>&lt;/p>
&lt;p>What is going on above is each of the delays is plugged into a GPIO port and then plugged into the ground rail and connected by a resistor.  The particular resistor I am using is a 220 Ohm resistor.&lt;/p>
&lt;p>&lt;a class="link" href="raspberry-pi-lights-wiring-diagram.png" >&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/raspberry-pi-lights-wiring-diagram.png"
width="889"
height="642"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/raspberry-pi-lights-wiring-diagram_hu_577fe0bce0400bc4.png 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/raspberry-pi-lights-wiring-diagram_hu_ee9d4c62e896f7ce.png 1024w"
loading="lazy"
alt="raspberry pi lights wiring diagram Control home devices with Bluemix Internet of Things (Part 2)"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/a>&lt;/p>
&lt;p>So let’s test some things out.  Let’s play a pre-loaded song.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd ~/lightshowpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo python py/synchronized_lights.py --file=/home/pi/lightshowpi/music/sample/ovenrake_deck-the-halls.mp3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>All the relays should be flashing.  At this point you can plug the lights into the outlets as well.  If you notice the lights go on solid for 30 seconds before the songs play, we can override this.  Additionally this file has the GPIO pins mapping as well.  This mapping is for using the full 16 channels, if you are using less just remove some of the mappings from the end of the gpio_pins line.  To do this we need to place a config file in our home directory.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd ~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch .lights.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Choose your favorite text editor and put the following contents in the file.  We change the time it waits from 30 seconds to 1.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[hardware]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpio_pins = 0,1,2,3,4,5,6,7,21,22,23,24,25,26,28,29
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[lightshow]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">preshow_configuration =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;transitions&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;on&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;duration&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;channel_control&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;off&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;duration&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;channel_control&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That is it for this part.  In the next part of this series we will configure the Bluemix app to respond to text message votes and then the app to interface with the python code that controls the lights.&lt;/p>
&lt;h2 id="parts-in-the-series">Parts in the Series
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/" >Part 1&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Control home devices with Bluemix Internet of Things</title><link>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</link><pubDate>Fri, 06 Feb 2015 09:49:21 -0500</pubDate><guid>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1.jpg" alt="Featured image of post Control home devices with Bluemix Internet of Things" />&lt;p>The number of Internet connected devices is growing dramatically, it is expected to increase from 15 billon devices in 2015 to 40 billion devices in 2020.  These devices make up something called the Internet of Things.  These devices can be controlled remotely and interconnected.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/iotdevicesincrease.png"
width="700"
height="270"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/iotdevicesincrease_hu_6d11359f8f64425e.png 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/iotdevicesincrease_hu_28b1f8b3db160b62.png 1024w"
loading="lazy"
alt="iotdevicesincrease Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/p>
&lt;p>While a lot of these devices can be connected to the Internet, most of them are &amp;ldquo;dumb&amp;rdquo; devices right now.  To turn these &amp;ldquo;dumb&amp;rdquo; devices into smart devices you can use the &lt;a class="link" href="http://internetofthings.ibmcloud.com" target="_blank" rel="noopener"
>Internet of Things&lt;/a> to connect them to the cloud.  Simple things such as a washing machine or a coffee pot can be connected to the Internet.  More practical systems can be connected also, such as a home automation system or a thermostat.  Going even further a mine could connect safety sensors to the Internet of Things as well.&lt;/p>
&lt;!-- more -->
&lt;p>The Internet of Things allows for these devices to either be controlled or act as sensors and provides a means for them to communicate.  This is done over a protocol called MQTT. According to &lt;a class="link" href="http://mqtt.org/" target="_blank" rel="noopener"
>mqtt.org&lt;/a>, &amp;ldquo;MQTT is a machine-to-machine (M2M)/Internet of Things connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport.&amp;rdquo;  This works great for many devices as-is, doesn’t have many dependencies, it is very lightweight, and doesn’t require tremendous amounts of processing power.&lt;/p>
&lt;p>IBM Bluemix provides a platform for creating these apps that utilize all these sensors.  You can basically almost use any programming language you want, Bring Your Own Language (BYOL) and utilize services that do the heavy lifting for you.  This heavy lifting is the Internet of Things (IoT) service in Bluemix.  It implements that MQTT protocol and allows you to control and receive data from these devices.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1.jpg"
width="1024"
height="458"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1_hu_f8ea79abbff80153.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1_hu_319a811cc1084942.jpg 1024w"
loading="lazy"
alt="robots blog post header1 1024x665 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/p>
&lt;p>Do you have a bunch of left over Christmas lights sitting around that will be collecting dust till next year? Until now Christmas lights are a once a year thing, that isn’t true anymore.  Time to get the dust off of your lights and use them for something fun! Enter Christmas Lights controlled by a Raspberry Pi via IoT in Bluemix!&lt;/p>
&lt;p>You can control these Christmas Lights using the Internet of Things and IBM Bluemix. Who &lt;em>doesn’t&lt;/em> love large amounts of Christmas lights?  I sure love them.  Add on to that syncing lights to music and the ability to control lights from your phone and giving passersbys the ability to vote for songs they wanna see the lights synced to by texting.  How cool is that?&lt;/p>
&lt;h2 id="introduction">Introduction:
&lt;/h2>&lt;p>This is going to be a three part series: The first part (this post) will focus on the hardware setup, all the wiring and connecting things up to the Raspberry Pi.  The second part will focus on the software configuration of the Raspberry Pi, and the final part will focus on the Bluemix app that allows people to vote on songs to play and the integration to control the Raspberry Pi with the IoT service in Bluemix.&lt;/p>
&lt;p>So some of our goals that we are going to accomplish are the following.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Part 1&lt;/strong> – Setup and wire together relays, outlets, and the Raspberry Pi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/" >&lt;strong>Part 2&lt;/strong>&lt;/a> – Power on the Raspberry Pi, installed Raspbian (OS for the Pi), install and configure the lighting control software&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Part 3&lt;/strong> – Deploy a Bluemix app with the IoT, Twilio, and Cloudant services to interact with users and the Raspberry Pi (an example of the app is &lt;a class="link" href="http://lights.mybluemix.net/" target="_blank" rel="noopener"
>http://lights.mybluemix.net/&lt;/a>; please note this is not connected to my Raspberry Pi right now, so clicking the play button won’t do anything.)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Here is a little teaser of the expected outcome:&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_nWcIvOSNJE" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>Let’s jump into it…&lt;/p>
&lt;h2 id="part-1-setting-up-the-hardware">Part 1: Setting up the hardware
&lt;/h2>&lt;p>These instructions have been adapted from the following sites.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/" target="_blank" rel="noopener"
>https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI" target="_blank" rel="noopener"
>https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://lightshowpi.org/download-and-install" target="_blank" rel="noopener"
>http://lightshowpi.org/download-and-install&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://lightshowpi.org/configuring-and-testing-your-hardware" target="_blank" rel="noopener"
>http://lightshowpi.org/configuring-and-testing-your-hardware&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://lightshowpi.org/play-music" target="_blank" rel="noopener"
>http://lightshowpi.org/play-music&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The first step is getting a Raspberry Pi, I highly recommend getting the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>CanaKit on Amazon&lt;/a>.  It comes with most of everything you will need.  Depending on how fancy and clean you want your wiring to look you will need to take a trip to your local hardware/electrical store, more on that later.&lt;/p>
&lt;p>The first step is deciding how many individual light channels you want—you can do up to 48 actually, but for this post we will doing 16 channels.  What that means is 16 individual strands of lights that can be controlled.  So let’s make a shopping list.&lt;/p>
&lt;p>Shopping List:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>8 &lt;a class="link" href="http://amzn.to/2CamxBW" target="_blank" rel="noopener"
>two gang outlets&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2 &lt;a class="link" href="http://amzn.to/2DLctzJ" target="_blank" rel="noopener"
>4 gang blue plastic outlet boxes&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2zYuQyW" target="_blank" rel="noopener"
>50 feet of 12 gauge electrical wire&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CCI8UP" target="_blank" rel="noopener"
>2 bags of assorted wire nuts&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2 relays (1 relay per each 8 light channels, available &lt;a class="link" href="http://amzn.to/2C7lx1E" target="_blank" rel="noopener"
>on Amazon&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1 &lt;a class="link" href="http://amzn.to/2DLo6qF" target="_blank" rel="noopener"
>powerstrip&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2Cv8WsJ" target="_blank" rel="noopener"
>2 electrical extension cords&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CzX99O" target="_blank" rel="noopener"
>16 strands of Christmas lights&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Tools Required:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2EsJH8e" target="_blank" rel="noopener"
>Wire Stripper&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CBl8Wi" target="_blank" rel="noopener"
>Screw Drivers, phillips and flat&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CapKBL" target="_blank" rel="noopener"
>Multimeter -optional&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>My brother (&lt;a class="link" href="https://twitter.com/esloyer" target="_blank" rel="noopener"
>@esloyer&lt;/a>) helped me wire this whole thing up and came up with an adapted wiring schema based off the sites above, thanks bro!&lt;/p>
&lt;p>Once you get all the items on the shopping list we need to start taking apart the 50 feet of wire, there is 2 wires inside of the casing, a black and then a white one.  We need to get them out of the casing, take a pocket knife or utility knife and make a cut into the casing at one end, you can basically then peal back the casing on the whole 50 feet of wire then.&lt;/p>
&lt;p>Below is a wiring diagram that we need to complete.  You can do this multiple ways but below is a suggestion.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/Capture.png"
width="1024"
height="642"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/Capture_hu_8f326f9d29449440.png 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/Capture_hu_ad72e496ac82a628.png 1024w"
loading="lazy"
alt="Capture 1024x642 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>What we need to do is basically daisy chain all the &amp;ldquo;hot&amp;rdquo; wires together between each set of 4 gang double gang outlets.  We do this so we don’t overload a particular circuit.  So to do this we need to cut the end off of our cheap extension cord that has a plug on it, we need to then strip the wires, and then identity which wire is the hot/positive wire.  Below is a picture of a wire, the hot/positive wire will have dashes or stripes on it, the cold/neutral wire will NOT have any dashes or stripes:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-cord.jpg"
width="1024"
height="764"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-cord_hu_a3f7cc50205f5fa6.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-cord_hu_f8939067b1c62fc6.jpg 1024w"
loading="lazy"
alt="electrical cord 1024x764 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>We need to take the hot wire and put it into a wire nut.  We will then take some wire from our 50 feet, strip one of the ends and twist it into the wire nut.  This will get attached to positive input on the relay.  We need to repeat this for each channel.  In the picture below I have an additional wire going from the first wire nut to another wire nut because all the wires going to the relay wouldn’t fit into one wire nut.  We are just effectively connecting two wires together here.&lt;/p>
&lt;p>The next step is running a wire from each channel on the relay to electrical outlet.  This is the hot wire to each outlet but this wire is being controlled by the relay.  Think of the relay as a simple on/off switch that you would find at home to control a light.  On most double electrical outlets there is a tab on the side that comes enabled that makes most receptacles operate as one, this is desirable in a house so an electrician only has to run one wire to the outlet but in our case we want to take advantage of controlling both receptacles.  We need to break this tab on both sides of the outlet.  Take a pair of needle nodes pliers and bend the tab back and forth and eventually it will come off.  See the photos below.&lt;/p>
&lt;p>Before:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/FH13MAR_SWIOUT_14.jpg"
width="450"
height="355"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/FH13MAR_SWIOUT_14_hu_547eb42780bdc852.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/FH13MAR_SWIOUT_14_hu_105e14da772baaf9.jpg 1024w"
loading="lazy"
alt="FH13MAR SWIOUT 14 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-5.jpg"
width="249"
height="187"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-5_hu_9ce89f38c60a8b19.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-5_hu_8fe19ac7cb63afdb.jpg 1024w"
loading="lazy"
alt="electrical outlet garbage disposal 5 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>After:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-4.jpg"
width="249"
height="187"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-4_hu_4b377a2f222e5725.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-4_hu_3342bd0a5a01f063.jpg 1024w"
loading="lazy"
alt="electrical outlet garbage disposal 4 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>So next we need to connect our cold/negative wires to each of the outlets.  If you look at the wiring diagram (above) I have one cold/neutral wire going to the first outlet and each additional outlet is daisy chained to it.  This is just to complete the circuit.  Below is the finished product.  We basically have our outlets daisy chained together with our cold/neutral wires and then hold/positive wires have individual channels to the relay.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/2014-12-02-15.16.57.jpg"
width="3264"
height="2448"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/2014-12-02-15.16.57_hu_2aaeaa2e26da998a.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/2014-12-02-15.16.57_hu_be5268a26fba3efb.jpg 1024w"
loading="lazy"
alt="2014 12 02 15.16.57 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>Congratulations the hard part is over! Well, at least for me, since electrical stuff isn’t my forte.&lt;/p>
&lt;h2 id="parts-in-the-series">Parts in the Series
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/" >Part 2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>How Watson and Bluemix see the State of the Union</title><link>https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/</link><pubDate>Wed, 21 Jan 2015 09:45:24 -0500</pubDate><guid>https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw.jpeg" alt="Featured image of post How Watson and Bluemix see the State of the Union" />&lt;p>The State of the Union, a live broadcast that many Americans historically use as a tool to form opinions about the current political system, and gain insight from their Commander in Chief into the transparency of a system of checks and balances.  What is more interesting is the thoughts and underlying feelings between the State of the Union.  If we could figure out how the President is feeling or portraying himself, could we infer how the President will schedule and work with legislation and policy for the rest of the year?&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw.jpeg"
width="2000"
height="1333"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw_hu_613eb3438ffe4989.jpeg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw_hu_1cf390c5ee5727dd.jpeg 1024w"
loading="lazy"
alt=" How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>If we tried to do this today, could we go back and re-read all of the State of the Unions and apply custom algorithms to help determine the sentiment behind the speeches?  This is no longer a dream, but a reality.  We can use &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>IBM Bluemix&lt;/a> to create an app that will pull in the speeches and leverage the IBM Watson User Modeling Service to analyze the speeches.&lt;/p>
&lt;!-- more -->
&lt;p>Wouldn’t it be interesting if we could compare the speeches from previous State of the Union addresses and compare the underlying sentiment behind them?  Today we can, and it is pretty easy.  MSNBC published &lt;a class="link" href="http://www.msnbc.com/msnbc/how-supercomputer-sees-the-state-the-union" target="_blank" rel="noopener"
>How a supercomputer sees the State of the Union&lt;/a> explaining how they used IBM Watson to do this.  Let’s take it a step further, let’s build our app in about 5 minutes, and try it ourselves!&lt;/p>
&lt;blockquote>The biggest takeaway? This year’s State of the Union was surprisingly on-trend with the patterns established by previous speeches.Sam Petulla and Mina Liu – MSNBC&lt;/blockquote>
&lt;p>So let’s dig into how we could do this.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/BluemixSOTU3.gif"
width="300"
height="249"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/BluemixSOTU3_hu_270f87ff73782c0.gif 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/BluemixSOTU3_hu_7fb23850b704057c.gif 1024w"
loading="lazy"
alt="BluemixSOTU3 How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="289px"
>&lt;/p>
&lt;h3 id="lets-build-it">Let’s Build it!
&lt;/h3>&lt;p>The goal at the end of these couple steps is to have our own Node.js app that uses the User Modeling Service to analyze the 2015 State of the Union.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>So first we need to sign up for &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>Bluemix&lt;/a> if you don’t have an account.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once we have logged in visit the Catalog and at the top under Boilerplates let’s click on UserModeling Node.js, or go &lt;a class="link" href="https://console.ng.bluemix.net/catalog/personality-insights-nodejs-web-starter/" target="_blank" rel="noopener"
>directly here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the right hand side we just need to give our app a name.  This will be the URL we will access our app at.  Note, it needs to be unique, for my app I chose sotu-jbs, you can choose anything you want.&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonappcreate.jpg"
width="351"
height="557"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonappcreate_hu_37e9835f69873557.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonappcreate_hu_3188e1b0ddee5123.jpg 1024w"
loading="lazy"
alt="watsonappcreate How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click Create.  What is happening behind the scenes is Bluemix is spinning up a Node.js starter app that will allow you to analyze the state of the union address with Watson.  Pretty cool huh?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bluemix will take you to a dashboard and after a little bit it will show you that your app is up and running.  To access our app, click the URL near the top of the dashboard under the name of our app.&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/apprunning1.jpg"
width="1099"
height="311"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/apprunning1_hu_b144f8bd95f5139b.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/apprunning1_hu_3a6306501bcb1224.jpg 1024w"
loading="lazy"
alt="apprunning1 How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="353"
data-flex-basis="848px"
>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/urlforapp.jpg"
width="1099"
height="311"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/urlforapp_hu_efcdce03641d1acd.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/urlforapp_hu_c60bf6b03c1ce098.jpg 1024w"
loading="lazy"
alt="urlforapp How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="353"
data-flex-basis="848px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now the hard bit, we need to grab the full text of the speech.  This year was the first time the White House put out the full text of the speech, it is available on &lt;a class="link" href="http://edition.cnn.com/2015/01/20/politics/state-of-the-union-2015-transcript-full-text/index.html" target="_blank" rel="noopener"
>CNN&lt;/a>.  I have also made the full text available &lt;a class="link" href="https://dl.dropboxusercontent.com/u/66686/2015sotu.txt" target="_blank" rel="noopener"
>here&lt;/a>.  Copy this text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go back to your app you created that just opened up.  It should show something like the following.  We want to clear the text and paste the full contents of the State of the Union.&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/usermodelingapp.jpg"
width="992"
height="699"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/usermodelingapp_hu_98678a22b520510a.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/usermodelingapp_hu_b6914d95dc82b483.jpg 1024w"
loading="lazy"
alt="usermodelingapp How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &amp;ldquo;Analyze&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>That’s it.   You should have some output like the following. With Bluemix and Watson we were just able to analyze the sentiment/personality of the President in the 2015 State of the Union.&lt;/p>
&lt;p>Personality with percentages:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/personalitysotu.jpg"
width="461"
height="1024"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/personalitysotu_hu_ab30f6605985a6bd.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/personalitysotu_hu_6d3d06743c186e2e.jpg 1024w"
loading="lazy"
alt="personalitysotu 461x1024 How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="108px"
>&lt;/p>
&lt;p>Personality Visualization:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/visualizationsotu.jpg"
width="906"
height="854"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/visualizationsotu_hu_a20a99385714140f.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/visualizationsotu_hu_819a76642775c4d.jpg 1024w"
loading="lazy"
alt="visualizationsotu How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="254px"
>&lt;/p>
&lt;h3 id="wrap-up">Wrap up
&lt;/h3>&lt;p>So let’s go over what we did, in a matter of less than 5 minutes we spun up a Node.js app, connected it to Watson and analyzed the State of the Union.  What Bluemix does for us is gives us a platform to run our apps and connects super cool and powerful services such as Watson to our apps in a matter of seconds.  In the image below, we can see our app running and that is connected to Watson.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonconnected.jpg"
width="1107"
height="623"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonconnected_hu_76211002f06dd28.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonconnected_hu_27ec4f4040d38931.jpg 1024w"
loading="lazy"
alt="watsonconnected How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>If you want to give this a try without deploying an app head over to the &lt;a class="link" href="http://watson-um-demo.mybluemix.net/" target="_blank" rel="noopener"
>User Modeling Demo in Bluemix&lt;/a> and paste in your text.&lt;/p>
&lt;h3 id="learn-more">Learn More
&lt;/h3>&lt;p>If you want to learn more about other Bluemix services and Watson services go to the following links.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp#/solutions" target="_blank" rel="noopener"
>Bluemix Solutions&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp#/store/cloudOEPaneId=store" target="_blank" rel="noopener"
>Bluemix Services&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp#/solutions/solution=watson" target="_blank" rel="noopener"
>Watson Services in Bluemix&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/user-modeling.html" target="_blank" rel="noopener"
>Watson Developer Cloud – User Modeling&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Microservices in Bluemix</title><link>https://www.jeffsloyer.io/post/microservices-in-bluemix/</link><pubDate>Mon, 19 Jan 2015 09:34:18 -0500</pubDate><guid>https://www.jeffsloyer.io/post/microservices-in-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza.jpg" alt="Featured image of post Microservices in Bluemix" />&lt;p>Monolith apps are no more.  The age of the monolith is over.  It wasn’t that long ago that companies and developers (myself included) were deploying one giant app that did everything.  The app would serve all your static files, front-end HTML and CSS and Javascript, act as your REST API, serve as your data persistance tier, handles sessions, handle logins, and do security for your app.  The list could keep going on and on.  As the age of the code base progresses it gets more and more complicated and tangled and if a new feature needs to be developed or an old piece of code needs to be modified it takes a cross functional team of many different people to make it happen.&lt;/p>
&lt;p>First we are going to talk about how a monolith app works, some of the positives and negatives and then we will talk about how things work in an app utilizing microserivces and the positivities and negatives associated with it.&lt;/p>
&lt;!-- more -->
&lt;h2 id="what-is-a-monolith">What is a Monolith?
&lt;/h2>&lt;p>In a traditional monolith app you would have your basic three tier app consisting of a persistence layer, middleware tier/business logic, and front end code.  The advantage of this is there is just one application to manage and scale.  However the downside is that any change to any of the three tiers it requires cranking up the giant distributed team and pushing a new release.  For example, if Dave a front-end dev wanted and he wanted to change the color of a button, it would require the whole app to built, tested, and re-deployed for a tiny change.&lt;/p>
&lt;p>This is quite wasteful over everyone’s time, dev’s from the persistence layer, business logic team, and front end team need to be involved.  This involves cutting a new release, running it through whatever QA/test phases there is and pushing it to production and hoping that nothing else got introduced or anyone else regressed some features.&lt;/p>
&lt;p>Additionally, by having a monolith app the code base can become quite large and incredibly complex to maintain.  This is compounded exponentially as the age of an app grows.  Eventually, there is so much tangled and twisted code its hard to understand how things link together and work.  This is one of the hidden costs of a monolith app.&lt;/p>
&lt;h2 id="microserviceadvantages">Microservice Advantages
&lt;/h2>&lt;p>A microservice can be defined simply as &amp;ldquo;fine grained SOA&amp;rdquo; – Adrian Cockcroft, Netflix.  In a longer description it can be thought of a set of small services with known functionality communicating over a common lightweight API, either HTTP REST API’s or more recently a lightweight messaging protocol (more on this later).&lt;/p>
&lt;blockquote>"Fine grained SOA" Adrian Cockcroft, Netflix&lt;/blockquote>
&lt;p>Microservices provide a huge advantage for the case we talked about earlier where Dave our front-end dev wants to change the color of a button, no longer does the giant dev machine need to be involved.  Instead the UI layer is a separate service and changes can be made independent from other parts of the application.  The UI team can crank out as many releases as their heart desires.&lt;/p>
&lt;h2 id="2-pizza-teams">2 Pizza Teams
&lt;/h2>&lt;p>We aren’t talking about skimping on our employees and not feeding them enough at work, but we are instead talking about the size of the team.  Amazon first coined this term back in 2011.  It has been written about extensively and in such publications as the &lt;a class="link" href="http://www.wsj.com/articles/SB10001424052970203914304576627102996831200" target="_blank" rel="noopener"
>Wall Street Journal&lt;/a>.  Basically what it boils down to is having each team small enough that you can feed them with 2 pizza’s.  So you might be asking what the importance of this is, let’s use our example of our front-end dev Dave again.  By Dave having a small team they can organize themselves efficiently and deliver functionality on their own instead of being tied to a giant release of the application.  A team doesn’t have to multiple people, it can actually be a team of just 1 but be sure to never violate the 2 pizza team rule though.&lt;/p>
&lt;p>&lt;a class="link" href="two-pizza.jpg" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza.jpg"
width="1000"
height="667"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza_hu_7067633b1c28bdb6.jpg 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza_hu_9e0e32752c41a8cc.jpg 1024w"
loading="lazy"
alt="two pizza 300x200 Microservices in Bluemix"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/a>&lt;/p>
&lt;h2 id="i-wanna-go-fast-its-all-about-speed">I Wanna Go Fast (It’s All About Speed)
&lt;/h2>&lt;p>As popularized by Talladega Nights, speed is king.  Who doesn’t want to go fast?  If you answered no to that you are probably going to get beaten by your competition and be left in the dust.  As the &lt;a class="link" href="http://www.thomaslfriedman.com/bookshelf/the-world-is-flat" target="_blank" rel="noopener"
>world is being flattened&lt;/a> there is constantly new competition every day and dev team’s have to constantly be delivering to keep their product and company relevant.&lt;/p>
&lt;p>So back to our example of  Dave our front-end dev again. Since Dave’s team has their own UI service they can constantly deliver changes and new features without having to wait for other team’s to deliver functionality.  Dave’s team can even deliver new UI code that is gated on some business logic code by using &lt;a class="link" href="https://codeascraft.com/2011/02/04/how-does-etsy-manage-development-and-operations/" target="_blank" rel="noopener"
>feature flags&lt;/a> and &lt;a class="link" href="http://apptimize.com/blog/2014/01/etsy-continuous-innovation-ab-testing/" target="_blank" rel="noopener"
>A/B testing&lt;/a> to selectively enable code and test new code out.  This allows Dave’s team to try out new ideas and if they don’t work they fail fast and pivot and change course.  By doing this Dave’s product and company stay relevant.&lt;/p>
&lt;p>Again as Ricky Bobby from Talladega Nights would say, &amp;ldquo;if you aint first you’re last.&amp;rdquo;  When I saw the movie my mind obviously just went to car racing and sports but it can be extended to the IT industry as well.  If you aren’t first you probably aren’t relevant and someone else is beating you to market.  Eventually you could go out of business.&lt;/p>
&lt;h2 id="devops-devops-devops">DevOps DevOps DevOps
&lt;/h2>&lt;p>&lt;a class="link" href="devops-borat.jpg" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/devops-borat.jpg"
width="347"
height="335"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/devops-borat_hu_1346fd97b2ab58b7.jpg 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/devops-borat_hu_5f4210682ac1cea7.jpg 1024w"
loading="lazy"
alt="devops borat Microservices in Bluemix"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>&lt;/a>&amp;ldquo;To make error is human. To propagate error to all server in automatic way is &lt;a class="link" href="https://twitter.com/hashtag/devops?src=hash" target="_blank" rel="noopener"
>#&lt;strong>devops&lt;/strong>&lt;/a>.&amp;rdquo; – &lt;a class="link" href="https://twitter.com/devops_borat" target="_blank" rel="noopener"
>DevOps Borat&lt;/a>.  This &lt;a class="link" href="https://twitter.com/devops_borat/status/41587168870797312" target="_blank" rel="noopener"
>quote&lt;/a> sums up why DevOps is important.  With each service being completely different architecture wise and language it is in it would be near impossible for a central &amp;ldquo;ops&amp;rdquo; team to manage all the apps.  Instead in microservices world each team is responsible for their own app.  You might be thinking that having dev’s manage a production service is bad and they won’t be responsive.  You are wrong, multiple companies have been doing this for years and it actually creates a sense of empowerment in the dev team.  Dev’s don’t want a call at 3am in the morning notifying them that their service is down.  In turn dev’s start taking more pride in their work and start thinking about decisions they make that will affect the availability of their service.  It creates a new mindset for people.&lt;/p>
&lt;h2 id="let-the-devs-rule">Let the Dev’s rule
&lt;/h2>&lt;p>Continuing on from above empowering dev’s is super important.  As a developer feels empowered they will make better decisions for their service they work on and thus end up making better decisions for the company.  When someone feels empowered they are putting their stamp of approval behind a product or feature and basically signing it with their name, code to them is a craft.&lt;/p>
&lt;p>By embracing microservices and the de-centralized architecture it allows dev’s to innovate and come up with cool ideas and test them out.  If they don’t work that is ok, keep innovating and moving forward.  I am a photographer and in college someone once told me for every 10 pictures you take you will only get one good one.  The same can be said here as well, try, test, measure  (repeat). Obviously there is some science and planning put into this but the point is creating an environment to foster innovation.&lt;/p>
&lt;h2 id="design-for-failure">Design for Failure
&lt;/h2>&lt;p>When using microservices each service should be able to stand on its own and run by itself.  If it has outside dependencies it isn’t really a microservice.  Netflix is a prime example of this.  For example, if a service goes down that generates recommendations the whole site doesn’t break.  Other services keep functioning without the broken service.  In some cases, other services will know how to operate without the broken service.  Feature degradation or local caching can be used to prevent a break in the user experience.&lt;/p>
&lt;p>This is designing for failure.  In the monolith world (which remember no longer exists) we would design and develop for the happy path and really never for the sad path.  By having a service based architecture we need to design and develop for the failure cases.  Some guy digging in his front yard could cut a piece of fiber and bring our monolith app to the ground.  By designing for a service not being there and allowing the product to continue to function is at utmost important.  In the monolith app dev’s sometimes would not think this way because everything is self contained by in a decentralized architecture you are forced to think about the failure case and how to handle it in a graceful way that doesn’t affect the user’s experience too much.&lt;/p>
&lt;h2 id="immutable-code">Immutable Code
&lt;/h2>&lt;p>Part of this thought of designing for failure is having immutable code.  When introducing new code you MUST not affect the functionality of previous code.  In a product that has a UI this is a little harder to do but can be done with feature flags and A/B testing but with an API based service changing the inputs and outputs of a service is a big no-no.  If you absolutely must do this at least have a deprecation period of N+2 or 3 to give customers and consumers of your service some advanced warning that changes are coming.  Ideally you wouldn’t deprecate an API, just revision your API, for example if you are using HTTP REST API’s just use &lt;code>/api/v1.0/&lt;/code> and for your next version &lt;code>/api/v1.1/&lt;/code> as a prefix.&lt;/p>
&lt;h2 id="real-world-microservices-architecture">Real world Microservices architecture
&lt;/h2>&lt;p>In the real world we would probably have a database, some business logic service (probably multiple of these), a UI service, our basic three tier app but this time disjoint from each other.  See below.
The &amp;ldquo;glue&amp;rdquo; between the services is supposed to be something light-weight, you can use HTTP REST API’s but more recently there has been a move to a messaging based &amp;ldquo;glue&amp;rdquo;.  In particular like MQTT or AMQP.  This is great as it allows a service to be a &amp;ldquo;worker&amp;rdquo; or a client of another service, or in queuing terms, producers and consumers.&lt;/p>
&lt;h2 id="how-to-use-bluemix-to-create-microservices">How to use Bluemix to create Microservices
&lt;/h2>&lt;p>To demonstrate this real world example let’s talk about how this would work in Bluemix.  In Bluemix we can create a bunch of services, in case they will be in Node.js and the &amp;ldquo;glue&amp;rdquo; between our services will be MQLight.  An important point we should talk about here is the notion of producer/consumer (pub/sub) vs round-robin queuing.&lt;/p>
&lt;p>For our example let’s say we have a service that is scaled out to 5 nodes (we must be really popular).  Each of these nodes is a worker for some business process, in this case let’s say sending a registration email.  When someone sign’s up for our site we want to send them a registration email, we don’t want each of the 5 nodes of our service emailing the person.  I would probably walk away from something if I got 5 duplicate registration emails.  In this case we want round-robin queuing.&lt;/p>
&lt;p>However on the converse side there is cases where we want producer/consumer (pub/sub queuing).  This effectively means all 5 nodes of a service will receive the same message and respond.  Let’s say we have a UI service that is the front-end for a real time chat service.  If our application is scaled out to 5 nodes how can we properly propagate chat messages to all the connected clients.  The answer is allowing each front-end service to receive the same message to relay to all the clients.&lt;/p>
&lt;p>&lt;a class="link" href="mqlight.jpg" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/mqlight.jpg"
width="152"
height="172"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/mqlight_hu_50572d322f66d781.jpg 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/mqlight_hu_f9b2d8ee244c2042.jpg 1024w"
loading="lazy"
alt="mqlight Microservices in Bluemix"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/a>When architecting your microservices you need to keep queuing in mind and how clients and services communicate with each other.  Make sure you choose a queuing technology that supports your desired behavior of pub/sub or round-robin.&lt;/p>
&lt;p>So where does this leave us in Bluemix?  MQLight, with MQLight you can easily do pub/sub and round-robin with the same service provider.  This is great because as the developer I don’t have to use two different messaging providers.&lt;/p>
&lt;h2 id="example-app-in-bluemix">Example App in Bluemix
&lt;/h2>&lt;p>So let’s build something to demonstrate all of this.  The example app we will be building contains a front-end service that allows users to enter text and another service that will convert it to upper case.  While this is not a real world example it demonstrates microservices using backend workers.&lt;/p>
&lt;p>A real world example might be  an image processing app that applies a sexy filter to an image it and then uploads it to Instagram.  If we did this we could break this up into three services.  A web service that accepts an image over http(s), our sexy filter engine (maybe imagemagick), then a service that uploads the image to our social media network of choice.&lt;/p>
&lt;p>So back to our example app of converting text to uppercase.  The UI is below, our UI doesn’t lock when we submit data and we can keep using it.  As results are finished processing in our &amp;ldquo;text uppercase&amp;rdquo; service, results are delivered real time to our front-end service.&lt;/p>
&lt;p>&lt;a class="link" href="sample_screenshot.png" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/sample_screenshot.png"
width="850"
height="665"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/sample_screenshot_hu_1a4a74cf507bffba.png 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/sample_screenshot_hu_9199b12fd7aeb75d.png 1024w"
loading="lazy"
alt="sample screenshot Microservices in Bluemix"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/a>&lt;/p>
&lt;p>To make this seem more world the example code introduces some timeouts/waits to make it seem like some backend processing is going on in a microservice.  To get this running follow the following steps.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">hub&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">net&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">git&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ibmmq&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mqlight&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">offload&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cf&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">service&lt;/span> &lt;span class="n">MQLight&lt;/span> &lt;span class="n">standard&lt;/span> &lt;span class="n">MQLight&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sampleservice&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cf&lt;/span> &lt;span class="n">push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>What the above does is checkout some example code that contains a front-end service and a back-end service that does our &amp;ldquo;text uppercasing&amp;rdquo; and creates a QLight to provide the messaging between our two services.&lt;/p>
&lt;p>Once the cf push command is done running (it might take a bit) we should see something like the following saying our apps are up.&lt;/p>
&lt;p>Text processing service:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Showing&lt;/span> &lt;span class="n">health&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">app&lt;/span> &lt;span class="n">MQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">backend&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">org&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">space&lt;/span> &lt;span class="n">demos&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">OK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">requested&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">started&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">instances&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">usage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">256&lt;/span>&lt;span class="n">M&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">instances&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">urls&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">last&lt;/span> &lt;span class="n">uploaded&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Mon&lt;/span> &lt;span class="n">Jan&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">52&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">05&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="mi">0000&lt;/span> &lt;span class="mi">2015&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="n">since&lt;/span> &lt;span class="n">cpu&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">disk&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0 running 2015-01-19 01:53:08 PM 0.0% 11.8M of 256M 75.8M of 1G&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1 running 2015-01-19 01:53:05 PM 0.0% 11.5M of 256M 75.8M of 1G&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Front&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Showing&lt;/span> &lt;span class="n">health&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">app&lt;/span> &lt;span class="n">MQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">frontend&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">org&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">space&lt;/span> &lt;span class="n">demos&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">OK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">requested&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">started&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">instances&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">usage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="n">M&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">instances&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">urls&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mqlightsample&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">undeputed&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">trierarch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mybluemix&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">net&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">last&lt;/span> &lt;span class="n">uploaded&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Mon&lt;/span> &lt;span class="n">Jan&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">53&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="mi">0000&lt;/span> &lt;span class="mi">2015&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="n">since&lt;/span> &lt;span class="n">cpu&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">disk&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0 running 2015-01-19 01:54:20 PM 0.0% 24.3M of 512M 78.7M of 1G&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So let’s checkout the app, I have recorded a short video of it working.  If you notice the text service is simulating things like a real world service might respond with results coming back as they finish being processed.&lt;/p>
&lt;h2 id="stay-tuned">Stay Tuned!!!
&lt;/h2>&lt;p>There will be some real world examples coming on how to use microservices in Bluemix since now we have a foundation on what microserivces are.  Please stay tuned and follow me on Twitter at &lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a> for some real world apps!&lt;/p>
&lt;h2 id="webcastplayback">Webcast playback
&lt;/h2>&lt;p>The replay of the webcast is available at &lt;a class="link" href="http://ibm.biz/BlmxMicroservices-Blog" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p></description></item><item><title>Etherpad in Cloud Foundry – Quick Start Guide</title><link>https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/</link><pubDate>Sat, 03 Jan 2015 22:19:30 -0500</pubDate><guid>https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/</guid><description>&lt;p>Etherpad Lite is an awesome online collaboration platform.  Multiple open source projects use it for collaboration.  One of the most notable ones is the Openstack Project &lt;a class="link" href="https://etherpad.openstack.org/" target="_blank" rel="noopener"
>Openstack Etherpad&lt;/a>. To help you navigate the setup, this post provides step-by-step instructions to get things running. You may have read that Etherpad is complicated to install in a PaaS and there really isn’t a comprehensive quick start guide for running Etherpad-lite in Cloud Foundry. No worries, here is one!&lt;/p>
&lt;h3 id="loginregister-for-bluemix">Login/Register for Bluemix
&lt;/h3>&lt;p>The first step is creating a Node.js app in Bluemix.  Let’s login to Bluemix, open a web browser and visit &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>Bluemix&lt;/a> and click LOG IN.  If you don’t have an account click, SIGN UP.  Since Etherpad-Lite is built using Node.js, we want to start with an empty Node.js app in Bluemix.  We will do this from the command line.&lt;/p>
&lt;p>If you already have the CLI command line executable, you can skip this step.  If you don’t have it, follow the steps from the &lt;a class="link" href="https://www.ng.bluemix.net/docs/#cli/index.html#cli" target="_blank" rel="noopener"
>Bluemix docs&lt;/a> on how to install the command line for your platform and how to set it up.  Once you get things setup you should be able to run &lt;code>cf s&lt;/code> and get the following output:&lt;/p>
&lt;pre>&lt;code>[01:30 PM] jsloyer@jeffs-mbp [blah]&amp;gt;cf s
cf domains Getting domains in org jbsloyer@us.ibm.com as ...
name status
mybluemix.net shared
&lt;/code>&lt;/pre>
&lt;p>Your output will be slightly different (this is ok).  This was just a check to make sure things are setup correctly.  If you are getting an auth error or error that you aren’t pointing to Cloud Foundry, refer back to the docs, reply to this post, or post a question to &lt;a class="link" href="http://stackoverflow.com/questions/tagged/bluemix" target="_blank" rel="noopener"
>Stackoverflow&lt;/a> for help.&lt;/p>
&lt;h3 id="upload-etherpad-lite-code-to-bluemix">Upload Etherpad-Lite Code to Bluemix
&lt;/h3>&lt;p>OK, next we need to upload the Etherpad-Lite code to Bluemix. The version of Etherpad-Lite is a forked version of the Etherpad code that has made things easy for us with Cloud Foundry. So head on over to the &lt;a class="link" href="https://github.com/cloudfoundry-community/etherpad-lite-cf/releases" target="_blank" rel="noopener"
>releases page&lt;/a> for &lt;code>etherpad-lite-cf&lt;/code>.  Choose the latest, as of this writing it was version 1.4.1.  Download the etherpad-lite-cf.zip file.  We need to extract this file to a new folder—do not extract it in the folder it is sitting in.  For example, I extracted it into an empty folder called blah.  Make sure you do not have the zip file you downloaded in the newly created folder, it should just contain the extracted files:&lt;/p>
&lt;pre>&lt;code>[10:50 AM] jsloyer@jeffs-mbp [blah]&amp;gt;pwd
/Users/jsloyer/Downloads/blah
[10:50 AM] jsloyer@jeffs-mbp [blah]&amp;gt;ls
CHANGELOG.md Procfile node_modules src var
CONTRIBUTING.md README.md package.json start.bat
LICENSE bin settings.json tests
Makefile doc settings.json.template tools
&lt;/code>&lt;/pre>
&lt;p>The next step is pushing the app to Bluemix.  Run the following command, replacing yourappname with a unique name for your app.  This name will also be the url to your app as well.  If you get an error mentioning the host is taken, just choose a different name.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push yourappname -m 512M -b https://github.com/cloudfoundry/nodejs-buildpack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above is saying we are giving our app 512MB of memory and calling out a specific buildpack to use (in this case Node.js). This step will take awhile but eventually you should get the following output.&lt;/p>
&lt;pre>&lt;code>0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running
App started Showing health and status for app jbs-etherpad3 in org jbsloyer@us.ibm.com / space demos as ...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: jbs-etherpad3.mybluemix.net
state since cpu memory disk
#0 running 2015-01-13 10:36:32 AM 0.0% 87.2M of 512M 242.1M of 1G
&lt;/code>&lt;/pre>
&lt;p>If you visit the url from above, Etherpad will be functional, however it is using a built-in database and this isn’t what we want.  We want to back in with MySQL.&lt;/p>
&lt;h3 id="create-and-bind-a-database-to-our-app">Create and bind a database to our app
&lt;/h3>&lt;p>Next, we need to create a service to allow Etherpad to connect to our database.  To do that, let’s go back to the Bluemix UI.  In the top click on Dashboard, you should see the app you created.  Let’s go ahead and click on it.&lt;/p>
&lt;p>To add the service Bluemix will provision and bind a service to our app for us.  Click &amp;ldquo;Add A Service&amp;rdquo; and scroll down to data management.  We want ClearDB for this app.  Click on ClearDB.  ClearDB is a hosted version of MySQL.  Everything on the right should be pre-populated so let’s just click &amp;ldquo;Create&amp;rdquo;.  If things are not pre-populated, choose the appropriate app, the one we just created.&lt;/p>
&lt;p>It will ask if you want to restage the app, that is fine, so click RESTAGE.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/restage.jpg"
width="1104"
height="524"
srcset="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/restage_hu_ca631c0bc1af6ab7.jpg 480w, https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/restage_hu_692235e83d637c34.jpg 1024w"
loading="lazy"
alt="restage Etherpad in Cloud Foundry – Quick Start Guide"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;h3 id="configure-the-app-with-cleardb-mysql">Configure the app with ClearDB (MySQL)
&lt;/h3>&lt;p>To switch the app over to MySQL, we need to edit the &lt;code>settings.json&lt;/code> for the app and then re-upload the app to Bluemix. You will need to replace the value DATABASE on line 9 with the name of your ClearDB service.  To get this info, let’s go back to the Bluemix UI and our app.  If you click on &amp;ldquo;Show Credentials&amp;rdquo;, it will give you the name of your ClearDB service, copy this.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/showcreds.jpg"
width="1578"
height="1366"
srcset="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/showcreds_hu_10f0797eafc6c3b0.jpg 480w, https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/showcreds_hu_5cf7d412493f8cf4.jpg 1024w"
loading="lazy"
alt="showcreds Etherpad in Cloud Foundry – Quick Start Guide"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;p>Copy the name, in this example it is &amp;ldquo;ClearDB MySQL Database-hu&amp;rdquo;, without quotes.  I have highlighted below what you need to copy, don’t copy the quotes.  I have hidden my connection info to my database so my database can’t be hacked.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/dbname.jpg"
width="455"
height="559"
srcset="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/dbname_hu_7a67a0ef1049138a.jpg 480w, https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/dbname_hu_149ae3ed997d67d.jpg 1024w"
loading="lazy"
alt="dbname Etherpad in Cloud Foundry – Quick Start Guide"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p>
&lt;p>Open up settings.json with your favorite text editor and on line 9 replace DATABASE with the name of your ClearDB service that we copied from above.  Save the file. Here is my line 9:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;dbService&amp;#34;: &amp;#34;ClearDB MySQL Database-hu&amp;#34;,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The last step is re-pushing our app to Bluemix since we made a change to it.  To do this we need to use the push command we used above:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push yourappname -m 512M -b https://github.com/cloudfoundry/nodejs-buildpack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eventually it should show us that our app is running, my output is below:&lt;/p>
&lt;pre>&lt;code>0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running
App started Showing health and status for app jbs-etherpad3 in org jbsloyer@us.ibm.com / space demos as ...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: jbs-etherpad3.mybluemix.net
state since cpu memory disk
#0 running 2015-01-13 10:36:32 AM 0.0% 87.2M of 512M 242.1M of 1G
&lt;/code>&lt;/pre>
&lt;p>So if we visit the url it gave us, Etherpad should be up and running.  If you run into issues please post a comment here or post to &lt;a class="link" href="http://stackoverflow.com/questions/tagged/bluemix" target="_blank" rel="noopener"
>Stackoverflow&lt;/a>.&lt;/p>
&lt;h3 id="ssl">SSL
&lt;/h3>&lt;p>Bluemix provides SSL out of the box for your app.  If your app is running at &lt;strong>http&lt;/strong>://jbs-etherpad3.mybluemix.net you are given SSL for free.  To use SSL, just access your app over https, for my example it would be &lt;strong>https&lt;/strong>://jbs-etherpad3.mybluemix.net.  If you want to use SSL with your own domain name and certificate, you can do this also!  See &lt;a class="link" href="https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/" >SSL Certificates and Bluemix Custom Domains&lt;/a> on how to do it.&lt;/p>
&lt;p>For more info about SSL in for free in Bluemix check out the following video.&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/3Y0wLQcXbQ0" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;h3 id="caveats">Caveats
&lt;/h3>&lt;ul>
&lt;li>The biggest issue to me is that this deployment of Etherpad only allows 1 instance. While this works for development and testing, it is not suitable for production.  This is a limitation right now of Etherpad in the way it uses socket.io and sessions. If you need more capacity, just bump up your RAM for your app.&lt;/li>
&lt;/ul>
&lt;h3 id="instructions-adapted-from-these-references">Instructions adapted from these references
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/cloudfoundry-community/etherpad-lite-cf#using-database-from-user-provided-service" target="_blank" rel="noopener"
>https://github.com/cloudfoundry-community/etherpad-lite-cf#using-database-from-user-provided-service&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://arthurh.fr/blog-Install-etherpad-lite-with-cloudfoundry" target="_blank" rel="noopener"
>http://arthurh.fr/blog-Install-etherpad-lite-with-cloudfoundry&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Twitter Personality Comparisons Using Watson</title><link>https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/</link><pubDate>Mon, 24 Nov 2014 22:06:16 -0500</pubDate><guid>https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/personality.jpg" alt="Featured image of post Twitter Personality Comparisons Using Watson" />&lt;p>Hey Yall!&lt;/p>
&lt;p>We are back at it again with some demos!!!&lt;/p>
&lt;p>Did you ever wonder if you and your favorite celebrity would be compatible if you met?? I sure do! Or did you ever wonder how you could become a better leader, I sure do. Today you would have to go Google the person and analyze posts and articles about them and be a personality expert to see if you have personality traits in common.&lt;/p>
&lt;p>Gone are those days now!&lt;/p>
&lt;p>Enter &lt;a class="link" href="http://friendme.mybluemix.net/" target="_blank" rel="noopener"
>FriendMe&lt;/a>!  Your trusted personality comparison using IBM Watson. The answer to the above questions are easy now.  For example,  if I compared myself to the IBM Design Twitter account, I can see my personality is very much alike with the IBM Design team.  Thats good news for me because I never considered myself a designer…
&lt;a class="link" href="jeff-and-ibm-design.jpg" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-ibm-design.jpg"
width="735"
height="176"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-ibm-design_hu_28f61e73a8f04dee.jpg 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-ibm-design_hu_c826fa204f45822b.jpg 1024w"
loading="lazy"
alt="jeff and ibm design Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="417"
data-flex-basis="1002px"
>&lt;/a>&lt;/p>
&lt;!-- more -->
&lt;p>For the leadership, personal, and professional case, Jerry Cuomo is a very successful leader at IBM. I can see that myself and Jerry share 5 out of the top 5 personality traits in common.  In my career development I can see I need to develop myself more as a transformational leader.&lt;/p>
&lt;p>&lt;a class="link" href="jeff-and-jerry.jpg" >&lt;img src="https://www.jeffsloyer.io/jeff-and-jerry.jpg"
loading="lazy"
alt="jeff and jerry Twitter Personality Comparisons Using Watson"
>&lt;/a>&lt;/p>
&lt;p>Lastly, I am going to do one more comparison, between myself and Blake McGregor (a product manager for Bluemix).&lt;/p>
&lt;p>&lt;a class="link" href="jeff-and-blake.jpg" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-blake.jpg"
width="696"
height="169"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-blake_hu_fc4bfa4c430e1762.jpg 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-blake_hu_61c2772ae7c64668.jpg 1024w"
loading="lazy"
alt="jeff and blake Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="411"
data-flex-basis="988px"
>&lt;/a>&lt;/p>
&lt;p>So let’s jump right into it.&lt;/p>
&lt;p>This app was written in about 6 hours, its built using obviously IBM Bluemix, Node.JS, Angular.JS, Bootstrap, JQuery, IBM Watson, Cloudant, and Twilio.&lt;/p>
&lt;p>If you went to the link above, &lt;a class="link" href="http://friendme.mybluemix.net/" target="_blank" rel="noopener"
>here it is again&lt;/a>.  You can actually text the app.  If you text the app two Twitter handles it will tell you the compatibility between two people.&lt;/p>
&lt;p>So the source code is available &lt;a class="link" href="https://github.com/IBM-bluemix/friendme" target="_blank" rel="noopener"
>on Github&lt;/a>.&lt;/p>
&lt;p>First, we are going to walk through on how to deploy this app and get it working in Bluemix.  Secondly, we are going to walk through how to use the command line to deploy this app as well.&lt;/p>
&lt;p>If you haven’t already sign up for a &lt;a class="link" href="http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp" target="_blank" rel="noopener"
>Bluemix account&lt;/a>.  Once you have done that head over to&lt;a class="link" href="http://jazzhub.com" target="_blank" rel="noopener"
> jazzhub.com&lt;/a>.  Login there with the username and password you created from your Bluemix account.  If you haven’t logged in yet to jazzhub it will ask you to create an id.  For example if my email is &lt;a class="link" href="mailto:jsmith@co.com" >jsmith@co.com&lt;/a>, I would create a username of jsmith.&lt;/p>
&lt;p>First, let’s open a web browser and goto &lt;a class="link" href="https://github.com/IBM-bluemix/friendme" target="_blank" rel="noopener"
>https://github.com/IBM-bluemix/friendme&lt;/a>.  Since we already created an account or logged in jazzhub above we should be logged in.  On the right hand side near the top there should be a big button that says &amp;ldquo;Fork Project&amp;rdquo;.  Let’s click that.&lt;/p>
&lt;p>&lt;a class="link" href="fork.png" >
&lt;/a>&lt;a class="link" href="fork.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork.png"
width="300"
height="83"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork_hu_e5dda40ee0488710.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork_hu_92803f85830f436a.png 1024w"
loading="lazy"
alt="fork 300x83 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="361"
data-flex-basis="867px"
>&lt;/a>&lt;/p>
&lt;p>Let’s go ahead and enter a project name, for example friendme, you can name it anything you want though.  Next place a check mark next to &amp;ldquo;Make it Private&amp;rdquo;, more on this later…  Next make sure an organization and space is shown, it should should your email address as the organization and the space should be dev.  Lastly, click &amp;ldquo;Save&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="fork2.png" >
&lt;/a>&lt;a class="link" href="fork2.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork2.png"
width="300"
height="239"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork2_hu_fbd70f899f8fb918.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork2_hu_ba1847246db0f6e7.png 1024w"
loading="lazy"
alt="fork2 300x239 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/a>&lt;/p>
&lt;p>Next we need to create the app in Bluemix and setup some services.  So in a new browser window navigate to&lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
> http://bluemix.net&lt;/a>.  In the top right click login.&lt;/p>
&lt;p>Once you login click on catalog and find SDK for Node.JS.  Go ahead and click on it.&lt;/p>
&lt;p>&lt;a class="link" href="node.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/node.png"
width="269"
height="300"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/node_hu_664ec7bd40c775fa.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/node_hu_b92ebc228a62d01c.png 1024w"
loading="lazy"
alt="node 269x300 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/a>&lt;/p>
&lt;p>Type in a name for your app, this will also be the URL for your app, remember this as we will need it later…  Then click &amp;ldquo;Create&amp;rdquo;.&lt;/p>
&lt;p>Behind the scenes Bluemix is spinning up a container for our app, setting up SSL, and setting up load balancing. In a traditional IaaS, you would have to do all this manually and it can take hours or days…&lt;/p>
&lt;p>&lt;a class="link" href="createapp.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/createapp.png"
width="228"
height="300"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/createapp_hu_ca3d17f5544aea86.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/createapp_hu_4f2e2fa607e1fc2.png 1024w"
loading="lazy"
alt="createapp 228x300 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/a>&lt;/p>
&lt;p>Next, we need to add some services to our app.  We need Watson and Cloudant.  Let’s do Watson first.  The Watson service that we want is User Modeling.  It will analyze text and determine someone’s personality.  So to do this let’s click &amp;ldquo;Add A Service&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="addservice.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addservice.png"
width="300"
height="76"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addservice_hu_c62a1aea4e3d8aaf.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addservice_hu_eb9eb4498b2765e5.png 1024w"
loading="lazy"
alt="addservice 300x76 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="394"
data-flex-basis="947px"
>&lt;/a>&lt;/p>
&lt;p>Let’s go to the Watson section and click on &amp;ldquo;User Modeling&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="usermodeling.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling.png"
width="300"
height="115"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling_hu_2f8c7001bd53ffab.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling_hu_84422fde67a5add8.png 1024w"
loading="lazy"
alt="usermodeling 300x115 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="260"
data-flex-basis="626px"
>&lt;/a>&lt;/p>
&lt;p>It will bring up a dialog asking us to bind the service to our app, on the right hand side, click &amp;ldquo;Create&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="usermodeling2.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling2.png"
width="224"
height="300"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling2_hu_de1ce743213412d5.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling2_hu_6cd2119b9367372.png 1024w"
loading="lazy"
alt="usermodeling2 224x300 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="179px"
>&lt;/a>&lt;/p>
&lt;p>It will ask us if we want to restage the app, go ahead and click ok.  What this means is it needs to bind the service to the app and to do this it needs to restart it.&lt;/p>
&lt;p>Next, we need to create a database, to do this let’s click on the Cloudant tile.&lt;/p>
&lt;p>&lt;a class="link" href="cloudantclick.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantclick.png"
width="783"
height="578"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantclick_hu_2627f191c7a6ddaf.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantclick_hu_37d962d33d1939e4.png 1024w"
loading="lazy"
alt="cloudantclick 300x221 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/a>&lt;/p>
&lt;p>Then let’s click on the launch button.&lt;/p>
&lt;p>&lt;a class="link" href="cloudantlaunch.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantlaunch.png"
width="1024"
height="351"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantlaunch_hu_ae86217a151a7505.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantlaunch_hu_7ea855d9f0f4cd14.png 1024w"
loading="lazy"
alt="cloudantlaunch 300x103 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="700px"
>&lt;/a>&lt;/p>
&lt;p>Next we need to create a database, click on &amp;ldquo;Add New Database&amp;rdquo; in the top right.&lt;/p>
&lt;p>&lt;a class="link" href="addnewdb.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addnewdb.png"
width="600"
height="96"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addnewdb_hu_62b66c1c41ad5902.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addnewdb_hu_21993a5ddbe44cf2.png 1024w"
loading="lazy"
alt="addnewdb 300x48 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="625"
data-flex-basis="1500px"
>&lt;/a>&lt;/p>
&lt;p>Then enter a name for the database, let’s use friendme, if you use something else we will have to edit the code…  Go ahead and click &amp;ldquo;Create&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="db.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/db.png"
width="300"
height="150"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/db_hu_7cbfe672df7b457.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/db_hu_da681d3bd90c9a6c.png 1024w"
loading="lazy"
alt="db 300x150 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/a>&lt;/p>
&lt;p>We can close out of Cloudant now.&lt;/p>
&lt;p>So, since we are making API calls to Twilio and Twitter we need to register for API key’s.&lt;/p>
&lt;p>Let’s do Twitter first, head on over to &lt;a class="link" href="http://apps.twitter.com" target="_blank" rel="noopener"
>http://apps.twitter.com&lt;/a> and login with your Twitter username and password.&lt;/p>
&lt;p>In the top right let’s click on &amp;ldquo;Create New App&amp;rdquo;.  Type in a name and description for the app, the URL actually doesn’t matter but let’s type in something real.  Remember above the name you created for your app in Bluemix, let’s type that in.  For example &lt;a class="link" href="http://friendme.mybluemix.net" target="_blank" rel="noopener"
>http://friendme.mybluemix.net&lt;/a>.  Replace friendme with the name of your app.&lt;/p>
&lt;p>Click on the &amp;ldquo;Keys and Access Tokens&amp;rdquo; tab.  Under Access Tokens click &amp;ldquo;Create my access token&amp;rdquo;.  Leave this tab open, we will need these API’s keys in a bit…&lt;/p>
&lt;p>Next we need a Twilio phone number if you would like to be able to text your app.  If you don’t want to be able to text the app skip this section, you can use the UI of the app to interact with it.  Head on over to &lt;a class="link" href="https://www.twilio.com/try-twilio?promo=bluemix" target="_blank" rel="noopener"
>https://www.twilio.com/try-twilio&lt;/a> and create an account.  If you already have an account go ahead and goto &lt;a class="link" href="https://www.twilio.com/user/account/phone-numbers/incoming" target="_blank" rel="noopener"
>https://www.twilio.com/user/account/phone-numbers/incoming&lt;/a> or if you just created an account go there as well.&lt;/p>
&lt;p>We need to buy a number, to do this click on &amp;ldquo;Buy Number&amp;rdquo; in the top right.  Make sure the number has texting capabilities.&lt;/p>
&lt;p>&lt;a class="link" href="twilio.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/twilio.png"
width="300"
height="137"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/twilio_hu_68c2e6fd2edf5620.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/twilio_hu_4ed3b0a354196785.png 1024w"
loading="lazy"
alt="twilio 300x137 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="525px"
>&lt;/a>&lt;/p>
&lt;p>Try to find one of the cheaper ones, the cheapest you can find is $1/month, not bad…&lt;/p>
&lt;p>So once we buy the number we will need our API key’s.  They can be found at &lt;a class="link" href="https://www.twilio.com/user/account/settings" target="_blank" rel="noopener"
>https://www.twilio.com/user/account/settings&lt;/a>.  Leave this tab open like we did for Twitter, we will come back to this…&lt;/p>
&lt;p>Ok so finally time to deploy our app.  To do this switch back to Jazzhub, click the &amp;ldquo;Build &amp;amp; Deploy&amp;rdquo; button in the top right.&lt;/p>
&lt;p>&lt;a class="link" href="buildanddeploy.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildanddeploy.png"
width="300"
height="53"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildanddeploy_hu_2e7dc4ebc6f1abe9.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildanddeploy_hu_74a25e9bdc69aa6d.png 1024w"
loading="lazy"
alt="buildanddeploy 300x53 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="566"
data-flex-basis="1358px"
>&lt;/a>&lt;/p>
&lt;p>Go ahead and click on &amp;ldquo;Advanced&amp;rdquo; to turn on deployments.&lt;/p>
&lt;p>&lt;a class="link" href="advanced.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/advanced.png"
width="300"
height="54"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/advanced_hu_f46371b0d943eb.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/advanced_hu_a28873a289b8f3be.png 1024w"
loading="lazy"
alt="advanced 300x54 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="555"
data-flex-basis="1333px"
>&lt;/a>&lt;/p>
&lt;p>Click on &amp;ldquo;add a builder&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="addabuilder.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addabuilder.png"
width="300"
height="293"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addabuilder_hu_b1577ed54355959a.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addabuilder_hu_ef4ceea7d73d3708.png 1024w"
loading="lazy"
alt="addabuilder 300x293 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/a>&lt;/p>
&lt;p>For builder type choose &amp;ldquo;Shell Script&amp;rdquo;.&lt;/p>
&lt;p>For the build script text area enter the following.&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
echo &amp;quot;do nothing&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Since it is node we really don’t need a build here…  If this wasn’t a demo and real app we would probably run some unit tests and do some linting here…&lt;/p>
&lt;p>Click on Save.&lt;/p>
&lt;p>&lt;a class="link" href="builderdone.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/builderdone.png"
width="300"
height="228"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/builderdone_hu_33480b611b0bc61b.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/builderdone_hu_62167e7eb1adad00.png 1024w"
loading="lazy"
alt="builderdone 300x228 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/a>&lt;/p>
&lt;p>Next we need to set up the deployment.  Click on &amp;ldquo;add a stage&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="addstage.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addstage.png"
width="300"
height="242"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addstage_hu_e6e842bb605214ba.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addstage_hu_6a6b0c085cfe59c.png 1024w"
loading="lazy"
alt="addstage 300x242 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/a>&lt;/p>
&lt;p>Make sure the app name matches the app name we created in Bluemix.&lt;/p>
&lt;p>Last thing we need to do is modify the build script.  This is the only really confusing bit, you need to make sure you set this up correct or the app won’t work…&lt;/p>
&lt;p>When you first click on &amp;ldquo;add a stage&amp;rdquo; it will look like the following&amp;hellip;&lt;/p>
&lt;p>&lt;a class="link" href="deploybefore.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/deploybefore.png"
width="300"
height="239"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/deploybefore_hu_c70508966d67118c.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/deploybefore_hu_5de1bf44ae6c9d35.png 1024w"
loading="lazy"
alt="deploybefore 300x239 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/a>&lt;/p>
&lt;p>The script will look like the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push &amp;#34;${CF_APP}&amp;#34; -n &amp;#34;${CF_APP}-${CF_SPACE}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># View logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXIT_CODE=$?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $EXIT_CODE -ne 0 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cf logs &amp;#34;${CF_APP}&amp;#34; --recent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit $EXIT_CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We will need to update it to the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWILIO_PHONENUMBER &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWILIO_SID &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWILIO_TOKEN &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_ACCESSTOKEN_KEY &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_ACCESSTOKEN_SECRET &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_CONSUMER_KEY &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_CONSUMER_SECRET &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf push &amp;#34;${CF_APP}&amp;#34; -c &amp;#34;node lib/app.js&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># View logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXIT_CODE=$?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $EXIT_CODE -ne 0 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cf logs &amp;#34;${CF_APP}&amp;#34; --recent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit $EXIT_CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For each of these values we need to substitute in the the correct values from the tab’s we kept open earlier from Twitter and Twilio.&lt;/p>
&lt;p>If you remember earlier we made the project private, this was to prevent other people from seeing our secret access key’s.  DevOps Service will be rolling out a new over the coming weeks where you can find information for a public project.&lt;/p>
&lt;p>Once you replace the values go ahead and click &amp;ldquo;Save&amp;rdquo;.&lt;/p>
&lt;p>Last thing to do is click &amp;ldquo;Request Build&amp;rdquo;.  That should successfully complete and that will trigger a deployment of your app.&lt;/p>
&lt;p>You can see the deployment is being performed by the following screen shot.&lt;/p>
&lt;p>&lt;a class="link" href="buildrunning.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildrunning.png"
width="300"
height="195"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildrunning_hu_237b35032d571328.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildrunning_hu_4e4f5742827993e7.png 1024w"
loading="lazy"
alt="buildrunning 300x195 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="369px"
>&lt;/a>&lt;/p>
&lt;p>Once the deployment finishes you can click the link (name of your app) to your app to use it!&lt;/p>
&lt;p>&lt;a class="link" href="done.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/done.png"
width="300"
height="207"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/done_hu_9354d5d3fcc4520a.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/done_hu_df2683bdbd9f874d.png 1024w"
loading="lazy"
alt="done 300x207 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/a>&lt;/p>
&lt;p>Please reach out to me on Twitter (&lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a>) if you have any issues or post a comment below.&lt;/p></description></item><item><title>Building a Java EE app on IBM Bluemix Using Watson, Cloudant</title><link>https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/</link><pubDate>Tue, 14 Oct 2014 22:36:53 -0500</pubDate><guid>https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/hiring.png" alt="Featured image of post Building a Java EE app on IBM Bluemix Using Watson, Cloudant" />&lt;p>Hey Y’all!&lt;/p>
&lt;p>Jeff here again and something I am really excited about is Watson is &lt;a class="link" href="https://developer.ibm.com/bluemix/2014/10/08/watson-on-bluemix" target="_blank" rel="noopener"
>now available for anyone to use in Bluemix!&lt;/a>&lt;/p>
&lt;p>Today we are going to be building an example app using Java, Cloudant, and Watson.&lt;/p>
&lt;p>Ok let’s talk through what this app is going to do before we build it.&lt;/p>
&lt;p>Meet Ivy (hello!)&lt;/p>
&lt;p>She’s a talent manager at a growing tech startup.&lt;/p>
&lt;p>She’s looking for a new hire that would be a good fit on her team but the company is so popular that she has a huge inventory of resumes to sort through. She’s looking for tools to help her, and tools beyond just simple tag filters.&lt;/p>
&lt;p>With Watson services she can also start to solve for a problem like, &amp;ldquo;I’m looking for another developer like &amp;ldquo;[insert cool employee].&amp;rdquo;&lt;/p>
&lt;p>So in this case, the application can issue queries such as,&lt;/p>
&lt;blockquote>
&lt;p>Find me a Developer like Craig Smith.Then search through all possible candidate and return a ranked list of candidates sorted by highest-to-lowest percentage of personality resemblance. From here, searches can be refined by including technical skills. Find me a Developer like Craig Smith, and knows Java, C and Python.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ndash; &lt;cite>Ivy (HR Manager)&lt;/cite>&lt;/p>&lt;/blockquote>
&lt;p>Make sense??&lt;/p>
&lt;p>Ok let’s jump right in.&lt;/p>
&lt;h2 id="pre-reqs">Pre-req&amp;rsquo;s
&lt;/h2>&lt;p>First thing you need to do is clone the github project with some starter code.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone https://github.com/IBM-Bluemix/talent-manager.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Or &lt;a class="link" href="https://github.com/IBM-Bluemix/talent-manager/archive/master.zip" target="_blank" rel="noopener"
>download a zip file&lt;/a> if you don’t have git installed.&lt;/p>
&lt;p>Next we need to complete a couple pre-req steps.&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers" target="_blank" rel="noopener"
>Download Eclipse EE&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener"
>Download and install Java 1.7 JDK&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.ng.bluemix.net/docs/#starters/install_cli.html?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-JavaEEWatsonCloudant-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Download and install the Cloud Foundry CLI&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-JavaEEWatsonCloudant-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Sign up for a FREE IBM Bluemix account if you don’t have one yet&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Ok once we have all that setup we can start creating our app.&lt;/p>
&lt;h2 id="create-the-application">Create the application
&lt;/h2>&lt;p>First we need to sign into Bluemix, so open your browser and head on over to &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-JavaEEWatsonCloudant-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a>. We need to login.  Up at the top lets go ahead and click on Catalog.&lt;/p>
&lt;p>&lt;a class="link" href="catalog.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/catalog.png"
width="300"
height="99"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/catalog_hu_9c32f09da96b06f7.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/catalog_hu_bf35c35b7132c79e.png 1024w"
loading="lazy"
alt="catalog 300x99 Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="303"
data-flex-basis="727px"
>&lt;/a>&lt;/p>
&lt;p>Scroll down a little and click on Liberty&lt;/p>
&lt;p>&lt;a class="link" href="liberty.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/liberty.png"
width="1184"
height="677"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/liberty_hu_69f5681cdd04b467.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/liberty_hu_dfe48690f80291f3.png 1024w"
loading="lazy"
alt="liberty 1024x585 Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="174"
data-flex-basis="419px"
>&lt;/a>&lt;/p>
&lt;p>On the right hand side we need to give our app a name.  Please note that this name must be unique.  Also remember this name as we will need it later…&lt;/p>
&lt;p>Click create.&lt;/p>
&lt;p>&lt;a class="link" href="new-app.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/new-app.png"
width="351"
height="460"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/new-app_hu_ce910f6b88e8a9d7.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/new-app_hu_b20e302331bdeb19.png 1024w"
loading="lazy"
alt="new app Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="76"
data-flex-basis="183px"
>&lt;/a>&lt;/p>
&lt;p>Bluemix will start deploying our app and Bluemix will start our app.&lt;/p>
&lt;p>So next we need to add Cloudant and Watson to our app!&lt;/p>
&lt;p>So do you that make sure you are in the dashboard and have your app open like the screencap below.  We will then click the &amp;ldquo;Add A Service&amp;rdquo; button.&lt;/p>
&lt;p>&lt;a class="link" href="add-service.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/add-service.png"
width="1131"
height="755"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/add-service_hu_a9f75daa7297ceae.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/add-service_hu_19e0977290ccee4a.png 1024w"
loading="lazy"
alt="add service 1024x683 Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/a>&lt;/p>
&lt;p>First let’s add Watson.  Scroll down until you find the &amp;ldquo;User Modeling&amp;rdquo; Service.  Go ahead and click that.&lt;/p>
&lt;p>&lt;a class="link" href="user-modeling.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/user-modeling.png"
width="1217"
height="407"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/user-modeling_hu_24760765c57fd2b6.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/user-modeling_hu_c5fdcb66a61d01f3.png 1024w"
loading="lazy"
alt="user modeling 1024x342 Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="299"
data-flex-basis="717px"
>&lt;/a>&lt;/p>
&lt;p>Again, all we have to do is click &amp;ldquo;Create&amp;rdquo; on the right hand side.&lt;/p>
&lt;p>&lt;a class="link" href="watson-create.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/watson-create.png"
width="373"
height="468"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/watson-create_hu_547b85c9f66e9641.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/watson-create_hu_d4d17f5b0f67dd6b.png 1024w"
loading="lazy"
alt="watson create Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="79"
data-flex-basis="191px"
>&lt;/a>&lt;/p>
&lt;p>Bluemix is going to ask us if we want to restage our app, we should click the &amp;ldquo;OK&amp;rdquo; button.  What Bluemix is asking us here is since we made a change to our app, the app needs to be restarted to bind in Watson.&lt;/p>
&lt;p>&lt;a class="link" href="restage.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/restage.png"
width="706"
height="567"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/restage_hu_65a484fdfc866f5f.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/restage_hu_8cacf6d7d0da81a4.png 1024w"
loading="lazy"
alt="restage Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="124"
data-flex-basis="298px"
>&lt;/a>&lt;/p>
&lt;p>Next, let’s click &amp;ldquo;Add A Service&amp;rdquo; again.&lt;/p>
&lt;p>&lt;a class="link" href="addserviceagain.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/addserviceagain.png"
width="846"
height="695"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/addserviceagain_hu_b2e892183cc41ef2.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/addserviceagain_hu_9b8205ccb7586e6d.png 1024w"
loading="lazy"
alt="addserviceagain Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="121"
data-flex-basis="292px"
>&lt;/a>
This time scroll down to the bottom and choose &amp;ldquo;Cloudant&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="cloudant.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudant.png"
width="1135"
height="272"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudant_hu_833bad00e5e09cbb.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudant_hu_471b9bd838d201eb.png 1024w"
loading="lazy"
alt="cloudant 1024x245 Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="417"
data-flex-basis="1001px"
>&lt;/a>&lt;/p>
&lt;p>Then click &amp;ldquo;Create&amp;rdquo; on the right hand side.&lt;/p>
&lt;p>&lt;a class="link" href="cloudantcreate.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudantcreate.png"
width="360"
height="464"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudantcreate_hu_f876d9ea7020501d.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudantcreate_hu_2a504aa349ba519b.png 1024w"
loading="lazy"
alt="cloudantcreate Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="77"
data-flex-basis="186px"
>&lt;/a>&lt;/p>
&lt;p>It is going to ask us to restage our app again, go ahead and click &amp;ldquo;OK&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="cloudantrestage.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudantrestage.png"
width="852"
height="721"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudantrestage_hu_f96fb1765a9ff2f5.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/cloudantrestage_hu_9812034e13d8c489.png 1024w"
loading="lazy"
alt="cloudantrestage Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="118"
data-flex-basis="283px"
>&lt;/a>&lt;/p>
&lt;p>Now we have all our services added.  Let’s go ahead and start getting some data imported.&lt;/p>
&lt;p>On the dashboard for the app let’s go ahead and click on Cloudant.&lt;/p>
&lt;h2 id="explanation-of-cloudant">Explanation of Cloudant
&lt;/h2>&lt;p>So let’s pause and explain what Cloudant is.  Cloudant is a No-SQL database that is based on CouchDB.  The big difference between a relationship database and No-SQL database is illustrated below.  In the relationship database you have to have multiple tables to represent the data and have to use SQL and JOIN statements to get data from both tables.  In a No-SQL database which is commonly referred to as a document store database you stores JSON documents/data (as illustrated on the left below).&lt;/p>
&lt;p>&lt;a class="link" href="Figure5a.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/Figure5a.png"
width="600"
height="211"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/Figure5a_hu_9ef1cb5e59c49edb.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/Figure5a_hu_6f9aeda7a4c3eeeb.png 1024w"
loading="lazy"
alt="Figure5a Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="284"
data-flex-basis="682px"
>&lt;/a>&lt;/p>
&lt;p>So back to the demo&amp;hellip;&lt;/p>
&lt;h2 id="eclipse-steps">Eclipse Steps
&lt;/h2>&lt;p>In Eclipse, right click on the project’s area on the left.&lt;/p>
&lt;p>&lt;a class="link" href="import.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/import.png"
width="905"
height="652"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/import_hu_e60e1a7ec36ddb17.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/import_hu_f6daea3eaa47ac74.png 1024w"
loading="lazy"
alt="import Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="138"
data-flex-basis="333px"
>&lt;/a>&lt;/p>
&lt;p>Under General click existing project into workspace and click next&lt;/p>
&lt;p>&lt;a class="link" href="existingproject.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/existingproject.png"
width="535"
height="543"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/existingproject_hu_c9af4a74e0a63ce3.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/existingproject_hu_6816ce389b815d42.png 1024w"
loading="lazy"
alt="existingproject Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="98"
data-flex-basis="236px"
>&lt;/a>&lt;/p>
&lt;p>Next we want to find our project we downloaded from github.  We need to browse to the directory where it is.  Once you find the talent-manager folder, go one more level down into that into a folder called personafusion (as shown below). Click finish.&lt;/p>
&lt;p>&lt;a class="link" href="finishimport.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/finishimport.png"
width="773"
height="692"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/finishimport_hu_e31e2f42ea16787e.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/finishimport_hu_f343d300e55d0e7.png 1024w"
loading="lazy"
alt="finishimport Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="111"
data-flex-basis="268px"
>&lt;/a>&lt;/p>
&lt;p>Next, we need to make a couple code edits…&lt;/p>
&lt;p>In &lt;code>src/com.ibm.personafusion/Config.java&lt;/code>.&lt;/p>
&lt;p>Line 10 currently reads like below.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public static final String CLOUDANT_NAME = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It needs to be changed to what is below.  This is our Cloudant database name we created.  If you used something other than &amp;ldquo;talent-manager here&amp;rdquo; type that in.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public static final String CLOUDANT_NAME = &amp;#34;talent-manager&amp;#34;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Go ahead and save that file and close it.&lt;/p>
&lt;p>Next open &lt;code>src/com.ibm.personafusion/CloudantClient.java&lt;/code>&lt;/p>
&lt;p>We need to update our constructor from what is below.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public CloudantClient()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.httpClient = null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //TODO read env VCAP_SERVICES and parse it into JSON
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.port = Config.CLOUDANT_PORT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.host = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.username = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.password = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.name = Config.CLOUDANT_NAME;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.dbc = this.createDBConnector();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To this.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private JSONArray cloudant;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private JSONObject cloudantInstance;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private JSONObject cloudantCredentials;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public CloudantClient()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.httpClient = null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String VCAP_SERVICES = System.getenv(&amp;#34;VCAP_SERVICES&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> JSONObject vcap;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vcap = (JSONObject) JSONObject.parse(VCAP_SERVICES);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cloudant = (JSONArray) vcap.get(&amp;#34;cloudantNoSQLDB&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cloudantInstance = (JSONObject) cloudant.get(0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cloudantCredentials = (JSONObject) cloudantInstance.get(&amp;#34;credentials&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } catch (IOException e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e.printStackTrace();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.port = Config.CLOUDANT_PORT;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.host = (String) cloudantCredentials.get(&amp;#34;host&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.username = (String) cloudantCredentials.get(&amp;#34;username&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.password = (String) cloudantCredentials.get(&amp;#34;password&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.name = Config.CLOUDANT_NAME;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.dbc = this.createDBConnector();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you notice we also added 3 global variables as well.&lt;/p>
&lt;p>Next we need to update the Watson code as well.  This is located in &lt;code>src/com.ibm.personafusion/services/WatonUserModeler.java&lt;/code>&lt;/p>
&lt;p>Before:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public WatsonUserModeller() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //TODO read env VCAP_SERVICES and parse it into JSON
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.username = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.password = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.base_url = &amp;#34;&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.profile_api = Config.WATSON_PROF_API;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.visual_api = Config.WATSON_VIZ_API;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.executor = Executor.newInstance().auth(username, password);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (this.executor == null)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.err.println(&amp;#34;Authentication failed in WatsonUserModeller.&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">private static JSONArray watson;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private static JSONObject watsonInstance;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private static JSONObject watsonCredentials;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Executor executor;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public WatsonUserModeller()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> String VCAP_SERVICES = System.getenv(&amp;#34;VCAP_SERVICES&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> JSONObject vcap;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vcap = (JSONObject) JSONObject.parse(VCAP_SERVICES);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> watson = (JSONArray) vcap.get(&amp;#34;user_modeling&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> watsonInstance = (JSONObject) watson.get(0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> watsonCredentials = (JSONObject) watsonInstance.get(&amp;#34;credentials&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } catch (IOException e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e.printStackTrace();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.username = (String) watsonCredentials.get(&amp;#34;username&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.password = (String) watsonCredentials.get(&amp;#34;password&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.base_url = (String) watsonCredentials.get(&amp;#34;url&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.profile_api = Config.WATSON_PROF_API;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.visual_api = Config.WATSON_VIZ_API;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.executor = Executor.newInstance().auth(username, password);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (this.executor == null)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.err.println(&amp;#34;Authentication failed in WatsonUserModeller.&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ok, so the app is basically done, we need to build our war file now, on the left side in Eclipse, open build.xml.  On the right hand side right click build [default] and then &amp;ldquo;Run As&amp;rdquo; and then &amp;ldquo;Ant Build&amp;rdquo;.  This will generate our WAR file for us that we will deploy.&lt;/p>
&lt;p>&lt;a class="link" href="antbuild.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/antbuild.png"
width="1024"
height="528"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/antbuild_hu_1181f477b7845ab0.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/antbuild_hu_a070cceed3b51585.png 1024w"
loading="lazy"
alt="antbuild 1024x528 Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="193"
data-flex-basis="465px"
>&lt;/a>&lt;/p>
&lt;p>In the bottom it should say &amp;ldquo;BUILD SUCESSFULL&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="buildfinished.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/buildfinished.png"
width="852"
height="220"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/buildfinished_hu_d45c956c2583dfaf.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/buildfinished_hu_f69885e13d86a42c.png 1024w"
loading="lazy"
alt="buildfinished Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="387"
data-flex-basis="929px"
>&lt;/a>&lt;/p>
&lt;p>The next and last step involves deploy your app to bluemix.  This step requires the Cloud Foundry CLI to be installed (if you haven’t done this yet scroll back up the pre-req’s section above).&lt;/p>
&lt;p>If you are on Windows open up the command prompt, if you are on a Mac or Linux open up the terminal.&lt;/p>
&lt;p>Type the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf login -a https://api.ng.bluemix.net
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It will then ask for your username and password that you registered with for Bluemix. There are two important files in this directory.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>manifest.yml&lt;/strong>&lt;/li>
&lt;li>&lt;strong>webStarterApp.war&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>We need to edit the &lt;code>manifest.yml&lt;/code> file and then we can deploy the app.
Open the file in your favorite text editor or you can use Eclipse as well. The contents of the file are below.
There are two important lines in here, host and name. These values need to be unique and match the app we deployed earlier. In my case the app name is talent-manager-awesome, so my file would then become what is below.&lt;/p>
&lt;p>This value comes from Bluemix, lets open the Bluemix dashboard in our web browser again.  In the screenshot below we can just copy the name of the app and paste this into the &lt;code>manifest.yml&lt;/code> file.  So don’t copy my apps name exactly as it won’t work, it needs to be your app’s unique name.&lt;/p>
&lt;p>&lt;a class="link" href="appname.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/appname.png"
width="783"
height="171"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/appname_hu_4d4ac9460e6b1651.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/appname_hu_e09d7c71e3cad602.png 1024w"
loading="lazy"
alt="appname Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="457"
data-flex-basis="1098px"
>&lt;/a>&lt;/p>
&lt;p>Now the final step we need to cd (change directory) in our command prompt or terminal to where the &lt;code>manifest.yml&lt;/code> and webStarterApp.war are located.  For me its located at &lt;code>/Users/jsloyer/Downloads/talent-manager-master/personafusion&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">Users&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jsloyer&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Downloads&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">talent&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">manager&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">master&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">personafusion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cf&lt;/span> &lt;span class="n">push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The cf push command pushes our app to Bluemix, a bunch of text will fly bay saying its deploying and eventually it will say the app is starting and then it is up and running.  Bluemix will give you a URL you can access your app at.&lt;/p>
&lt;p>&lt;a class="link" href="apprunning.png" >&lt;img src="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/apprunning.png"
width="715"
height="306"
srcset="https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/apprunning_hu_94a562d9fde6383e.png 480w, https://www.jeffsloyer.io/post/building-a-java-ee-app-on-ibm-bluemix-using-watson-and-cloudant/apprunning_hu_a463b295b56f7a6.png 1024w"
loading="lazy"
alt="apprunning Building a Java EE app on IBM Bluemix Using Watson and Cloudant "
class="gallery-image"
data-flex-grow="233"
data-flex-basis="560px"
>&lt;/a>&lt;/p>
&lt;p>Voila!!!!  We created a Java web app using Cloudant and Watson on IBM Bluemix!&lt;/p>
&lt;p>Source Code:
&lt;a class="link" href="https://ibm.biz/talent-manager" target="_blank" rel="noopener"
>https://ibm.biz/talent-manager&lt;/a>&lt;/p>
&lt;p>Feedback is welcome, please contact me on Twitter @jsloyer – &lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>http://twitter.com/jsloyer&lt;/a>&lt;/p>
&lt;p>For a video walkthrough of this demo please visit &lt;a class="link" href="http://ibm.biz/talent-manager-demo" target="_blank" rel="noopener"
>http://ibm.biz/talent-manager-demo&lt;/a> or watch the video below!&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9AFMY6m0LIU" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>This app was developed over the course of 48 hours at an internal hackathon. The developers and designers that worked on this are the following.&lt;/p>
&lt;ul>
&lt;li>Eva XIAOHUI LUO&lt;/li>
&lt;li>MICHAEL J. YOUNG&lt;/li>
&lt;li>SEAN J. WELLECK&lt;/li>
&lt;li>BRIAN T. HAN&lt;/li>
&lt;li>MICHAEL POPLAVSKI&lt;/li>
&lt;li>ALAN XIA&lt;/li>
&lt;li>Jeff Sloyer&lt;/li>
&lt;/ul></description></item><item><title>Zero Downtime Deployments with Bluemix</title><link>https://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix/</link><pubDate>Mon, 18 Aug 2014 22:10:32 -0500</pubDate><guid>https://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix/unplug.jpg" alt="Featured image of post Zero Downtime Deployments with Bluemix" />&lt;p>In Cloud Foundry (the open source technology behind Bluemix), when you do a &lt;code>cf push&lt;/code>, Cloud Foundry will actually stop your app and restart it with the new code that you just uploaded.  This presents an issue for a production app or any app that is actually serving users. There is a shortcoming with the current DEA (the part in Cloud Foundry that runs your app) but the next version of the DEA (&lt;a class="link" href="https://www.youtube.com/watch?v=1OkmVTFhfLY" target="_blank" rel="noopener"
>Diego&lt;/a>) will help address this.  In the meantime you can do a little scripting to get around this.&lt;/p>
&lt;p>The basic flow is as follows:&lt;/p>
&lt;ol>
&lt;li>App A is running (prod)&lt;/li>
&lt;li>Deploy App B&lt;/li>
&lt;li>Do some tests against App B&lt;/li>
&lt;li>Map prod route to App B&lt;/li>
&lt;li>Unmap prod route from App A&lt;/li>
&lt;li>Stop App A&lt;/li>
&lt;li>Delete App A&lt;/li>
&lt;/ol>
&lt;p>Here is some starter shell code to do it:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># deploy.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#!/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf unmap-route blue-app mybluemix.net -n cf-blue-green &lt;span class="c1"># make the app unavailable to requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf push blue-app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># wait for the blue app to start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> true&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">RESP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>curl -sIL -w &lt;span class="s2">&amp;#34;%{http_code}&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;blue-app.mybluemix.net&amp;#34;&lt;/span> -o /dev/null&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="nv">$RESP&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;200&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> sleep &lt;span class="m">3&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>amp&lt;span class="p">;&amp;amp;&lt;/span>amp&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Waiting for 200 response&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># make the blue app available to the router&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf map-route blue-app mybluemix.net -n cf-blue-green
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># deploy to the green app&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf unmap-route green-app mybluemix.net -n cf-blue-green
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf push green-app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf app green-app
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf map-route green-app mybluemix.net -n cf-blue-green
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Inbound Ssl in Bluemix</title><link>https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/</link><pubDate>Mon, 18 Aug 2014 13:24:00 -0500</pubDate><guid>https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/secure.jpg" alt="Featured image of post Inbound Ssl in Bluemix" />&lt;p>Did you know in Bluemix you get inbound SSL for free?  It is automatically turned on and enabled for every app.  All you have to do is just access your app over https instead of http.&lt;/p>
&lt;p>Developers don’t need to implement SSL in their app, you just need to support HTTP and the Bluemix infrastructure will support HTTPS for you and do SSL offloading.&lt;/p>
&lt;p>Additionally Bluemix supports the &lt;code>x-forwarded-proto&lt;/code> header to allow developers to check with protocol requests are coming in over.  I have pasted some example Node.JS middleware that you can check if the request is coming in over https or not.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">middleware&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exports&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;http:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HTTPS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;https:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">middleware&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transportSecurity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">applicationURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">appURL&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheme&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">applicationURL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">securityEnabled&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">scheme&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">scheme&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="n">HTTPS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;The application URL scheme must be &amp;#39;http&amp;#39; or &amp;#39;https&amp;#39;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">scheme&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="n">HTTPS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">redirectURL&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">applicationURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">originalUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">securityEnabled&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Transport security is enabled.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">handling&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">standard&lt;/span> &lt;span class="n">proxy&lt;/span> &lt;span class="n">headers&lt;/span> &lt;span class="n">ibm&lt;/span> &lt;span class="n">cf&lt;/span> &lt;span class="n">uses&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x-forwarded-proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.$&lt;/span>&lt;span class="n">wssc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">wssc&lt;/span> &lt;span class="n">header&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">something&lt;/span> &lt;span class="n">that&lt;/span> &lt;span class="n">WebSphere&lt;/span> &lt;span class="n">inserts&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">pass&lt;/span> &lt;span class="n">the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">proxied&lt;/span> &lt;span class="n">protocol&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">downstream&lt;/span> &lt;span class="n">applications&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x-forwarded-proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.$&lt;/span>&lt;span class="n">wssc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">securityEnabled&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">secure&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Redirecting insecure request for&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">originalUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">redirect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">301&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">redirectURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">middleware&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./middleware&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">middleware&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transportSecurity&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For more information check out &lt;a class="link" href="https://www.ng.bluemix.net/docs/manageapps/secapps.html" target="_blank" rel="noopener"
>the Bluemix SSL docs&lt;/a>.&lt;/p></description></item><item><title>Kraken.Js and Bluemix</title><link>https://www.jeffsloyer.io/post/kraken-js-and-bluemix/</link><pubDate>Thu, 17 Apr 2014 13:24:00 -0500</pubDate><guid>https://www.jeffsloyer.io/post/kraken-js-and-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/kraken-js-and-bluemix/kraken.jpg" alt="Featured image of post Kraken.Js and Bluemix" />&lt;p>Kraken.JS is a new wonderful framework wrapper around Express for Node.JS.  It includes things such as pre-canned security settings, templating, and internationalization.  While Express in Node allows you to customize these type of things its not the most fun thing or exciting thing to do.  While security is very important in your app why should you have to write redundant code for this.  The answer is you do not have to anymore.&lt;/p>
&lt;p>While Express in Node allows you to customize these type of things its not the most fun thing or exciting thing to do.  While security is very important in your app why should you have to write redundant code for this.  The answer is you do not have to anymore. With Kraken.JS it will drastically cut the number of lines down in your Node app.  I currently have an app right now where I am estimating if I converted it to Kraken.JS it would cut my code base by 33%. So let’s jump into Kraken.JS, the instructions below were based on &lt;a class="link" href="http://krakenjs.com/#gettingstarted%22" target="_blank" rel="noopener"
>Kraken’s documentation&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Step 1, install Kraken if you do not already have it installed.&lt;/p>
&lt;pre>&lt;code> sudo npm install -g generator-kraken
&lt;/code>&lt;/pre>
&lt;p>Note: If &amp;ldquo;yo&amp;rdquo; yeoman is not installed, the above command will install it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a basic project (follow the prompts on the screen)&lt;/p>
&lt;pre>&lt;code> yo kraken
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Start your app&lt;/p>
&lt;pre>&lt;code> npm start
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>If you notice the app started on &lt;code>8000&lt;/code>, with Bluemix and other PaaS’ you need to start your app on the port that the PaaS assigns you.  To do this we need to modify the example app slightly. If you open up &lt;code>index.js&lt;/code> down near the bottom you will see the following code snippet. …&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if (require.main === module) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kraken.create(app).listen(function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.error(err.stack);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above code will automatically bind to port &lt;code>8000&lt;/code>, we need to allow it to bind to a port that Bluemix wants.  Modify the code snippet to the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if (require.main === module) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kraken.create(app).listen(process.env.VCAP_APP_PORT || 8000, function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.error(err.stack);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The whole source of this app is on &lt;a class="link" href="https://github.com/IBM-Bluemix/kraken-example" target="_blank" rel="noopener"
>Github here&lt;/a>. If you want to pull the code do the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone https://github.com/IBM-Bluemix/kraken-example.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>