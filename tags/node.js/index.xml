<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node.js on Jeff Sloyer</title><link>https://www.jeffsloyer.io/tags/node.js/</link><description>Recent content in Node.js on Jeff Sloyer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 24 Aug 2015 11:21:03 -0500</lastBuildDate><atom:link href="https://www.jeffsloyer.io/tags/node.js/index.xml" rel="self" type="application/rss+xml"/><item><title>Peering Inside a Criminal’s Mind using IBM Watson</title><link>https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/</link><pubDate>Mon, 24 Aug 2015 11:21:03 -0500</pubDate><guid>https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/glasses.jpg" alt="Featured image of post Peering Inside a Criminal’s Mind using IBM Watson" />&lt;p>With the recent shooting in South Carolina in reminds us that criminal&amp;rsquo;s can and will continue to harm people.  They seem like random acts to most of us but to a criminal the acts make sense to them?  No one can answer this question except the criminal.  To peer inside a criminal&amp;rsquo;s would be next to impossible but what if there existed another way to peer inside their mind&amp;rsquo;s?  This could be used to try to identify patterns or personality traits that exist.  This information could be used to prevent these horrible acts and better humanity.&lt;!-- more -->&lt;/p>
&lt;p>So how would we do this?  I work at IBM so the answer is obviously IBM Watson.  We all have heard of Watson, IBM Watson &lt;a class="link" href="http://blog.ted.com/how-did-supercomputer-watson-beat-jeopardy-champion-ken-jennings-experts-discuss/" target="_blank" rel="noopener"
>beat Ken Jennings on Jeopardy&lt;/a>.  However there is so much more that Watson can do, &lt;a class="link" href="https://console.ng.bluemix.net/catalog?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>check this out&lt;/a> for all the cool things Watson can do.  One of the really cool services that Watson now provides is something called Personality Insights.  This service can analyze the personality of text in meer seconds via a REST API.  One of the things IBM is trying to do now is make all these really cool technologies available to everyone and anyone.  They are doing it through something called &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>IBM Bluemix&lt;/a>.  &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a> is IBM&amp;rsquo;s platform as a service (PaaS), and it has a whole giant catalog of really cool technologies from IBM as well as lots of other third parties.  You can sign up for a free 30 day account by going &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;p>So how does this fit back with peering inside of a criminal.  Well I hope you guessed the answer, we are going to use Personality Insights to analyze the personality of a couple criminal&amp;rsquo;s and look for some common traits.&lt;/p>
&lt;p>Let&amp;rsquo;s take the most recent horrible attack, the South Carolina church shooting.  Dylann Roof posted a manifesto online and we are going to use that as the basis to peer into his mind.&lt;/p>
&lt;p>There are two ways to try this out for yourself.  Let&amp;rsquo;s go through both of them.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Sign up a &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix account&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click the button deploy.  The button will automagically deploy the Personality Insights starter app that we are going to use.  If you are interested in the code head over to &lt;a class="link" href="https://github.com/IBM-Bluemix/personality-insights-nodejs" target="_blank" rel="noopener"
>Github&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![Deploy to Bluemix](button.png)](https://bluemix.net/deploy?repository=https://github.com/IBM-Bluemix/personality-insights-nodejs.git&amp;amp;cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-WatsonCriminalAnalysis-_-Node-WatsonPersonalityInsights-_-BM-DevAd)
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>
&lt;p>Once you app is finished deploying click &amp;ldquo;View your app&amp;rdquo;.  You will be taken to your app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hint, if you are lazy and don&amp;rsquo;t want to do the above steps go &lt;a class="link" href="http://watson-um-demo.mybluemix.net" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Next we need to get the text from Dylann Roof that we want to analyze.  It can be found &lt;a class="link" href="http://lastrhodesian.com/data/documents/rtf88.txt" target="_blank" rel="noopener"
>here&lt;/a>.  Open the link and copy all the text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click on &amp;ldquo;Clear&amp;rdquo;&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![clear](clear.jpg)](clear.jpg)
&lt;/code>&lt;/pre>
&lt;ol start="7">
&lt;li>Paste the text into the text box&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![enter-text](enter-text.jpg)](enter-text.jpg)
&lt;/code>&lt;/pre>
&lt;ol start="8">
&lt;li>Click &amp;ldquo;Analyze&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>[![analyze](analyze.jpg)](analyze.jpg)
&lt;/code>&lt;/pre>
&lt;p>Watson will return us Dylann Roof&amp;rsquo;s personality based on the manifesto in just a matter of seconds.&lt;/p>
&lt;blockquote>You are unconventional, shrewd and can be perceived as critical.
&lt;p>You are unconcerned with art: you are less concerned with artistic or creative activities than most people who participated in our surveys. You are laid-back: you appreciate a relaxed pace in life. And you are intermittent: you have a hard time sticking with difficult tasks for a long period of time.&lt;/p>
&lt;p>More than most people, your choices are driven by a desire for well-being.&lt;/p>
&lt;p>You consider helping others to guide a large part of what you do: you think it is important to take care of the people around you. You are relatively unconcerned with tradition: you care more about making your own path than following what others have done.&lt;cite> &amp;ndash; IBM Watson Analysis of Dylann Roof&amp;rsquo;s manifesto&lt;/cite>&lt;/blockquote>&lt;/p>
&lt;p>Additionally Watson provides us a visualization as well.&lt;/p>
&lt;p>&lt;a class="link" href="personality.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality.jpg"
width="1198"
height="1220"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality_hu_d7345404d8724d7d.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality_hu_f02ca00fd2a8abde.jpg 1024w"
loading="lazy"
alt="personality"
class="gallery-image"
data-flex-grow="98"
data-flex-basis="235px"
>&lt;/a>&lt;/p>
&lt;p>Let&amp;rsquo;s next take a look at Anders Behring Breivik, who was responsible for the 2011 attacks in Norway.  His manifesto is available &lt;a class="link" href="https://info.publicintelligence.net/AndersBehringBreivikManifesto.pdf" target="_blank" rel="noopener"
>here&lt;/a>.  You will need to convert it to a &lt;code>.txt&lt;/code> file. You can do this &lt;a class="link" href="http://www.zamzar.com/convert/pdf-to-txt/" target="_blank" rel="noopener"
>here&lt;/a>. It will email you a copy of the manifesto in a &lt;code>.txt&lt;/code> file.&lt;/p>
&lt;p>&lt;a class="link" href="pdf-to-txt.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt.jpg"
width="1654"
height="566"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_488527f5fe907ed.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_e5ee609b9c42be6f.jpg 1024w"
loading="lazy"
alt="pdf-to-txt"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/a>&lt;/p>
&lt;p>So let&amp;rsquo;s repeat the same steps as above.&lt;/p>
&lt;ol>
&lt;li>Clear the text area&lt;/li>
&lt;li>Paste the text&lt;/li>
&lt;li>Click Analyze&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>NOTE:&lt;/strong> You will need to make sure you have deployed the Bluemix app yourself for this one, the text file is really big and the default app does not support really large files.&lt;/p>
&lt;blockquote>You are shrewd, skeptical and tranquil.
&lt;p>You are philosophical: you are open to and intrigued by new ideas and love to explore them. You are imaginative: you have a wild imagination. And you are independent: you have a strong desire to have time to yourself.&lt;/p>
&lt;p>You are motivated to seek out experiences that provide a strong feeling of prestige.&lt;/p>
&lt;p>You are relatively unconcerned with both taking pleasure in life and tradition. You prefer activities with a purpose greater than just personal enjoyment. And you care more about making your own path than following what others have done. &lt;cite> &amp;ndash; IBM Watson Analysis of Anders Behring Breivik&amp;rsquo;s manifesto&lt;/cite>&lt;/blockquote>&lt;/p>
&lt;p>&lt;a class="link" href="personality-norway.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-norway.jpg"
width="1230"
height="1230"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-norway_hu_c2e6a0357be66d76.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-norway_hu_fd7a699f75baa399.jpg 1024w"
loading="lazy"
alt="personality-norway"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/a>One last example.  I went to Virginia Tech and I was at the school when the &lt;a class="link" href="http://www.cnn.com/2013/10/31/us/virginia-tech-shootings-fast-facts/" target="_blank" rel="noopener"
>massacre happened there&lt;/a>.  This one hits quite close to home to me.  I was supposed to be in a classroom that fellow students were massacred but I overslept.  Let&amp;rsquo;s take a look at Seung Hui Cho’s &amp;ldquo;Manifesto&amp;rdquo;.  His manifesto is available &lt;a class="link" href="https://schoolshooters.info/sites/default/files/cho_manifesto_1.1.pdf" target="_blank" rel="noopener"
>here&lt;/a>.  You will need to convert it to a &lt;code>.txt&lt;/code> file. You can do this &lt;a class="link" href="http://www.zamzar.com/convert/pdf-to-txt/" target="_blank" rel="noopener"
>here&lt;/a>. It will email you a copy of the manifesto in a &lt;code>.txt&lt;/code> file.&lt;/p>
&lt;p>&lt;a class="link" href="pdf-to-txt.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt.jpg"
width="1654"
height="566"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_488527f5fe907ed.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/pdf-to-txt_hu_e5ee609b9c42be6f.jpg 1024w"
loading="lazy"
alt="pdf-to-txt"
class="gallery-image"
data-flex-grow="292"
data-flex-basis="701px"
>&lt;/a>&lt;/p>
&lt;p>So let&amp;rsquo;s repeat the same steps as above.&lt;/p>
&lt;ol>
&lt;li>Clear the text area&lt;/li>
&lt;li>Paste the text&lt;/li>
&lt;li>Click Analyze&lt;/li>
&lt;/ol>
&lt;blockquote>You are boisterous and somewhat shortsighted.
&lt;p>You are content: you are content with your level of accomplishment and do not feel the need to set ambitious goals. You are confident: you are hard to embarrass and are self-confident most of the time. And you are carefree: you do what you want, disregarding rules and obligations.&lt;/p>
&lt;p>More than most people, your choices are driven by a desire for modernity.&lt;/p>
&lt;p>You consider independence to guide a large part of what you do: you like to set your own goals to decide how to best achieve them. You are relatively unconcerned with tradition: you care more about making your own path than following what others have done. &lt;cite> &amp;ndash; IBM Watson Analysis of Seung Hui Cho&amp;rsquo;s manifesto&lt;/cite>&lt;/blockquote>&lt;/p>
&lt;p>&lt;a class="link" href="personality-virginia-tech.jpg" >&lt;img src="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-virginia-tech.jpg"
width="1158"
height="1232"
srcset="https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-virginia-tech_hu_858bfa774aa2f2f1.jpg 480w, https://www.jeffsloyer.io/post/peering-inside-a-criminals-mind-using-ibm-watson/personality-virginia-tech_hu_fc8b911f51ab7e12.jpg 1024w"
loading="lazy"
alt="personality-virginia-tech"
class="gallery-image"
data-flex-grow="93"
data-flex-basis="225px"
>&lt;/a>Let&amp;rsquo;s do some analysis on all this data now.  It looks like all the shooter&amp;rsquo;s from these massacres have the following in common.&lt;/p>
&lt;p>It looks like from the Charleston and Norway events both share the following traits and a high percentage of both of them.&lt;/p>
&lt;ul>
&lt;li>Authority-challenging&lt;/li>
&lt;li>Self-transcendence&lt;/li>
&lt;li>Openness to change&lt;/li>
&lt;/ul>
&lt;p>Also on the flip side they both share the following traits with low percentages, which if you think about it means probably huge red flags.&lt;/p>
&lt;ul>
&lt;li>Conversation (Charleston was 3%, Norway was 11%)&lt;/li>
&lt;li>Cheerfulness (Charleston 12%, Norway 2%)&lt;/li>
&lt;li>Trust (Charleston 11%, Norway 8%)&lt;/li>
&lt;li>Uncompromising (Charleston 9%, 3%)&lt;/li>
&lt;/ul>
&lt;p>So digging into it a little more by no means am I a psychologist but it seems to me that a person that has low values in conversation, cheerfulness, trust, and uncompromising could definitely be red flags.  Additionally, high values in authority-challenging, self-transcendence, openness to change paired with the above low characteristics could be a model to try to detect some of these behaviors and thoughts earlier on.&lt;/p>
&lt;p>Going forward if police or schools could analyze the text of suspected criminal&amp;rsquo;s before hand maybe these horrible massacre&amp;rsquo;s could of been prevented.  Maybe for the Dylann Roof case if the FBI examiner that reviewed Dylann Roof&amp;rsquo;s gun permit had access to a tool like this it could of prevented the whole situation.  I know that is kinda big brother but I really believe in a somewhat of an invasion of privacy for the overall good of humanity.&lt;/p>
&lt;p>This demo could easily be extended to use more automated methods as well.  Think of companies like Dropbox analyzing files or your ISP analyzing files.  I know this would be quite creepy but it could honestly possibly save lives and prevent these horrible massacres.&lt;/p>
&lt;p>I know this post is kind of controversial but it is good to be talking about this and hopefully some good will come from this.  Please leave me feedback below or tweet me &lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a>.&lt;/p></description></item><item><title>Personality Box – You had me at upload</title><link>https://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/</link><pubDate>Mon, 29 Jun 2015 10:46:59 -0500</pubDate><guid>https://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/personality-box-you-had-me-at-upload/box.png" alt="Featured image of post Personality Box – You had me at upload" />&lt;p>As &lt;a class="link" href="http://www-03.ibm.com/press/us/en/pressrelease/47185.wss" target="_blank" rel="noopener"
>announced yesterday&lt;/a>, IBM has formed a partnership with &lt;a class="link" href="http://Box.com" target="_blank" rel="noopener"
>Box.com&lt;/a>, a partnership that includes the integration of Box into the Bluemix catalog. With its REST-based Content and View APIs, embedding enterprise-grade file storage into your app and enabling file sharing among your users has never been simpler.&lt;/p>
&lt;p>To help you on your way to becoming a file-sharing guru, Bluemix developer advocate Jake Peyser and I have built a sample app that you can leverage as you begin to explore the possibilities of the &lt;a class="link" href="http://box.com" target="_blank" rel="noopener"
>Box.com&lt;/a> APIs.&lt;!-- more --> The video below shows the application and outlines the steps to create it:&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/KPT7ttRRpr4" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>If you want to follow &lt;em>written&lt;/em> step-by-step instructions on how we leveraged the &lt;a class="link" href="http://box.com" target="_blank" rel="noopener"
>Box.com&lt;/a> and Watson Personality Insights services to create our app, see &lt;a class="link" href="https://developer.ibm.com/bluemix/2015/06/24/intro-to-box/" target="_blank" rel="noopener"
>Integrate Cloud File Storage and Sharing into your Bluemix App with Box&lt;/a>. We encourage you to pick up where we left off and build on this sample!&lt;/p></description></item><item><title>Control home devices with Bluemix Internet of Things (Part 2)</title><link>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/</link><pubDate>Tue, 17 Feb 2015 10:02:18 -0500</pubDate><guid>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/robots-blog-post-header1.jpg" alt="Featured image of post Control home devices with Bluemix Internet of Things (Part 2)" />&lt;h2 id="part-2-configuring-the-raspberry-pi">Part 2: Configuring the Raspberry Pi
&lt;/h2>&lt;p>This is a continuation of Part 1 of Controlling home devices with Bluemix Internet Of Things  If you haven’t read &lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/" >Part 1&lt;/a>, please do that first…&lt;/p>
&lt;p>In Part 1 we got the electrical work out of the way.  We wired up the relay’s and connected the circuit’s.  In this part of the 3 part series we will configure the Raspberry Pi to control the relay’s that we wired up in part 1.&lt;/p>
&lt;p>So without delay let’s jump into the next part.&lt;/p>
&lt;!-- more -->
&lt;h2 id="install-software-on-the-raspberry-pi">Install software on the Raspberry Pi
&lt;/h2>&lt;p>The first step of getting your Raspberry Pi setup is installing Raspbian.  If you have the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a> its pretty easy, just plug in the wifi dongle and insert the SD card and plug in power.  If you don’t have the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a> follow the instructions from &lt;a class="link" href="http://www.raspberrypi.org/help/noobs-setup" target="_blank" rel="noopener"
>here&lt;/a>.  Once you get Raspbian installed open up a terminal.&lt;/p>
&lt;p>Next, we will need to update Raspbian to the latest.  To do this run the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Next, we will need to download  &lt;a class="link" href="http://lightshowpi.org" target="_blank" rel="noopener"
>LightShowPi&lt;/a>.  &lt;a class="link" href="http://lightshowpi.org" target="_blank" rel="noopener"
>LightShowPi&lt;/a> is the foundation for syncing the lights to the music.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Install git (if you don&amp;#39;t already have it)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install git-core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Clone the repository to /home/pi/lightshowpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd ~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://togiles@bitbucket.org/togiles/lightshowpi.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Grab the stable branch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd lightshowpi git fetch &amp;amp;&amp;amp; git checkout stable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Next, we need to install LightShowPi, run the following.  Please not the install step will take some time, be patient…&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd /home/pi/lightshowpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Once the install is complete we need to reboot the Raspberry Pi to pickup some new environment variables. To reboot run the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="wire-up-the-raspberry-pis-breadboard">Wire up the Raspberry Pi’s breadboard
&lt;/h2>&lt;p>Once we have rebooted we need to connect the bread board to the Raspberry Pi and connect the bread board to the relays.  This took some tinkering to figure out the GPIO ports but below I have posted a picture of mybread board on how it was constructed.   For me I set everything up with 8 channels first and using LED’s provided in the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>Canakit&lt;/a> to make sure everything was working then I moved over to the real relays.  So let’s do that.&lt;/p>
&lt;p>I would highly recommend following the steps in &lt;a class="link" href="https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI" target="_blank" rel="noopener"
>this page&lt;/a> on getting your bread board working.&lt;/p>
&lt;p>Below is a picture of my finished bread board with 16 channels.  I have included a wiring diagram as well.  Basically each GPIO port goes to the input side of the relay controller.  If you notice I have a couple left over LED’s on the bread board, this was done via the tutorial list above.&lt;/p>
&lt;p>&lt;a class="link" href="2015-02-16-11.31.19.jpg" >&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/2015-02-16-11.31.19.jpg"
width="768"
height="1024"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/2015-02-16-11.31.19_hu_8e3a3585f737ad83.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/2015-02-16-11.31.19_hu_83f5355663a712a4.jpg 1024w"
loading="lazy"
alt="2015 02 16 11.31.19 768x1024 Control home devices with Bluemix Internet of Things (Part 2)"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/a>&lt;/p>
&lt;p>What is going on above is each of the delays is plugged into a GPIO port and then plugged into the ground rail and connected by a resistor.  The particular resistor I am using is a 220 Ohm resistor.&lt;/p>
&lt;p>&lt;a class="link" href="raspberry-pi-lights-wiring-diagram.png" >&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/raspberry-pi-lights-wiring-diagram.png"
width="889"
height="642"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/raspberry-pi-lights-wiring-diagram_hu_577fe0bce0400bc4.png 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/raspberry-pi-lights-wiring-diagram_hu_ee9d4c62e896f7ce.png 1024w"
loading="lazy"
alt="raspberry pi lights wiring diagram Control home devices with Bluemix Internet of Things (Part 2)"
class="gallery-image"
data-flex-grow="138"
data-flex-basis="332px"
>&lt;/a>&lt;/p>
&lt;p>So let’s test some things out.  Let’s play a pre-loaded song.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd ~/lightshowpi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo python py/synchronized_lights.py --file=/home/pi/lightshowpi/music/sample/ovenrake_deck-the-halls.mp3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>All the relays should be flashing.  At this point you can plug the lights into the outlets as well.  If you notice the lights go on solid for 30 seconds before the songs play, we can override this.  Additionally this file has the GPIO pins mapping as well.  This mapping is for using the full 16 channels, if you are using less just remove some of the mappings from the end of the gpio_pins line.  To do this we need to place a config file in our home directory.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd ~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch .lights.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Choose your favorite text editor and put the following contents in the file.  We change the time it waits from 30 seconds to 1.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[hardware]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpio_pins = 0,1,2,3,4,5,6,7,21,22,23,24,25,26,28,29
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[lightshow]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">preshow_configuration =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;transitions&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;on&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;duration&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;channel_control&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;off&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;duration&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;channel_control&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That is it for this part.  In the next part of this series we will configure the Bluemix app to respond to text message votes and then the app to interface with the python code that controls the lights.&lt;/p>
&lt;h2 id="parts-in-the-series">Parts in the Series
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/" >Part 1&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Control home devices with Bluemix Internet of Things</title><link>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</link><pubDate>Fri, 06 Feb 2015 09:49:21 -0500</pubDate><guid>https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1.jpg" alt="Featured image of post Control home devices with Bluemix Internet of Things" />&lt;p>The number of Internet connected devices is growing dramatically, it is expected to increase from 15 billon devices in 2015 to 40 billion devices in 2020.  These devices make up something called the Internet of Things.  These devices can be controlled remotely and interconnected.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/iotdevicesincrease.png"
width="700"
height="270"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/iotdevicesincrease_hu_6d11359f8f64425e.png 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/iotdevicesincrease_hu_28b1f8b3db160b62.png 1024w"
loading="lazy"
alt="iotdevicesincrease Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="259"
data-flex-basis="622px"
>&lt;/p>
&lt;p>While a lot of these devices can be connected to the Internet, most of them are &amp;ldquo;dumb&amp;rdquo; devices right now.  To turn these &amp;ldquo;dumb&amp;rdquo; devices into smart devices you can use the &lt;a class="link" href="http://internetofthings.ibmcloud.com" target="_blank" rel="noopener"
>Internet of Things&lt;/a> to connect them to the cloud.  Simple things such as a washing machine or a coffee pot can be connected to the Internet.  More practical systems can be connected also, such as a home automation system or a thermostat.  Going even further a mine could connect safety sensors to the Internet of Things as well.&lt;/p>
&lt;!-- more -->
&lt;p>The Internet of Things allows for these devices to either be controlled or act as sensors and provides a means for them to communicate.  This is done over a protocol called MQTT. According to &lt;a class="link" href="http://mqtt.org/" target="_blank" rel="noopener"
>mqtt.org&lt;/a>, &amp;ldquo;MQTT is a machine-to-machine (M2M)/Internet of Things connectivity protocol. It was designed as an extremely lightweight publish/subscribe messaging transport.&amp;rdquo;  This works great for many devices as-is, doesn’t have many dependencies, it is very lightweight, and doesn’t require tremendous amounts of processing power.&lt;/p>
&lt;p>IBM Bluemix provides a platform for creating these apps that utilize all these sensors.  You can basically almost use any programming language you want, Bring Your Own Language (BYOL) and utilize services that do the heavy lifting for you.  This heavy lifting is the Internet of Things (IoT) service in Bluemix.  It implements that MQTT protocol and allows you to control and receive data from these devices.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1.jpg"
width="1024"
height="458"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1_hu_f8ea79abbff80153.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/robots-blog-post-header1_hu_319a811cc1084942.jpg 1024w"
loading="lazy"
alt="robots blog post header1 1024x665 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/p>
&lt;p>Do you have a bunch of left over Christmas lights sitting around that will be collecting dust till next year? Until now Christmas lights are a once a year thing, that isn’t true anymore.  Time to get the dust off of your lights and use them for something fun! Enter Christmas Lights controlled by a Raspberry Pi via IoT in Bluemix!&lt;/p>
&lt;p>You can control these Christmas Lights using the Internet of Things and IBM Bluemix. Who &lt;em>doesn’t&lt;/em> love large amounts of Christmas lights?  I sure love them.  Add on to that syncing lights to music and the ability to control lights from your phone and giving passersbys the ability to vote for songs they wanna see the lights synced to by texting.  How cool is that?&lt;/p>
&lt;h2 id="introduction">Introduction:
&lt;/h2>&lt;p>This is going to be a three part series: The first part (this post) will focus on the hardware setup, all the wiring and connecting things up to the Raspberry Pi.  The second part will focus on the software configuration of the Raspberry Pi, and the final part will focus on the Bluemix app that allows people to vote on songs to play and the integration to control the Raspberry Pi with the IoT service in Bluemix.&lt;/p>
&lt;p>So some of our goals that we are going to accomplish are the following.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Part 1&lt;/strong> – Setup and wire together relays, outlets, and the Raspberry Pi&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/" >&lt;strong>Part 2&lt;/strong>&lt;/a> – Power on the Raspberry Pi, installed Raspbian (OS for the Pi), install and configure the lighting control software&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Part 3&lt;/strong> – Deploy a Bluemix app with the IoT, Twilio, and Cloudant services to interact with users and the Raspberry Pi (an example of the app is &lt;a class="link" href="http://lights.mybluemix.net/" target="_blank" rel="noopener"
>http://lights.mybluemix.net/&lt;/a>; please note this is not connected to my Raspberry Pi right now, so clicking the play button won’t do anything.)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Here is a little teaser of the expected outcome:&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_nWcIvOSNJE" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>Let’s jump into it…&lt;/p>
&lt;h2 id="part-1-setting-up-the-hardware">Part 1: Setting up the hardware
&lt;/h2>&lt;p>These instructions have been adapted from the following sites.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/" target="_blank" rel="noopener"
>https://chivalrytimberz.wordpress.com/2012/12/03/pi-lights/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI" target="_blank" rel="noopener"
>https://docs.google.com/document/d/1x97JIu5xVInZMutTNeaHlnQuyoLHjf3h-ugIo64pGfI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://lightshowpi.org/download-and-install" target="_blank" rel="noopener"
>http://lightshowpi.org/download-and-install&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://lightshowpi.org/configuring-and-testing-your-hardware" target="_blank" rel="noopener"
>http://lightshowpi.org/configuring-and-testing-your-hardware&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://lightshowpi.org/play-music" target="_blank" rel="noopener"
>http://lightshowpi.org/play-music&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The first step is getting a Raspberry Pi, I highly recommend getting the &lt;a class="link" href="http://amzn.to/2C63713" target="_blank" rel="noopener"
>CanaKit on Amazon&lt;/a>.  It comes with most of everything you will need.  Depending on how fancy and clean you want your wiring to look you will need to take a trip to your local hardware/electrical store, more on that later.&lt;/p>
&lt;p>The first step is deciding how many individual light channels you want—you can do up to 48 actually, but for this post we will doing 16 channels.  What that means is 16 individual strands of lights that can be controlled.  So let’s make a shopping list.&lt;/p>
&lt;p>Shopping List:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>8 &lt;a class="link" href="http://amzn.to/2CamxBW" target="_blank" rel="noopener"
>two gang outlets&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2 &lt;a class="link" href="http://amzn.to/2DLctzJ" target="_blank" rel="noopener"
>4 gang blue plastic outlet boxes&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2zYuQyW" target="_blank" rel="noopener"
>50 feet of 12 gauge electrical wire&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CCI8UP" target="_blank" rel="noopener"
>2 bags of assorted wire nuts&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2 relays (1 relay per each 8 light channels, available &lt;a class="link" href="http://amzn.to/2C7lx1E" target="_blank" rel="noopener"
>on Amazon&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1 &lt;a class="link" href="http://amzn.to/2DLo6qF" target="_blank" rel="noopener"
>powerstrip&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2Cv8WsJ" target="_blank" rel="noopener"
>2 electrical extension cords&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CzX99O" target="_blank" rel="noopener"
>16 strands of Christmas lights&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Tools Required:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2EsJH8e" target="_blank" rel="noopener"
>Wire Stripper&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CBl8Wi" target="_blank" rel="noopener"
>Screw Drivers, phillips and flat&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://amzn.to/2CapKBL" target="_blank" rel="noopener"
>Multimeter -optional&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>My brother (&lt;a class="link" href="https://twitter.com/esloyer" target="_blank" rel="noopener"
>@esloyer&lt;/a>) helped me wire this whole thing up and came up with an adapted wiring schema based off the sites above, thanks bro!&lt;/p>
&lt;p>Once you get all the items on the shopping list we need to start taking apart the 50 feet of wire, there is 2 wires inside of the casing, a black and then a white one.  We need to get them out of the casing, take a pocket knife or utility knife and make a cut into the casing at one end, you can basically then peal back the casing on the whole 50 feet of wire then.&lt;/p>
&lt;p>Below is a wiring diagram that we need to complete.  You can do this multiple ways but below is a suggestion.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/Capture.png"
width="1024"
height="642"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/Capture_hu_8f326f9d29449440.png 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/Capture_hu_ad72e496ac82a628.png 1024w"
loading="lazy"
alt="Capture 1024x642 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="159"
data-flex-basis="382px"
>&lt;/p>
&lt;p>What we need to do is basically daisy chain all the &amp;ldquo;hot&amp;rdquo; wires together between each set of 4 gang double gang outlets.  We do this so we don’t overload a particular circuit.  So to do this we need to cut the end off of our cheap extension cord that has a plug on it, we need to then strip the wires, and then identity which wire is the hot/positive wire.  Below is a picture of a wire, the hot/positive wire will have dashes or stripes on it, the cold/neutral wire will NOT have any dashes or stripes:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-cord.jpg"
width="1024"
height="764"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-cord_hu_a3f7cc50205f5fa6.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-cord_hu_f8939067b1c62fc6.jpg 1024w"
loading="lazy"
alt="electrical cord 1024x764 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="321px"
>&lt;/p>
&lt;p>We need to take the hot wire and put it into a wire nut.  We will then take some wire from our 50 feet, strip one of the ends and twist it into the wire nut.  This will get attached to positive input on the relay.  We need to repeat this for each channel.  In the picture below I have an additional wire going from the first wire nut to another wire nut because all the wires going to the relay wouldn’t fit into one wire nut.  We are just effectively connecting two wires together here.&lt;/p>
&lt;p>The next step is running a wire from each channel on the relay to electrical outlet.  This is the hot wire to each outlet but this wire is being controlled by the relay.  Think of the relay as a simple on/off switch that you would find at home to control a light.  On most double electrical outlets there is a tab on the side that comes enabled that makes most receptacles operate as one, this is desirable in a house so an electrician only has to run one wire to the outlet but in our case we want to take advantage of controlling both receptacles.  We need to break this tab on both sides of the outlet.  Take a pair of needle nodes pliers and bend the tab back and forth and eventually it will come off.  See the photos below.&lt;/p>
&lt;p>Before:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/FH13MAR_SWIOUT_14.jpg"
width="450"
height="355"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/FH13MAR_SWIOUT_14_hu_547eb42780bdc852.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/FH13MAR_SWIOUT_14_hu_105e14da772baaf9.jpg 1024w"
loading="lazy"
alt="FH13MAR SWIOUT 14 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="126"
data-flex-basis="304px"
>&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-5.jpg"
width="249"
height="187"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-5_hu_9ce89f38c60a8b19.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-5_hu_8fe19ac7cb63afdb.jpg 1024w"
loading="lazy"
alt="electrical outlet garbage disposal 5 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>After:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-4.jpg"
width="249"
height="187"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-4_hu_4b377a2f222e5725.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/electrical-outlet-garbage-disposal-4_hu_3342bd0a5a01f063.jpg 1024w"
loading="lazy"
alt="electrical outlet garbage disposal 4 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>So next we need to connect our cold/negative wires to each of the outlets.  If you look at the wiring diagram (above) I have one cold/neutral wire going to the first outlet and each additional outlet is daisy chained to it.  This is just to complete the circuit.  Below is the finished product.  We basically have our outlets daisy chained together with our cold/neutral wires and then hold/positive wires have individual channels to the relay.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/2014-12-02-15.16.57.jpg"
width="3264"
height="2448"
srcset="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/2014-12-02-15.16.57_hu_2aaeaa2e26da998a.jpg 480w, https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things/2014-12-02-15.16.57_hu_be5268a26fba3efb.jpg 1024w"
loading="lazy"
alt="2014 12 02 15.16.57 Control home devices with Bluemix Internet of Things"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>Congratulations the hard part is over! Well, at least for me, since electrical stuff isn’t my forte.&lt;/p>
&lt;h2 id="parts-in-the-series">Parts in the Series
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jeffsloyer.io/post/control-home-devices-with-bluemix-internet-of-things-part-2/" >Part 2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>How Watson and Bluemix see the State of the Union</title><link>https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/</link><pubDate>Wed, 21 Jan 2015 09:45:24 -0500</pubDate><guid>https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw.jpeg" alt="Featured image of post How Watson and Bluemix see the State of the Union" />&lt;p>The State of the Union, a live broadcast that many Americans historically use as a tool to form opinions about the current political system, and gain insight from their Commander in Chief into the transparency of a system of checks and balances.  What is more interesting is the thoughts and underlying feelings between the State of the Union.  If we could figure out how the President is feeling or portraying himself, could we infer how the President will schedule and work with legislation and policy for the rest of the year?&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw.jpeg"
width="2000"
height="1333"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw_hu_613eb3438ffe4989.jpeg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/1USIIGtkypiwhO6W4o8cwIw_hu_1cf390c5ee5727dd.jpeg 1024w"
loading="lazy"
alt=" How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>If we tried to do this today, could we go back and re-read all of the State of the Unions and apply custom algorithms to help determine the sentiment behind the speeches?  This is no longer a dream, but a reality.  We can use &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>IBM Bluemix&lt;/a> to create an app that will pull in the speeches and leverage the IBM Watson User Modeling Service to analyze the speeches.&lt;/p>
&lt;!-- more -->
&lt;p>Wouldn’t it be interesting if we could compare the speeches from previous State of the Union addresses and compare the underlying sentiment behind them?  Today we can, and it is pretty easy.  MSNBC published &lt;a class="link" href="http://www.msnbc.com/msnbc/how-supercomputer-sees-the-state-the-union" target="_blank" rel="noopener"
>How a supercomputer sees the State of the Union&lt;/a> explaining how they used IBM Watson to do this.  Let’s take it a step further, let’s build our app in about 5 minutes, and try it ourselves!&lt;/p>
&lt;blockquote>The biggest takeaway? This year’s State of the Union was surprisingly on-trend with the patterns established by previous speeches.Sam Petulla and Mina Liu – MSNBC&lt;/blockquote>
&lt;p>So let’s dig into how we could do this.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/BluemixSOTU3.gif"
width="300"
height="249"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/BluemixSOTU3_hu_270f87ff73782c0.gif 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/BluemixSOTU3_hu_7fb23850b704057c.gif 1024w"
loading="lazy"
alt="BluemixSOTU3 How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="120"
data-flex-basis="289px"
>&lt;/p>
&lt;h3 id="lets-build-it">Let’s Build it!
&lt;/h3>&lt;p>The goal at the end of these couple steps is to have our own Node.js app that uses the User Modeling Service to analyze the 2015 State of the Union.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>So first we need to sign up for &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>Bluemix&lt;/a> if you don’t have an account.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once we have logged in visit the Catalog and at the top under Boilerplates let’s click on UserModeling Node.js, or go &lt;a class="link" href="https://console.ng.bluemix.net/catalog/personality-insights-nodejs-web-starter/" target="_blank" rel="noopener"
>directly here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>On the right hand side we just need to give our app a name.  This will be the URL we will access our app at.  Note, it needs to be unique, for my app I chose sotu-jbs, you can choose anything you want.&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonappcreate.jpg"
width="351"
height="557"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonappcreate_hu_37e9835f69873557.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonappcreate_hu_3188e1b0ddee5123.jpg 1024w"
loading="lazy"
alt="watsonappcreate How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="63"
data-flex-basis="151px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click Create.  What is happening behind the scenes is Bluemix is spinning up a Node.js starter app that will allow you to analyze the state of the union address with Watson.  Pretty cool huh?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bluemix will take you to a dashboard and after a little bit it will show you that your app is up and running.  To access our app, click the URL near the top of the dashboard under the name of our app.&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/apprunning1.jpg"
width="1099"
height="311"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/apprunning1_hu_b144f8bd95f5139b.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/apprunning1_hu_3a6306501bcb1224.jpg 1024w"
loading="lazy"
alt="apprunning1 How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="353"
data-flex-basis="848px"
>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/urlforapp.jpg"
width="1099"
height="311"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/urlforapp_hu_efcdce03641d1acd.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/urlforapp_hu_c60bf6b03c1ce098.jpg 1024w"
loading="lazy"
alt="urlforapp How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="353"
data-flex-basis="848px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now the hard bit, we need to grab the full text of the speech.  This year was the first time the White House put out the full text of the speech, it is available on &lt;a class="link" href="http://edition.cnn.com/2015/01/20/politics/state-of-the-union-2015-transcript-full-text/index.html" target="_blank" rel="noopener"
>CNN&lt;/a>.  I have also made the full text available &lt;a class="link" href="https://dl.dropboxusercontent.com/u/66686/2015sotu.txt" target="_blank" rel="noopener"
>here&lt;/a>.  Copy this text.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go back to your app you created that just opened up.  It should show something like the following.  We want to clear the text and paste the full contents of the State of the Union.&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/usermodelingapp.jpg"
width="992"
height="699"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/usermodelingapp_hu_98678a22b520510a.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/usermodelingapp_hu_b6914d95dc82b483.jpg 1024w"
loading="lazy"
alt="usermodelingapp How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="340px"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &amp;ldquo;Analyze&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>That’s it.   You should have some output like the following. With Bluemix and Watson we were just able to analyze the sentiment/personality of the President in the 2015 State of the Union.&lt;/p>
&lt;p>Personality with percentages:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/personalitysotu.jpg"
width="461"
height="1024"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/personalitysotu_hu_ab30f6605985a6bd.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/personalitysotu_hu_6d3d06743c186e2e.jpg 1024w"
loading="lazy"
alt="personalitysotu 461x1024 How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="45"
data-flex-basis="108px"
>&lt;/p>
&lt;p>Personality Visualization:&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/visualizationsotu.jpg"
width="906"
height="854"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/visualizationsotu_hu_a20a99385714140f.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/visualizationsotu_hu_819a76642775c4d.jpg 1024w"
loading="lazy"
alt="visualizationsotu How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="106"
data-flex-basis="254px"
>&lt;/p>
&lt;h3 id="wrap-up">Wrap up
&lt;/h3>&lt;p>So let’s go over what we did, in a matter of less than 5 minutes we spun up a Node.js app, connected it to Watson and analyzed the State of the Union.  What Bluemix does for us is gives us a platform to run our apps and connects super cool and powerful services such as Watson to our apps in a matter of seconds.  In the image below, we can see our app running and that is connected to Watson.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonconnected.jpg"
width="1107"
height="623"
srcset="https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonconnected_hu_76211002f06dd28.jpg 480w, https://www.jeffsloyer.io/post/how-watson-and-bluemix-see-the-state-of-the-union/watsonconnected_hu_27ec4f4040d38931.jpg 1024w"
loading="lazy"
alt="watsonconnected How Watson and Bluemix see the State of the Union"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
>&lt;/p>
&lt;p>If you want to give this a try without deploying an app head over to the &lt;a class="link" href="http://watson-um-demo.mybluemix.net/" target="_blank" rel="noopener"
>User Modeling Demo in Bluemix&lt;/a> and paste in your text.&lt;/p>
&lt;h3 id="learn-more">Learn More
&lt;/h3>&lt;p>If you want to learn more about other Bluemix services and Watson services go to the following links.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp#/solutions" target="_blank" rel="noopener"
>Bluemix Solutions&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp#/store/cloudOEPaneId=store" target="_blank" rel="noopener"
>Bluemix Services&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://console.ng.bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp#/solutions/solution=watson" target="_blank" rel="noopener"
>Watson Services in Bluemix&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://www.ibm.com/smarterplanet/us/en/ibmwatson/developercloud/user-modeling.html" target="_blank" rel="noopener"
>Watson Developer Cloud – User Modeling&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Microservices in Bluemix</title><link>https://www.jeffsloyer.io/post/microservices-in-bluemix/</link><pubDate>Mon, 19 Jan 2015 09:34:18 -0500</pubDate><guid>https://www.jeffsloyer.io/post/microservices-in-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza.jpg" alt="Featured image of post Microservices in Bluemix" />&lt;p>Monolith apps are no more.  The age of the monolith is over.  It wasn’t that long ago that companies and developers (myself included) were deploying one giant app that did everything.  The app would serve all your static files, front-end HTML and CSS and Javascript, act as your REST API, serve as your data persistance tier, handles sessions, handle logins, and do security for your app.  The list could keep going on and on.  As the age of the code base progresses it gets more and more complicated and tangled and if a new feature needs to be developed or an old piece of code needs to be modified it takes a cross functional team of many different people to make it happen.&lt;/p>
&lt;p>First we are going to talk about how a monolith app works, some of the positives and negatives and then we will talk about how things work in an app utilizing microserivces and the positivities and negatives associated with it.&lt;/p>
&lt;!-- more -->
&lt;h2 id="what-is-a-monolith">What is a Monolith?
&lt;/h2>&lt;p>In a traditional monolith app you would have your basic three tier app consisting of a persistence layer, middleware tier/business logic, and front end code.  The advantage of this is there is just one application to manage and scale.  However the downside is that any change to any of the three tiers it requires cranking up the giant distributed team and pushing a new release.  For example, if Dave a front-end dev wanted and he wanted to change the color of a button, it would require the whole app to built, tested, and re-deployed for a tiny change.&lt;/p>
&lt;p>This is quite wasteful over everyone’s time, dev’s from the persistence layer, business logic team, and front end team need to be involved.  This involves cutting a new release, running it through whatever QA/test phases there is and pushing it to production and hoping that nothing else got introduced or anyone else regressed some features.&lt;/p>
&lt;p>Additionally, by having a monolith app the code base can become quite large and incredibly complex to maintain.  This is compounded exponentially as the age of an app grows.  Eventually, there is so much tangled and twisted code its hard to understand how things link together and work.  This is one of the hidden costs of a monolith app.&lt;/p>
&lt;h2 id="microserviceadvantages">Microservice Advantages
&lt;/h2>&lt;p>A microservice can be defined simply as &amp;ldquo;fine grained SOA&amp;rdquo; – Adrian Cockcroft, Netflix.  In a longer description it can be thought of a set of small services with known functionality communicating over a common lightweight API, either HTTP REST API’s or more recently a lightweight messaging protocol (more on this later).&lt;/p>
&lt;blockquote>"Fine grained SOA" Adrian Cockcroft, Netflix&lt;/blockquote>
&lt;p>Microservices provide a huge advantage for the case we talked about earlier where Dave our front-end dev wants to change the color of a button, no longer does the giant dev machine need to be involved.  Instead the UI layer is a separate service and changes can be made independent from other parts of the application.  The UI team can crank out as many releases as their heart desires.&lt;/p>
&lt;h2 id="2-pizza-teams">2 Pizza Teams
&lt;/h2>&lt;p>We aren’t talking about skimping on our employees and not feeding them enough at work, but we are instead talking about the size of the team.  Amazon first coined this term back in 2011.  It has been written about extensively and in such publications as the &lt;a class="link" href="http://www.wsj.com/articles/SB10001424052970203914304576627102996831200" target="_blank" rel="noopener"
>Wall Street Journal&lt;/a>.  Basically what it boils down to is having each team small enough that you can feed them with 2 pizza’s.  So you might be asking what the importance of this is, let’s use our example of our front-end dev Dave again.  By Dave having a small team they can organize themselves efficiently and deliver functionality on their own instead of being tied to a giant release of the application.  A team doesn’t have to multiple people, it can actually be a team of just 1 but be sure to never violate the 2 pizza team rule though.&lt;/p>
&lt;p>&lt;a class="link" href="two-pizza.jpg" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza.jpg"
width="1000"
height="667"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza_hu_7067633b1c28bdb6.jpg 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/two-pizza_hu_9e0e32752c41a8cc.jpg 1024w"
loading="lazy"
alt="two pizza 300x200 Microservices in Bluemix"
class="gallery-image"
data-flex-grow="149"
data-flex-basis="359px"
>&lt;/a>&lt;/p>
&lt;h2 id="i-wanna-go-fast-its-all-about-speed">I Wanna Go Fast (It’s All About Speed)
&lt;/h2>&lt;p>As popularized by Talladega Nights, speed is king.  Who doesn’t want to go fast?  If you answered no to that you are probably going to get beaten by your competition and be left in the dust.  As the &lt;a class="link" href="http://www.thomaslfriedman.com/bookshelf/the-world-is-flat" target="_blank" rel="noopener"
>world is being flattened&lt;/a> there is constantly new competition every day and dev team’s have to constantly be delivering to keep their product and company relevant.&lt;/p>
&lt;p>So back to our example of  Dave our front-end dev again. Since Dave’s team has their own UI service they can constantly deliver changes and new features without having to wait for other team’s to deliver functionality.  Dave’s team can even deliver new UI code that is gated on some business logic code by using &lt;a class="link" href="https://codeascraft.com/2011/02/04/how-does-etsy-manage-development-and-operations/" target="_blank" rel="noopener"
>feature flags&lt;/a> and &lt;a class="link" href="http://apptimize.com/blog/2014/01/etsy-continuous-innovation-ab-testing/" target="_blank" rel="noopener"
>A/B testing&lt;/a> to selectively enable code and test new code out.  This allows Dave’s team to try out new ideas and if they don’t work they fail fast and pivot and change course.  By doing this Dave’s product and company stay relevant.&lt;/p>
&lt;p>Again as Ricky Bobby from Talladega Nights would say, &amp;ldquo;if you aint first you’re last.&amp;rdquo;  When I saw the movie my mind obviously just went to car racing and sports but it can be extended to the IT industry as well.  If you aren’t first you probably aren’t relevant and someone else is beating you to market.  Eventually you could go out of business.&lt;/p>
&lt;h2 id="devops-devops-devops">DevOps DevOps DevOps
&lt;/h2>&lt;p>&lt;a class="link" href="devops-borat.jpg" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/devops-borat.jpg"
width="347"
height="335"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/devops-borat_hu_1346fd97b2ab58b7.jpg 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/devops-borat_hu_5f4210682ac1cea7.jpg 1024w"
loading="lazy"
alt="devops borat Microservices in Bluemix"
class="gallery-image"
data-flex-grow="103"
data-flex-basis="248px"
>&lt;/a>&amp;ldquo;To make error is human. To propagate error to all server in automatic way is &lt;a class="link" href="https://twitter.com/hashtag/devops?src=hash" target="_blank" rel="noopener"
>#&lt;strong>devops&lt;/strong>&lt;/a>.&amp;rdquo; – &lt;a class="link" href="https://twitter.com/devops_borat" target="_blank" rel="noopener"
>DevOps Borat&lt;/a>.  This &lt;a class="link" href="https://twitter.com/devops_borat/status/41587168870797312" target="_blank" rel="noopener"
>quote&lt;/a> sums up why DevOps is important.  With each service being completely different architecture wise and language it is in it would be near impossible for a central &amp;ldquo;ops&amp;rdquo; team to manage all the apps.  Instead in microservices world each team is responsible for their own app.  You might be thinking that having dev’s manage a production service is bad and they won’t be responsive.  You are wrong, multiple companies have been doing this for years and it actually creates a sense of empowerment in the dev team.  Dev’s don’t want a call at 3am in the morning notifying them that their service is down.  In turn dev’s start taking more pride in their work and start thinking about decisions they make that will affect the availability of their service.  It creates a new mindset for people.&lt;/p>
&lt;h2 id="let-the-devs-rule">Let the Dev’s rule
&lt;/h2>&lt;p>Continuing on from above empowering dev’s is super important.  As a developer feels empowered they will make better decisions for their service they work on and thus end up making better decisions for the company.  When someone feels empowered they are putting their stamp of approval behind a product or feature and basically signing it with their name, code to them is a craft.&lt;/p>
&lt;p>By embracing microservices and the de-centralized architecture it allows dev’s to innovate and come up with cool ideas and test them out.  If they don’t work that is ok, keep innovating and moving forward.  I am a photographer and in college someone once told me for every 10 pictures you take you will only get one good one.  The same can be said here as well, try, test, measure  (repeat). Obviously there is some science and planning put into this but the point is creating an environment to foster innovation.&lt;/p>
&lt;h2 id="design-for-failure">Design for Failure
&lt;/h2>&lt;p>When using microservices each service should be able to stand on its own and run by itself.  If it has outside dependencies it isn’t really a microservice.  Netflix is a prime example of this.  For example, if a service goes down that generates recommendations the whole site doesn’t break.  Other services keep functioning without the broken service.  In some cases, other services will know how to operate without the broken service.  Feature degradation or local caching can be used to prevent a break in the user experience.&lt;/p>
&lt;p>This is designing for failure.  In the monolith world (which remember no longer exists) we would design and develop for the happy path and really never for the sad path.  By having a service based architecture we need to design and develop for the failure cases.  Some guy digging in his front yard could cut a piece of fiber and bring our monolith app to the ground.  By designing for a service not being there and allowing the product to continue to function is at utmost important.  In the monolith app dev’s sometimes would not think this way because everything is self contained by in a decentralized architecture you are forced to think about the failure case and how to handle it in a graceful way that doesn’t affect the user’s experience too much.&lt;/p>
&lt;h2 id="immutable-code">Immutable Code
&lt;/h2>&lt;p>Part of this thought of designing for failure is having immutable code.  When introducing new code you MUST not affect the functionality of previous code.  In a product that has a UI this is a little harder to do but can be done with feature flags and A/B testing but with an API based service changing the inputs and outputs of a service is a big no-no.  If you absolutely must do this at least have a deprecation period of N+2 or 3 to give customers and consumers of your service some advanced warning that changes are coming.  Ideally you wouldn’t deprecate an API, just revision your API, for example if you are using HTTP REST API’s just use &lt;code>/api/v1.0/&lt;/code> and for your next version &lt;code>/api/v1.1/&lt;/code> as a prefix.&lt;/p>
&lt;h2 id="real-world-microservices-architecture">Real world Microservices architecture
&lt;/h2>&lt;p>In the real world we would probably have a database, some business logic service (probably multiple of these), a UI service, our basic three tier app but this time disjoint from each other.  See below.
The &amp;ldquo;glue&amp;rdquo; between the services is supposed to be something light-weight, you can use HTTP REST API’s but more recently there has been a move to a messaging based &amp;ldquo;glue&amp;rdquo;.  In particular like MQTT or AMQP.  This is great as it allows a service to be a &amp;ldquo;worker&amp;rdquo; or a client of another service, or in queuing terms, producers and consumers.&lt;/p>
&lt;h2 id="how-to-use-bluemix-to-create-microservices">How to use Bluemix to create Microservices
&lt;/h2>&lt;p>To demonstrate this real world example let’s talk about how this would work in Bluemix.  In Bluemix we can create a bunch of services, in case they will be in Node.js and the &amp;ldquo;glue&amp;rdquo; between our services will be MQLight.  An important point we should talk about here is the notion of producer/consumer (pub/sub) vs round-robin queuing.&lt;/p>
&lt;p>For our example let’s say we have a service that is scaled out to 5 nodes (we must be really popular).  Each of these nodes is a worker for some business process, in this case let’s say sending a registration email.  When someone sign’s up for our site we want to send them a registration email, we don’t want each of the 5 nodes of our service emailing the person.  I would probably walk away from something if I got 5 duplicate registration emails.  In this case we want round-robin queuing.&lt;/p>
&lt;p>However on the converse side there is cases where we want producer/consumer (pub/sub queuing).  This effectively means all 5 nodes of a service will receive the same message and respond.  Let’s say we have a UI service that is the front-end for a real time chat service.  If our application is scaled out to 5 nodes how can we properly propagate chat messages to all the connected clients.  The answer is allowing each front-end service to receive the same message to relay to all the clients.&lt;/p>
&lt;p>&lt;a class="link" href="mqlight.jpg" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/mqlight.jpg"
width="152"
height="172"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/mqlight_hu_50572d322f66d781.jpg 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/mqlight_hu_f9b2d8ee244c2042.jpg 1024w"
loading="lazy"
alt="mqlight Microservices in Bluemix"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="212px"
>&lt;/a>When architecting your microservices you need to keep queuing in mind and how clients and services communicate with each other.  Make sure you choose a queuing technology that supports your desired behavior of pub/sub or round-robin.&lt;/p>
&lt;p>So where does this leave us in Bluemix?  MQLight, with MQLight you can easily do pub/sub and round-robin with the same service provider.  This is great because as the developer I don’t have to use two different messaging providers.&lt;/p>
&lt;h2 id="example-app-in-bluemix">Example App in Bluemix
&lt;/h2>&lt;p>So let’s build something to demonstrate all of this.  The example app we will be building contains a front-end service that allows users to enter text and another service that will convert it to upper case.  While this is not a real world example it demonstrates microservices using backend workers.&lt;/p>
&lt;p>A real world example might be  an image processing app that applies a sexy filter to an image it and then uploads it to Instagram.  If we did this we could break this up into three services.  A web service that accepts an image over http(s), our sexy filter engine (maybe imagemagick), then a service that uploads the image to our social media network of choice.&lt;/p>
&lt;p>So back to our example app of converting text to uppercase.  The UI is below, our UI doesn’t lock when we submit data and we can keep using it.  As results are finished processing in our &amp;ldquo;text uppercase&amp;rdquo; service, results are delivered real time to our front-end service.&lt;/p>
&lt;p>&lt;a class="link" href="sample_screenshot.png" >&lt;img src="https://www.jeffsloyer.io/post/microservices-in-bluemix/sample_screenshot.png"
width="850"
height="665"
srcset="https://www.jeffsloyer.io/post/microservices-in-bluemix/sample_screenshot_hu_1a4a74cf507bffba.png 480w, https://www.jeffsloyer.io/post/microservices-in-bluemix/sample_screenshot_hu_9199b12fd7aeb75d.png 1024w"
loading="lazy"
alt="sample screenshot Microservices in Bluemix"
class="gallery-image"
data-flex-grow="127"
data-flex-basis="306px"
>&lt;/a>&lt;/p>
&lt;p>To make this seem more world the example code introduces some timeouts/waits to make it seem like some backend processing is going on in a microservice.  To get this running follow the following steps.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">hub&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">jazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">net&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">git&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ibmmq&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mqlight&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">worker&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">offload&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cf&lt;/span> &lt;span class="n">create&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">service&lt;/span> &lt;span class="n">MQLight&lt;/span> &lt;span class="n">standard&lt;/span> &lt;span class="n">MQLight&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sampleservice&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cf&lt;/span> &lt;span class="n">push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>What the above does is checkout some example code that contains a front-end service and a back-end service that does our &amp;ldquo;text uppercasing&amp;rdquo; and creates a QLight to provide the messaging between our two services.&lt;/p>
&lt;p>Once the cf push command is done running (it might take a bit) we should see something like the following saying our apps are up.&lt;/p>
&lt;p>Text processing service:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Showing&lt;/span> &lt;span class="n">health&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">app&lt;/span> &lt;span class="n">MQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">backend&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">org&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">space&lt;/span> &lt;span class="n">demos&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">OK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">requested&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">started&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">instances&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">usage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">256&lt;/span>&lt;span class="n">M&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="n">instances&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">urls&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">last&lt;/span> &lt;span class="n">uploaded&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Mon&lt;/span> &lt;span class="n">Jan&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">52&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">05&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="mi">0000&lt;/span> &lt;span class="mi">2015&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="n">since&lt;/span> &lt;span class="n">cpu&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">disk&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0 running 2015-01-19 01:53:08 PM 0.0% 11.8M of 256M 75.8M of 1G&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1 running 2015-01-19 01:53:05 PM 0.0% 11.5M of 256M 75.8M of 1G&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Front&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">end&lt;/span> &lt;span class="n">service&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Showing&lt;/span> &lt;span class="n">health&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">status&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">app&lt;/span> &lt;span class="n">MQL&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sample&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">frontend&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">org&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">space&lt;/span> &lt;span class="n">demos&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">jbsloyer&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="n">us&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ibm&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">OK&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">requested&lt;/span> &lt;span class="n">state&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">started&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">instances&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">usage&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="n">M&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">instances&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">urls&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">mqlightsample&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">undeputed&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">trierarch&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mybluemix&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">net&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">last&lt;/span> &lt;span class="n">uploaded&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Mon&lt;/span> &lt;span class="n">Jan&lt;/span> &lt;span class="mi">19&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">53&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">16&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="mi">0000&lt;/span> &lt;span class="mi">2015&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">state&lt;/span> &lt;span class="n">since&lt;/span> &lt;span class="n">cpu&lt;/span> &lt;span class="n">memory&lt;/span> &lt;span class="n">disk&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#0 running 2015-01-19 01:54:20 PM 0.0% 24.3M of 512M 78.7M of 1G&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So let’s checkout the app, I have recorded a short video of it working.  If you notice the text service is simulating things like a real world service might respond with results coming back as they finish being processed.&lt;/p>
&lt;h2 id="stay-tuned">Stay Tuned!!!
&lt;/h2>&lt;p>There will be some real world examples coming on how to use microservices in Bluemix since now we have a foundation on what microserivces are.  Please stay tuned and follow me on Twitter at &lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a> for some real world apps!&lt;/p>
&lt;h2 id="webcastplayback">Webcast playback
&lt;/h2>&lt;p>The replay of the webcast is available at &lt;a class="link" href="http://ibm.biz/BlmxMicroservices-Blog" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p></description></item><item><title>Twitter Personality Comparisons Using Watson</title><link>https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/</link><pubDate>Mon, 24 Nov 2014 22:06:16 -0500</pubDate><guid>https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/personality.jpg" alt="Featured image of post Twitter Personality Comparisons Using Watson" />&lt;p>Hey Yall!&lt;/p>
&lt;p>We are back at it again with some demos!!!&lt;/p>
&lt;p>Did you ever wonder if you and your favorite celebrity would be compatible if you met?? I sure do! Or did you ever wonder how you could become a better leader, I sure do. Today you would have to go Google the person and analyze posts and articles about them and be a personality expert to see if you have personality traits in common.&lt;/p>
&lt;p>Gone are those days now!&lt;/p>
&lt;p>Enter &lt;a class="link" href="http://friendme.mybluemix.net/" target="_blank" rel="noopener"
>FriendMe&lt;/a>!  Your trusted personality comparison using IBM Watson. The answer to the above questions are easy now.  For example,  if I compared myself to the IBM Design Twitter account, I can see my personality is very much alike with the IBM Design team.  Thats good news for me because I never considered myself a designer…
&lt;a class="link" href="jeff-and-ibm-design.jpg" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-ibm-design.jpg"
width="735"
height="176"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-ibm-design_hu_28f61e73a8f04dee.jpg 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-ibm-design_hu_c826fa204f45822b.jpg 1024w"
loading="lazy"
alt="jeff and ibm design Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="417"
data-flex-basis="1002px"
>&lt;/a>&lt;/p>
&lt;!-- more -->
&lt;p>For the leadership, personal, and professional case, Jerry Cuomo is a very successful leader at IBM. I can see that myself and Jerry share 5 out of the top 5 personality traits in common.  In my career development I can see I need to develop myself more as a transformational leader.&lt;/p>
&lt;p>&lt;a class="link" href="jeff-and-jerry.jpg" >&lt;img src="https://www.jeffsloyer.io/jeff-and-jerry.jpg"
loading="lazy"
alt="jeff and jerry Twitter Personality Comparisons Using Watson"
>&lt;/a>&lt;/p>
&lt;p>Lastly, I am going to do one more comparison, between myself and Blake McGregor (a product manager for Bluemix).&lt;/p>
&lt;p>&lt;a class="link" href="jeff-and-blake.jpg" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-blake.jpg"
width="696"
height="169"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-blake_hu_fc4bfa4c430e1762.jpg 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/jeff-and-blake_hu_61c2772ae7c64668.jpg 1024w"
loading="lazy"
alt="jeff and blake Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="411"
data-flex-basis="988px"
>&lt;/a>&lt;/p>
&lt;p>So let’s jump right into it.&lt;/p>
&lt;p>This app was written in about 6 hours, its built using obviously IBM Bluemix, Node.JS, Angular.JS, Bootstrap, JQuery, IBM Watson, Cloudant, and Twilio.&lt;/p>
&lt;p>If you went to the link above, &lt;a class="link" href="http://friendme.mybluemix.net/" target="_blank" rel="noopener"
>here it is again&lt;/a>.  You can actually text the app.  If you text the app two Twitter handles it will tell you the compatibility between two people.&lt;/p>
&lt;p>So the source code is available &lt;a class="link" href="https://github.com/IBM-bluemix/friendme" target="_blank" rel="noopener"
>on Github&lt;/a>.&lt;/p>
&lt;p>First, we are going to walk through on how to deploy this app and get it working in Bluemix.  Secondly, we are going to walk through how to use the command line to deploy this app as well.&lt;/p>
&lt;p>If you haven’t already sign up for a &lt;a class="link" href="http://bluemix.net/?cm_mmc=developerWorks-_-dWdevcenter-_-bluemix-_-lp" target="_blank" rel="noopener"
>Bluemix account&lt;/a>.  Once you have done that head over to&lt;a class="link" href="http://jazzhub.com" target="_blank" rel="noopener"
> jazzhub.com&lt;/a>.  Login there with the username and password you created from your Bluemix account.  If you haven’t logged in yet to jazzhub it will ask you to create an id.  For example if my email is &lt;a class="link" href="mailto:jsmith@co.com" >jsmith@co.com&lt;/a>, I would create a username of jsmith.&lt;/p>
&lt;p>First, let’s open a web browser and goto &lt;a class="link" href="https://github.com/IBM-bluemix/friendme" target="_blank" rel="noopener"
>https://github.com/IBM-bluemix/friendme&lt;/a>.  Since we already created an account or logged in jazzhub above we should be logged in.  On the right hand side near the top there should be a big button that says &amp;ldquo;Fork Project&amp;rdquo;.  Let’s click that.&lt;/p>
&lt;p>&lt;a class="link" href="fork.png" >
&lt;/a>&lt;a class="link" href="fork.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork.png"
width="300"
height="83"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork_hu_e5dda40ee0488710.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork_hu_92803f85830f436a.png 1024w"
loading="lazy"
alt="fork 300x83 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="361"
data-flex-basis="867px"
>&lt;/a>&lt;/p>
&lt;p>Let’s go ahead and enter a project name, for example friendme, you can name it anything you want though.  Next place a check mark next to &amp;ldquo;Make it Private&amp;rdquo;, more on this later…  Next make sure an organization and space is shown, it should should your email address as the organization and the space should be dev.  Lastly, click &amp;ldquo;Save&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="fork2.png" >
&lt;/a>&lt;a class="link" href="fork2.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork2.png"
width="300"
height="239"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork2_hu_fbd70f899f8fb918.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/fork2_hu_ba1847246db0f6e7.png 1024w"
loading="lazy"
alt="fork2 300x239 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/a>&lt;/p>
&lt;p>Next we need to create the app in Bluemix and setup some services.  So in a new browser window navigate to&lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
> http://bluemix.net&lt;/a>.  In the top right click login.&lt;/p>
&lt;p>Once you login click on catalog and find SDK for Node.JS.  Go ahead and click on it.&lt;/p>
&lt;p>&lt;a class="link" href="node.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/node.png"
width="269"
height="300"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/node_hu_664ec7bd40c775fa.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/node_hu_b92ebc228a62d01c.png 1024w"
loading="lazy"
alt="node 269x300 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="215px"
>&lt;/a>&lt;/p>
&lt;p>Type in a name for your app, this will also be the URL for your app, remember this as we will need it later…  Then click &amp;ldquo;Create&amp;rdquo;.&lt;/p>
&lt;p>Behind the scenes Bluemix is spinning up a container for our app, setting up SSL, and setting up load balancing. In a traditional IaaS, you would have to do all this manually and it can take hours or days…&lt;/p>
&lt;p>&lt;a class="link" href="createapp.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/createapp.png"
width="228"
height="300"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/createapp_hu_ca3d17f5544aea86.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/createapp_hu_4f2e2fa607e1fc2.png 1024w"
loading="lazy"
alt="createapp 228x300 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="76"
data-flex-basis="182px"
>&lt;/a>&lt;/p>
&lt;p>Next, we need to add some services to our app.  We need Watson and Cloudant.  Let’s do Watson first.  The Watson service that we want is User Modeling.  It will analyze text and determine someone’s personality.  So to do this let’s click &amp;ldquo;Add A Service&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="addservice.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addservice.png"
width="300"
height="76"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addservice_hu_c62a1aea4e3d8aaf.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addservice_hu_eb9eb4498b2765e5.png 1024w"
loading="lazy"
alt="addservice 300x76 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="394"
data-flex-basis="947px"
>&lt;/a>&lt;/p>
&lt;p>Let’s go to the Watson section and click on &amp;ldquo;User Modeling&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="usermodeling.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling.png"
width="300"
height="115"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling_hu_2f8c7001bd53ffab.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling_hu_84422fde67a5add8.png 1024w"
loading="lazy"
alt="usermodeling 300x115 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="260"
data-flex-basis="626px"
>&lt;/a>&lt;/p>
&lt;p>It will bring up a dialog asking us to bind the service to our app, on the right hand side, click &amp;ldquo;Create&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="usermodeling2.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling2.png"
width="224"
height="300"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling2_hu_de1ce743213412d5.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/usermodeling2_hu_6cd2119b9367372.png 1024w"
loading="lazy"
alt="usermodeling2 224x300 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="74"
data-flex-basis="179px"
>&lt;/a>&lt;/p>
&lt;p>It will ask us if we want to restage the app, go ahead and click ok.  What this means is it needs to bind the service to the app and to do this it needs to restart it.&lt;/p>
&lt;p>Next, we need to create a database, to do this let’s click on the Cloudant tile.&lt;/p>
&lt;p>&lt;a class="link" href="cloudantclick.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantclick.png"
width="783"
height="578"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantclick_hu_2627f191c7a6ddaf.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantclick_hu_37d962d33d1939e4.png 1024w"
loading="lazy"
alt="cloudantclick 300x221 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="325px"
>&lt;/a>&lt;/p>
&lt;p>Then let’s click on the launch button.&lt;/p>
&lt;p>&lt;a class="link" href="cloudantlaunch.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantlaunch.png"
width="1024"
height="351"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantlaunch_hu_ae86217a151a7505.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/cloudantlaunch_hu_7ea855d9f0f4cd14.png 1024w"
loading="lazy"
alt="cloudantlaunch 300x103 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="291"
data-flex-basis="700px"
>&lt;/a>&lt;/p>
&lt;p>Next we need to create a database, click on &amp;ldquo;Add New Database&amp;rdquo; in the top right.&lt;/p>
&lt;p>&lt;a class="link" href="addnewdb.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addnewdb.png"
width="600"
height="96"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addnewdb_hu_62b66c1c41ad5902.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addnewdb_hu_21993a5ddbe44cf2.png 1024w"
loading="lazy"
alt="addnewdb 300x48 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="625"
data-flex-basis="1500px"
>&lt;/a>&lt;/p>
&lt;p>Then enter a name for the database, let’s use friendme, if you use something else we will have to edit the code…  Go ahead and click &amp;ldquo;Create&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="db.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/db.png"
width="300"
height="150"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/db_hu_7cbfe672df7b457.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/db_hu_da681d3bd90c9a6c.png 1024w"
loading="lazy"
alt="db 300x150 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="200"
data-flex-basis="480px"
>&lt;/a>&lt;/p>
&lt;p>We can close out of Cloudant now.&lt;/p>
&lt;p>So, since we are making API calls to Twilio and Twitter we need to register for API key’s.&lt;/p>
&lt;p>Let’s do Twitter first, head on over to &lt;a class="link" href="http://apps.twitter.com" target="_blank" rel="noopener"
>http://apps.twitter.com&lt;/a> and login with your Twitter username and password.&lt;/p>
&lt;p>In the top right let’s click on &amp;ldquo;Create New App&amp;rdquo;.  Type in a name and description for the app, the URL actually doesn’t matter but let’s type in something real.  Remember above the name you created for your app in Bluemix, let’s type that in.  For example &lt;a class="link" href="http://friendme.mybluemix.net" target="_blank" rel="noopener"
>http://friendme.mybluemix.net&lt;/a>.  Replace friendme with the name of your app.&lt;/p>
&lt;p>Click on the &amp;ldquo;Keys and Access Tokens&amp;rdquo; tab.  Under Access Tokens click &amp;ldquo;Create my access token&amp;rdquo;.  Leave this tab open, we will need these API’s keys in a bit…&lt;/p>
&lt;p>Next we need a Twilio phone number if you would like to be able to text your app.  If you don’t want to be able to text the app skip this section, you can use the UI of the app to interact with it.  Head on over to &lt;a class="link" href="https://www.twilio.com/try-twilio?promo=bluemix" target="_blank" rel="noopener"
>https://www.twilio.com/try-twilio&lt;/a> and create an account.  If you already have an account go ahead and goto &lt;a class="link" href="https://www.twilio.com/user/account/phone-numbers/incoming" target="_blank" rel="noopener"
>https://www.twilio.com/user/account/phone-numbers/incoming&lt;/a> or if you just created an account go there as well.&lt;/p>
&lt;p>We need to buy a number, to do this click on &amp;ldquo;Buy Number&amp;rdquo; in the top right.  Make sure the number has texting capabilities.&lt;/p>
&lt;p>&lt;a class="link" href="twilio.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/twilio.png"
width="300"
height="137"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/twilio_hu_68c2e6fd2edf5620.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/twilio_hu_4ed3b0a354196785.png 1024w"
loading="lazy"
alt="twilio 300x137 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="525px"
>&lt;/a>&lt;/p>
&lt;p>Try to find one of the cheaper ones, the cheapest you can find is $1/month, not bad…&lt;/p>
&lt;p>So once we buy the number we will need our API key’s.  They can be found at &lt;a class="link" href="https://www.twilio.com/user/account/settings" target="_blank" rel="noopener"
>https://www.twilio.com/user/account/settings&lt;/a>.  Leave this tab open like we did for Twitter, we will come back to this…&lt;/p>
&lt;p>Ok so finally time to deploy our app.  To do this switch back to Jazzhub, click the &amp;ldquo;Build &amp;amp; Deploy&amp;rdquo; button in the top right.&lt;/p>
&lt;p>&lt;a class="link" href="buildanddeploy.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildanddeploy.png"
width="300"
height="53"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildanddeploy_hu_2e7dc4ebc6f1abe9.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildanddeploy_hu_74a25e9bdc69aa6d.png 1024w"
loading="lazy"
alt="buildanddeploy 300x53 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="566"
data-flex-basis="1358px"
>&lt;/a>&lt;/p>
&lt;p>Go ahead and click on &amp;ldquo;Advanced&amp;rdquo; to turn on deployments.&lt;/p>
&lt;p>&lt;a class="link" href="advanced.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/advanced.png"
width="300"
height="54"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/advanced_hu_f46371b0d943eb.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/advanced_hu_a28873a289b8f3be.png 1024w"
loading="lazy"
alt="advanced 300x54 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="555"
data-flex-basis="1333px"
>&lt;/a>&lt;/p>
&lt;p>Click on &amp;ldquo;add a builder&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="addabuilder.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addabuilder.png"
width="300"
height="293"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addabuilder_hu_b1577ed54355959a.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addabuilder_hu_ef4ceea7d73d3708.png 1024w"
loading="lazy"
alt="addabuilder 300x293 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="102"
data-flex-basis="245px"
>&lt;/a>&lt;/p>
&lt;p>For builder type choose &amp;ldquo;Shell Script&amp;rdquo;.&lt;/p>
&lt;p>For the build script text area enter the following.&lt;/p>
&lt;pre>&lt;code>#!/bin/bash
echo &amp;quot;do nothing&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>Since it is node we really don’t need a build here…  If this wasn’t a demo and real app we would probably run some unit tests and do some linting here…&lt;/p>
&lt;p>Click on Save.&lt;/p>
&lt;p>&lt;a class="link" href="builderdone.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/builderdone.png"
width="300"
height="228"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/builderdone_hu_33480b611b0bc61b.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/builderdone_hu_62167e7eb1adad00.png 1024w"
loading="lazy"
alt="builderdone 300x228 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="131"
data-flex-basis="315px"
>&lt;/a>&lt;/p>
&lt;p>Next we need to set up the deployment.  Click on &amp;ldquo;add a stage&amp;rdquo;.&lt;/p>
&lt;p>&lt;a class="link" href="addstage.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addstage.png"
width="300"
height="242"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addstage_hu_e6e842bb605214ba.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/addstage_hu_6a6b0c085cfe59c.png 1024w"
loading="lazy"
alt="addstage 300x242 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="123"
data-flex-basis="297px"
>&lt;/a>&lt;/p>
&lt;p>Make sure the app name matches the app name we created in Bluemix.&lt;/p>
&lt;p>Last thing we need to do is modify the build script.  This is the only really confusing bit, you need to make sure you set this up correct or the app won’t work…&lt;/p>
&lt;p>When you first click on &amp;ldquo;add a stage&amp;rdquo; it will look like the following&amp;hellip;&lt;/p>
&lt;p>&lt;a class="link" href="deploybefore.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/deploybefore.png"
width="300"
height="239"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/deploybefore_hu_c70508966d67118c.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/deploybefore_hu_5de1bf44ae6c9d35.png 1024w"
loading="lazy"
alt="deploybefore 300x239 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/a>&lt;/p>
&lt;p>The script will look like the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push &amp;#34;${CF_APP}&amp;#34; -n &amp;#34;${CF_APP}-${CF_SPACE}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># View logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXIT_CODE=$?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $EXIT_CODE -ne 0 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cf logs &amp;#34;${CF_APP}&amp;#34; --recent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit $EXIT_CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We will need to update it to the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWILIO_PHONENUMBER &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWILIO_SID &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWILIO_TOKEN &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_ACCESSTOKEN_KEY &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_ACCESSTOKEN_SECRET &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_CONSUMER_KEY &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf set-env &amp;#34;${CF_APP}&amp;#34; TWITTER_CONSUMER_SECRET &amp;#34;replaceme&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cf push &amp;#34;${CF_APP}&amp;#34; -c &amp;#34;node lib/app.js&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># View logs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">EXIT_CODE=$?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if [ $EXIT_CODE -ne 0 ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cf logs &amp;#34;${CF_APP}&amp;#34; --recent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> exit $EXIT_CODE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For each of these values we need to substitute in the the correct values from the tab’s we kept open earlier from Twitter and Twilio.&lt;/p>
&lt;p>If you remember earlier we made the project private, this was to prevent other people from seeing our secret access key’s.  DevOps Service will be rolling out a new over the coming weeks where you can find information for a public project.&lt;/p>
&lt;p>Once you replace the values go ahead and click &amp;ldquo;Save&amp;rdquo;.&lt;/p>
&lt;p>Last thing to do is click &amp;ldquo;Request Build&amp;rdquo;.  That should successfully complete and that will trigger a deployment of your app.&lt;/p>
&lt;p>You can see the deployment is being performed by the following screen shot.&lt;/p>
&lt;p>&lt;a class="link" href="buildrunning.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildrunning.png"
width="300"
height="195"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildrunning_hu_237b35032d571328.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/buildrunning_hu_4e4f5742827993e7.png 1024w"
loading="lazy"
alt="buildrunning 300x195 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="153"
data-flex-basis="369px"
>&lt;/a>&lt;/p>
&lt;p>Once the deployment finishes you can click the link (name of your app) to your app to use it!&lt;/p>
&lt;p>&lt;a class="link" href="done.png" >&lt;img src="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/done.png"
width="300"
height="207"
srcset="https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/done_hu_9354d5d3fcc4520a.png 480w, https://www.jeffsloyer.io/post/twitter-personality-comparisons-using-watson/done_hu_df2683bdbd9f874d.png 1024w"
loading="lazy"
alt="done 300x207 Twitter Personality Comparisons Using Watson"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="347px"
>&lt;/a>&lt;/p>
&lt;p>Please reach out to me on Twitter (&lt;a class="link" href="http://twitter.com/jsloyer" target="_blank" rel="noopener"
>@jsloyer&lt;/a>) if you have any issues or post a comment below.&lt;/p></description></item><item><title>Inbound Ssl in Bluemix</title><link>https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/</link><pubDate>Mon, 18 Aug 2014 13:24:00 -0500</pubDate><guid>https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/secure.jpg" alt="Featured image of post Inbound Ssl in Bluemix" />&lt;p>Did you know in Bluemix you get inbound SSL for free?  It is automatically turned on and enabled for every app.  All you have to do is just access your app over https instead of http.&lt;/p>
&lt;p>Developers don’t need to implement SSL in their app, you just need to support HTTP and the Bluemix infrastructure will support HTTPS for you and do SSL offloading.&lt;/p>
&lt;p>Additionally Bluemix supports the &lt;code>x-forwarded-proto&lt;/code> header to allow developers to check with protocol requests are coming in over.  I have pasted some example Node.JS middleware that you can check if the request is coming in over https or not.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">middleware&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exports&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;http:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HTTPS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;https:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">middleware&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transportSecurity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">applicationURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">appURL&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheme&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">applicationURL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">securityEnabled&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">scheme&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">scheme&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="n">HTTPS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;The application URL scheme must be &amp;#39;http&amp;#39; or &amp;#39;https&amp;#39;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">scheme&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="n">HTTPS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">redirectURL&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">applicationURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">originalUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">securityEnabled&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Transport security is enabled.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">handling&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">standard&lt;/span> &lt;span class="n">proxy&lt;/span> &lt;span class="n">headers&lt;/span> &lt;span class="n">ibm&lt;/span> &lt;span class="n">cf&lt;/span> &lt;span class="n">uses&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x-forwarded-proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.$&lt;/span>&lt;span class="n">wssc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">wssc&lt;/span> &lt;span class="n">header&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">something&lt;/span> &lt;span class="n">that&lt;/span> &lt;span class="n">WebSphere&lt;/span> &lt;span class="n">inserts&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">pass&lt;/span> &lt;span class="n">the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">proxied&lt;/span> &lt;span class="n">protocol&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">downstream&lt;/span> &lt;span class="n">applications&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x-forwarded-proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.$&lt;/span>&lt;span class="n">wssc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">securityEnabled&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">secure&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Redirecting insecure request for&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">originalUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">redirect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">301&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">redirectURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">middleware&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./middleware&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">middleware&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transportSecurity&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For more information check out &lt;a class="link" href="https://www.ng.bluemix.net/docs/manageapps/secapps.html" target="_blank" rel="noopener"
>the Bluemix SSL docs&lt;/a>.&lt;/p></description></item><item><title>Kraken.Js and Bluemix</title><link>https://www.jeffsloyer.io/post/kraken-js-and-bluemix/</link><pubDate>Thu, 17 Apr 2014 13:24:00 -0500</pubDate><guid>https://www.jeffsloyer.io/post/kraken-js-and-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/kraken-js-and-bluemix/kraken.jpg" alt="Featured image of post Kraken.Js and Bluemix" />&lt;p>Kraken.JS is a new wonderful framework wrapper around Express for Node.JS.  It includes things such as pre-canned security settings, templating, and internationalization.  While Express in Node allows you to customize these type of things its not the most fun thing or exciting thing to do.  While security is very important in your app why should you have to write redundant code for this.  The answer is you do not have to anymore.&lt;/p>
&lt;p>While Express in Node allows you to customize these type of things its not the most fun thing or exciting thing to do.  While security is very important in your app why should you have to write redundant code for this.  The answer is you do not have to anymore. With Kraken.JS it will drastically cut the number of lines down in your Node app.  I currently have an app right now where I am estimating if I converted it to Kraken.JS it would cut my code base by 33%. So let’s jump into Kraken.JS, the instructions below were based on &lt;a class="link" href="http://krakenjs.com/#gettingstarted%22" target="_blank" rel="noopener"
>Kraken’s documentation&lt;/a>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Step 1, install Kraken if you do not already have it installed.&lt;/p>
&lt;pre>&lt;code> sudo npm install -g generator-kraken
&lt;/code>&lt;/pre>
&lt;p>Note: If &amp;ldquo;yo&amp;rdquo; yeoman is not installed, the above command will install it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Create a basic project (follow the prompts on the screen)&lt;/p>
&lt;pre>&lt;code> yo kraken
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>Start your app&lt;/p>
&lt;pre>&lt;code> npm start
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>If you notice the app started on &lt;code>8000&lt;/code>, with Bluemix and other PaaS’ you need to start your app on the port that the PaaS assigns you.  To do this we need to modify the example app slightly. If you open up &lt;code>index.js&lt;/code> down near the bottom you will see the following code snippet. …&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if (require.main === module) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kraken.create(app).listen(function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.error(err.stack);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above code will automatically bind to port &lt;code>8000&lt;/code>, we need to allow it to bind to a port that Bluemix wants.  Modify the code snippet to the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if (require.main === module) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kraken.create(app).listen(process.env.VCAP_APP_PORT || 8000, function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.error(err.stack);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The whole source of this app is on &lt;a class="link" href="https://github.com/IBM-Bluemix/kraken-example" target="_blank" rel="noopener"
>Github here&lt;/a>. If you want to pull the code do the following.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone https://github.com/IBM-Bluemix/kraken-example.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>