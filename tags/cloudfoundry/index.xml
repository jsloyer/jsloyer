<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudfoundry on Jeff Sloyer</title><link>https://www.jeffsloyer.io/tags/cloudfoundry/</link><description>Recent content in Cloudfoundry on Jeff Sloyer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Jul 2015 10:51:49 -0500</lastBuildDate><atom:link href="https://www.jeffsloyer.io/tags/cloudfoundry/index.xml" rel="self" type="application/rss+xml"/><item><title>Zero Downtime Deployment with the CF Autopilot Plugin - Video</title><link>https://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/</link><pubDate>Wed, 01 Jul 2015 10:51:49 -0500</pubDate><guid>https://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/unplug.jpg" alt="Featured image of post Zero Downtime Deployment with the CF Autopilot Plugin - Video" />&lt;p>I recently wrote a &lt;a class="link" href="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/" >blog post &lt;/a>on what a zero downtime deployment is, why it is important, and how to perform one. I am now posting a video on the same topic so you can learn about a zero downtime deployment by watching a video instead.&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/y4zor2y-yck" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;p>If you prefer the tutorial and text instructions please check out &lt;a class="link" href="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/" >Zero Downtime Deployment with the CF Autopilot Plugin&lt;/a>.&lt;/p>
&lt;p>I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter [@jsloyer](&lt;a class="link" href="https://twitter.com/jsloyer" target="_blank" rel="noopener"
>https://twitter.com/jsloyer&lt;/a> target=)&lt;/p></description></item><item><title>Zero Downtime Deployment with the CF Autopilot Plugin</title><link>https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</link><pubDate>Fri, 19 Jun 2015 10:41:59 -0500</pubDate><guid>https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/unplug.jpg" alt="Featured image of post Zero Downtime Deployment with the CF Autopilot Plugin" />&lt;p>Zero down time deployments are a must for any Internet app running at scale.  Without the use of zero down time deployments, you would have to take down your application even just for a fraction of a second but in that fraction of a second you could lose a transaction or a purchase from a customer.  This is not acceptable anymore.  Some people like to call these apps cloud based apps, which I think is fine, but I’d rather call them Internet scale or born on the cloud apps.  The companies who create these apps understand the apps’s need to stay up, because their app is their only lifeline and, hopefully, a source of income from the world.&lt;/p>
&lt;p>Companies such as Facebook, Etsy, and Twitter have been using zero down time deployments for years.  They thrive because they do multiple deployments to production a day.  The number of deployments they do in one day is actually larger than most enterprise companies do in a full year.  Part of the trick is that the code changes are small but they have employed strategies such as zero down time deployments to get code into production as fast as they can.&lt;/p>
&lt;!-- more -->
&lt;h2 id="ground-rules">Ground Rules…
&lt;/h2>&lt;p>There are many names for this, zero down time deployments, obviously, but some people use the term blue/green, while others use the term red/back.  They all mean the same thing.  Instead of having a bias for colors in this post lets use the term “zero down time”.&lt;/p>
&lt;p>So what is it?&lt;/p>
&lt;p>Zero Down time deployments are basically what they sound like.  You update production without taking downtime.  It’s not always that simple though.  For the context of this post we are going to be talking about how to do zero down time deployments in Cloud Foundry.&lt;/p>
&lt;p>Basically it’s a little trick to taking advantage of the way Cloud Foundry runs underneath the covers.  Before we jump into it, there are a couple of caveats that we should discuss first.  To successfully take advantage of zero down time deployments you should have followed the &lt;a class="link" href="http://12factor.net/" target="_blank" rel="noopener"
>12 Factor App guidelines&lt;/a>. This will ensure that your app is horizontally scalable and can be deployed in a manner that will result in zero down time.  Below are some highlights that you should abide by.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Do not store sessions on disk or in memory.  Store them in some type of shared database or file system.  This could be your favorite database or an in memory database as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Do not store configuration information in your application or on disk.  You should store your config info for your app in environment variables.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This is probably the most important, your application needs to be forward and backwards compatible with your database schema…  Say what?  Yes, you need to trust your developers to manage the database schema from your code.If you are using a relational database, you will need some kind of framework to do database migrations for you.  It’s not just that simple with relational databases though…  If you have a big database migration DO NOT PERORM MIGRATIONS THAT WILL INTERRUPT TRAFFIC!  Perform them slowly over time where migrations do not impact users and traffic.  Yahoo had a major application upgrade and it took them 6 months to do the migration to avoid impacting users and taking an outage.  Remember we do not take outages…  If you are in NoSQL land, your life is easier.  Just revision your API’s and educate your developers on forward and backwards data compatibility.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="importance-of-zero-down-time-deployments">Importance of Zero Down Time Deployments
&lt;/h2>&lt;p>So why are zero down time deployments so important?  The answer is simple, to keep your website/app up so you can make money!  Well that might be over-simplified a bit, but basically it all boils down to keeping your app up so you can continue to do what you do best, and hopefully that involves making money.  If you look at Facebook, for example, they put code into production weeks and months before a feature is exposed to the public.  They extensively test the features on employees first, then slowly enable the features to the rest of the world.&lt;/p>
&lt;p>This is key, getting features in front of your customers and getting feedback from them.  If it works that’s great, but if it doesn’t at least you know in a short time frame so you can remove it and pivot to go in a different direction.  The current landscape is so fast paced that if you don’t get a feature out, your competition could beat you.&lt;/p>
&lt;h2 id="how-does-it-work">How does it work?
&lt;/h2>&lt;p>So let’s walk through what needs to happen to perform zero downtime deployments in Cloud Foundry.  For the use of the walk-through, the application is currently taking traffic on &lt;code>myapp.mybluemix.net&lt;/code>.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Deploy your app or use a currently running app.
Currently your application is taking traffic on &lt;code>myapp.mybluemix.net&lt;/code>.
&lt;a class="link" href="zero-downtime-graphics.001.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.001.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.001_hu_67a6719a618981e5.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.001_hu_9cf09c6100caf55a.png 1024w"
loading="lazy"
alt="zero downtime graphics.001 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deploy the new version of your app to &lt;code>myapp-temp.mybluemix.net&lt;/code>.
At this time there is currently two versions of your app running.  &lt;code>myapp.mybluemix.net&lt;/code> is still taking production traffic.
The new app &lt;code>myapp-temp.mybluemix.net&lt;/code> is separate, it can be pointed to your production API keys and databases at this point.
&lt;a class="link" href="zero-downtime-graphics.002.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.002.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.002_hu_eb1fe4ca1db1eba1.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.002_hu_f8db8cd111c0f3e7.png 1024w"
loading="lazy"
alt="zero downtime graphics.002 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Perform smoke tests on the new version of the application.
Some people say this step is optional, but to me its not.  This is key to make sure there wasn’t any weird regressions or merge issues, they CAN happen…&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Map production traffic to the new version of your app.
At this point the old version of your app and the new version are both taking production traffic.
&lt;a class="link" href="zero-downtime-graphics.003.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.003.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.003_hu_63c6b419a410167d.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.003_hu_17ea991aa50404ca.png 1024w"
loading="lazy"
alt="zero downtime graphics.003 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unmap production traffic from the old version of the app.  You can optionally delete the old version as well.
At this point the new version becomes production and ONLY it is taking traffic.
The new version still has two URL’s though, &lt;code>myapp.mybluemix.net&lt;/code> and &lt;code>myapp-temp.mybluemix.net&lt;/code>.
&lt;a class="link" href="zero-downtime-graphics.004.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.004.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.004_hu_19326b037542fa88.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.004_hu_49e08d9f24a6dbc1.png 1024w"
loading="lazy"
alt="zero downtime graphics.004 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remove the temporary route &lt;code>myapp-temp.mybluemix.net&lt;/code> from the new version of your app.
&lt;a class="link" href="zero-downtime-graphics.005.png" >&lt;img src="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.005.png"
width="1024"
height="768"
srcset="https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.005_hu_679aa03b0584be84.png 480w, https://www.jeffsloyer.io/post/zero-down-time-deploys-with-the-cf-autopilot-plugin/zero-downtime-graphics.005_hu_669e628ff6813144.png 1024w"
loading="lazy"
alt="zero downtime graphics.005 Zero Down Time Deploys with the CF Autopilot Plugin"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>While this can be scripted there really isn’t a need to do that, there is a Cloud Foundry CLI plugin to do this.&lt;/p>
&lt;h2 id="autopilot-plugin">Autopilot plugin
&lt;/h2>&lt;p>Recently the Cloud Foundry CLI started supporting plugins.  This is the holy grail for CF and you can start doing some fun stuff.  In this case, the fun stuff is automating the complex, possibly human error-prone, steps above.  As a dev, if I can automate something and reduce the chance of something going wrong, I am all in.  If you do this, your IT/operations department will love you.&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/concourse/autopilot" target="_blank" rel="noopener"
>The plugin&lt;/a> performs the above steps for you for performing the zero downtime deployment.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Ensure you have a &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a> account, if you do not sign up &lt;a class="link" href="http://bluemix.net/?cm_mmc=Display-JeffSloyer.io-_-BluemixSampleApp-AutoPilotPlugin-_-Node-WatsonPersonalityInsights-_-BM-DevAd" target="_blank" rel="noopener"
>Bluemix&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install dependencies.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>1. Golang installed ([instructions](https://golang.org/doc/install))
2. Version 6.7.0 or greater of the Cloud Foundry CLI
To check what version you have running, run `cf -v` in your terminal.
[01:36 PM] jsloyer@jeffs-mbp-2 [~]&amp;gt;cf -v
cf version 6.8.0-b15c536-2014-12-10T23:34:29+00:00
To upgrade go [here](https://github.com/cloudfoundry/cli/releases).
&lt;/code>&lt;/pre>
&lt;ol start="3">
&lt;li>
&lt;p>Ensure you have an app running/already deployed.  The plugin requires that you have an app already deployed.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Run the following.  I will describe what each line is doing.&lt;/p>
&lt;p>go get github.com/concourse/autopilot
cf install-plugin $GOPATH/bin/autopilot
cf login -a ${CF_API} -u ${CF_USERNAME} -p ${CF_PASSWORD} -o ${CF_ORG} -s ${CF_SPACE}
cf zero-downtime-push myapp -f manifest.yml&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Line 1 fetches the source code for the plugin.
Line 2 installs the plugin
Line 3 logins into Bluemix.  I have the sensitive information replace with environment variables.
Line 4 performs the zero down time deployment.
&lt;/code>&lt;/pre>
&lt;p>The plugin does require a &lt;code>manifest.yml&lt;/code>.  The plugin basically views the &lt;code>manifest.yml&lt;/code> files as the truth of the state of the application.&lt;/p>
&lt;h2 id="extensions-with-ci-pipelines">Extensions with CI Pipelines
&lt;/h2>&lt;p>This will be forthcoming in an upcoming blog post on how to use some of the most popular CI engines out there.&lt;/p>
&lt;h2 id="recap">Recap
&lt;/h2>&lt;p>Just to review what we did here, we learned what zero down time deployments are, why they are crucial to any Internet scale application, and how to perform a zero down time deployment.  Then, we took it a step further on how to use a Cloud Foundry plugin to do the heavy lifting for us and automate the zero down time deployment.&lt;/p>
&lt;p>I would love to hear your feedback and any suggestions you have, please reach out to me on Twitter [@jsloyer](&lt;a class="link" href="https://twitter.com/jsloyer" target="_blank" rel="noopener"
>https://twitter.com/jsloyer&lt;/a> target=)&lt;/p>
&lt;h2 id="video">Video
&lt;/h2>&lt;p>I have also published a video if you prefer to watch that instead, please check out &lt;a class="link" href="https://www.jeffsloyer.io/post/zero-downtime-deployment-with-the-cf-autopilot-plugin-video/" >Zero Downtime Deployment with the CF Autopilot Plugin – Video.&lt;/a>&lt;/p>
&lt;h2 id="additional-parts">Additional part&amp;rsquo;s
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jeffsloyer.io/post/zero-downtime-deployments-with-bluemix-and-codeship/" >Zero downtime deployments with Bluemix and Codeship&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Get Pumped for the Cloud Foundry Summit</title><link>https://www.jeffsloyer.io/post/get-pumped-for-the-cloud-foundry-summit/</link><pubDate>Thu, 30 Apr 2015 10:38:05 -0500</pubDate><guid>https://www.jeffsloyer.io/post/get-pumped-for-the-cloud-foundry-summit/</guid><description>&lt;img src="https://www.jeffsloyer.io/original-images/2015/06/8568353810_30fa30c147_o.jpg" alt="Featured image of post Get Pumped for the Cloud Foundry Summit" />&lt;p>I’m pumped for the Cloud Foundry Summit! Are you??? Well if you aren’t yet hopefully you will be after reading this!&lt;/p>
&lt;p>If you attended the conference last year there was an awesome presentation on the future of Diego.  What is Diego you ask?  It is the new DEA that is coming for Cloud Foundry.  It is a complete re-write in Go and will add some new features such as the ability to swap out the underlaying linux containers for things like Docker.  Additionally another huge win is adding in plugins, this will be awesome as well!&lt;/p>
&lt;!-- more -->
&lt;p>Additionally, there is always a cast of characters there…  &lt;a class="link" href="https://twitter.com/angelluisdiaz" target="_blank" rel="noopener"
>Angel Diaz&lt;/a> (from IBM) is a great speaker and always pumps people up (literally).  You should ask him to arm wrestle you, I would lose…&lt;/p>
&lt;p>Ok so for reals, what am I really excited about, well the tech, duh…  Here is a list of some of the sessions I am really pumped about and why.&lt;/p>
&lt;h3 id="sessions">Sessions
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="http://cfsummit2015.sched.org/event/b9a2c4ad617e38167044bb9c42801438?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDeK1Viko" target="_blank" rel="noopener"
>A Developer’s Perspective on Cloud Foundry Operations: One Month in the Trenches&lt;/a> by Cornelia Davis — Well this one is pretty obvious why, Cornelia is an awesome speaker and I am never let down by her talks, must see just for her.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://cfsummit2015.sched.org/event/73242303138c19c0bacac3e71cf62a12#.VUIwGq1VhBc" target="_blank" rel="noopener"
>Rocking the Lattice: A New Path for Cloud Foundry Applications&lt;/a> by James Bayer — Again probably the same reason as above, James is an awesome speaker and a must see&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://cfsummit2015.sched.org/event/c8c7462b7d0e3775c14aec71bcdb75db?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDqa1Viko" target="_blank" rel="noopener"
>Case Study: Lessons learned hosting a large, global Cloud Foundry deployments&lt;/a> by Adam Gunther — This should be a good one, hosting and running a large scale Cloud Foundry deployment isn’t easy it will be interesting to learn some lessons learned.  Plus Adam is my new manager so I should probably show up so he has a plant in the audience…&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://cfsummit2015.sched.org/event/bb7647207209ec5d410011d67055d615?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDtK1Viko" target="_blank" rel="noopener"
>A glimpse at Runtime&lt;/a> by Zachary Auerbach and Daniel Lavine — The runtime is probably the most important part of Cloud Foundry and its always nice to hear and see some of the inner workings of the runtime team, a must see…&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://cfsummit2015.sched.org/event/f81390f973280b917bf5833a808a3fe5?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUEDwq1Viko" target="_blank" rel="noopener"
>The Road to Persistence on Cloud Foundry Diego&lt;/a> by Caleb Miles and Ted Young — This will be a good one, this talk is going to talk about a new model for the 12 factor app and more specifically some cool cluster scheduling systems like Apache Mesos.  I have friends at Twitter and the swear up and down on Mesos and how awesome is it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://cfsummit2015.sched.org/event/ba341002c205509deb3e6afe36df3da0?iframe=no&amp;amp;w=&amp;amp;sidebar=yes&amp;amp;bg=no#.VUHwD61Vikp" target="_blank" rel="noopener"
>Finding and Organizing a Great Cloud Foundry User Group&lt;/a> by Daniel Krook, Manuel Silveyra and Animesh Singh — Cloud Foundry wouldn’t be successful without its community.  These guys are going to be talking about how they have run and organized some of the most successful Cloud Foundry meetups in the Bay Area and NYC.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Again, get PUMPED!!!  I am all jacked up and ready to head to the CF Summit, better see you there.  If you come up to me at the Summit and yell out get pumped in front of me, I’ll buy you a beer or something…&lt;/p></description></item><item><title>Etherpad in Cloud Foundry – Quick Start Guide</title><link>https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/</link><pubDate>Sat, 03 Jan 2015 22:19:30 -0500</pubDate><guid>https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/</guid><description>&lt;p>Etherpad Lite is an awesome online collaboration platform.  Multiple open source projects use it for collaboration.  One of the most notable ones is the Openstack Project &lt;a class="link" href="https://etherpad.openstack.org/" target="_blank" rel="noopener"
>Openstack Etherpad&lt;/a>. To help you navigate the setup, this post provides step-by-step instructions to get things running. You may have read that Etherpad is complicated to install in a PaaS and there really isn’t a comprehensive quick start guide for running Etherpad-lite in Cloud Foundry. No worries, here is one!&lt;/p>
&lt;h3 id="loginregister-for-bluemix">Login/Register for Bluemix
&lt;/h3>&lt;p>The first step is creating a Node.js app in Bluemix.  Let’s login to Bluemix, open a web browser and visit &lt;a class="link" href="http://bluemix.net/" target="_blank" rel="noopener"
>Bluemix&lt;/a> and click LOG IN.  If you don’t have an account click, SIGN UP.  Since Etherpad-Lite is built using Node.js, we want to start with an empty Node.js app in Bluemix.  We will do this from the command line.&lt;/p>
&lt;p>If you already have the CLI command line executable, you can skip this step.  If you don’t have it, follow the steps from the &lt;a class="link" href="https://www.ng.bluemix.net/docs/#cli/index.html#cli" target="_blank" rel="noopener"
>Bluemix docs&lt;/a> on how to install the command line for your platform and how to set it up.  Once you get things setup you should be able to run &lt;code>cf s&lt;/code> and get the following output:&lt;/p>
&lt;pre>&lt;code>[01:30 PM] jsloyer@jeffs-mbp [blah]&amp;gt;cf s
cf domains Getting domains in org jbsloyer@us.ibm.com as ...
name status
mybluemix.net shared
&lt;/code>&lt;/pre>
&lt;p>Your output will be slightly different (this is ok).  This was just a check to make sure things are setup correctly.  If you are getting an auth error or error that you aren’t pointing to Cloud Foundry, refer back to the docs, reply to this post, or post a question to &lt;a class="link" href="http://stackoverflow.com/questions/tagged/bluemix" target="_blank" rel="noopener"
>Stackoverflow&lt;/a> for help.&lt;/p>
&lt;h3 id="upload-etherpad-lite-code-to-bluemix">Upload Etherpad-Lite Code to Bluemix
&lt;/h3>&lt;p>OK, next we need to upload the Etherpad-Lite code to Bluemix. The version of Etherpad-Lite is a forked version of the Etherpad code that has made things easy for us with Cloud Foundry. So head on over to the &lt;a class="link" href="https://github.com/cloudfoundry-community/etherpad-lite-cf/releases" target="_blank" rel="noopener"
>releases page&lt;/a> for &lt;code>etherpad-lite-cf&lt;/code>.  Choose the latest, as of this writing it was version 1.4.1.  Download the etherpad-lite-cf.zip file.  We need to extract this file to a new folder—do not extract it in the folder it is sitting in.  For example, I extracted it into an empty folder called blah.  Make sure you do not have the zip file you downloaded in the newly created folder, it should just contain the extracted files:&lt;/p>
&lt;pre>&lt;code>[10:50 AM] jsloyer@jeffs-mbp [blah]&amp;gt;pwd
/Users/jsloyer/Downloads/blah
[10:50 AM] jsloyer@jeffs-mbp [blah]&amp;gt;ls
CHANGELOG.md Procfile node_modules src var
CONTRIBUTING.md README.md package.json start.bat
LICENSE bin settings.json tests
Makefile doc settings.json.template tools
&lt;/code>&lt;/pre>
&lt;p>The next step is pushing the app to Bluemix.  Run the following command, replacing yourappname with a unique name for your app.  This name will also be the url to your app as well.  If you get an error mentioning the host is taken, just choose a different name.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push yourappname -m 512M -b https://github.com/cloudfoundry/nodejs-buildpack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above is saying we are giving our app 512MB of memory and calling out a specific buildpack to use (in this case Node.js). This step will take awhile but eventually you should get the following output.&lt;/p>
&lt;pre>&lt;code>0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running
App started Showing health and status for app jbs-etherpad3 in org jbsloyer@us.ibm.com / space demos as ...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: jbs-etherpad3.mybluemix.net
state since cpu memory disk
#0 running 2015-01-13 10:36:32 AM 0.0% 87.2M of 512M 242.1M of 1G
&lt;/code>&lt;/pre>
&lt;p>If you visit the url from above, Etherpad will be functional, however it is using a built-in database and this isn’t what we want.  We want to back in with MySQL.&lt;/p>
&lt;h3 id="create-and-bind-a-database-to-our-app">Create and bind a database to our app
&lt;/h3>&lt;p>Next, we need to create a service to allow Etherpad to connect to our database.  To do that, let’s go back to the Bluemix UI.  In the top click on Dashboard, you should see the app you created.  Let’s go ahead and click on it.&lt;/p>
&lt;p>To add the service Bluemix will provision and bind a service to our app for us.  Click &amp;ldquo;Add A Service&amp;rdquo; and scroll down to data management.  We want ClearDB for this app.  Click on ClearDB.  ClearDB is a hosted version of MySQL.  Everything on the right should be pre-populated so let’s just click &amp;ldquo;Create&amp;rdquo;.  If things are not pre-populated, choose the appropriate app, the one we just created.&lt;/p>
&lt;p>It will ask if you want to restage the app, that is fine, so click RESTAGE.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/restage.jpg"
width="1104"
height="524"
srcset="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/restage_hu_ca631c0bc1af6ab7.jpg 480w, https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/restage_hu_692235e83d637c34.jpg 1024w"
loading="lazy"
alt="restage Etherpad in Cloud Foundry – Quick Start Guide"
class="gallery-image"
data-flex-grow="210"
data-flex-basis="505px"
>&lt;/p>
&lt;h3 id="configure-the-app-with-cleardb-mysql">Configure the app with ClearDB (MySQL)
&lt;/h3>&lt;p>To switch the app over to MySQL, we need to edit the &lt;code>settings.json&lt;/code> for the app and then re-upload the app to Bluemix. You will need to replace the value DATABASE on line 9 with the name of your ClearDB service.  To get this info, let’s go back to the Bluemix UI and our app.  If you click on &amp;ldquo;Show Credentials&amp;rdquo;, it will give you the name of your ClearDB service, copy this.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/showcreds.jpg"
width="1578"
height="1366"
srcset="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/showcreds_hu_10f0797eafc6c3b0.jpg 480w, https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/showcreds_hu_5cf7d412493f8cf4.jpg 1024w"
loading="lazy"
alt="showcreds Etherpad in Cloud Foundry – Quick Start Guide"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;p>Copy the name, in this example it is &amp;ldquo;ClearDB MySQL Database-hu&amp;rdquo;, without quotes.  I have highlighted below what you need to copy, don’t copy the quotes.  I have hidden my connection info to my database so my database can’t be hacked.&lt;/p>
&lt;p>&lt;img src="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/dbname.jpg"
width="455"
height="559"
srcset="https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/dbname_hu_7a67a0ef1049138a.jpg 480w, https://www.jeffsloyer.io/post/etherpad-in-cloud-foundry-quick-start-guide/dbname_hu_149ae3ed997d67d.jpg 1024w"
loading="lazy"
alt="dbname Etherpad in Cloud Foundry – Quick Start Guide"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="195px"
>&lt;/p>
&lt;p>Open up settings.json with your favorite text editor and on line 9 replace DATABASE with the name of your ClearDB service that we copied from above.  Save the file. Here is my line 9:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;dbService&amp;#34;: &amp;#34;ClearDB MySQL Database-hu&amp;#34;,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The last step is re-pushing our app to Bluemix since we made a change to it.  To do this we need to use the push command we used above:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cf push yourappname -m 512M -b https://github.com/cloudfoundry/nodejs-buildpack.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eventually it should show us that our app is running, my output is below:&lt;/p>
&lt;pre>&lt;code>0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
0 of 1 instances running, 1 starting
1 of 1 instances running
App started Showing health and status for app jbs-etherpad3 in org jbsloyer@us.ibm.com / space demos as ...
OK
requested state: started
instances: 1/1
usage: 512M x 1 instances
urls: jbs-etherpad3.mybluemix.net
state since cpu memory disk
#0 running 2015-01-13 10:36:32 AM 0.0% 87.2M of 512M 242.1M of 1G
&lt;/code>&lt;/pre>
&lt;p>So if we visit the url it gave us, Etherpad should be up and running.  If you run into issues please post a comment here or post to &lt;a class="link" href="http://stackoverflow.com/questions/tagged/bluemix" target="_blank" rel="noopener"
>Stackoverflow&lt;/a>.&lt;/p>
&lt;h3 id="ssl">SSL
&lt;/h3>&lt;p>Bluemix provides SSL out of the box for your app.  If your app is running at &lt;strong>http&lt;/strong>://jbs-etherpad3.mybluemix.net you are given SSL for free.  To use SSL, just access your app over https, for my example it would be &lt;strong>https&lt;/strong>://jbs-etherpad3.mybluemix.net.  If you want to use SSL with your own domain name and certificate, you can do this also!  See &lt;a class="link" href="https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/" >SSL Certificates and Bluemix Custom Domains&lt;/a> on how to do it.&lt;/p>
&lt;p>For more info about SSL in for free in Bluemix check out the following video.&lt;/p>
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/3Y0wLQcXbQ0" frameborder="0" allowfullscreen>&lt;/iframe>
&lt;h3 id="caveats">Caveats
&lt;/h3>&lt;ul>
&lt;li>The biggest issue to me is that this deployment of Etherpad only allows 1 instance. While this works for development and testing, it is not suitable for production.  This is a limitation right now of Etherpad in the way it uses socket.io and sessions. If you need more capacity, just bump up your RAM for your app.&lt;/li>
&lt;/ul>
&lt;h3 id="instructions-adapted-from-these-references">Instructions adapted from these references
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/cloudfoundry-community/etherpad-lite-cf#using-database-from-user-provided-service" target="_blank" rel="noopener"
>https://github.com/cloudfoundry-community/etherpad-lite-cf#using-database-from-user-provided-service&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="http://arthurh.fr/blog-Install-etherpad-lite-with-cloudfoundry" target="_blank" rel="noopener"
>http://arthurh.fr/blog-Install-etherpad-lite-with-cloudfoundry&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Inbound Ssl in Bluemix</title><link>https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/</link><pubDate>Mon, 18 Aug 2014 13:24:00 -0500</pubDate><guid>https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/</guid><description>&lt;img src="https://www.jeffsloyer.io/post/inbound-ssl-in-bluemix/secure.jpg" alt="Featured image of post Inbound Ssl in Bluemix" />&lt;p>Did you know in Bluemix you get inbound SSL for free?  It is automatically turned on and enabled for every app.  All you have to do is just access your app over https instead of http.&lt;/p>
&lt;p>Developers don’t need to implement SSL in their app, you just need to support HTTP and the Bluemix infrastructure will support HTTPS for you and do SSL offloading.&lt;/p>
&lt;p>Additionally Bluemix supports the &lt;code>x-forwarded-proto&lt;/code> header to allow developers to check with protocol requests are coming in over.  I have pasted some example Node.JS middleware that you can check if the request is coming in over https or not.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">middleware&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">module&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exports&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;http:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HTTPS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;https:&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">middleware&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transportSecurity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="n">applicationURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">config&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">appURL&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">scheme&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">applicationURL&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">securityEnabled&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">scheme&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="n">HTTP&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">scheme&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="n">HTTPS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">throw&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;The application URL scheme must be &amp;#39;http&amp;#39; or &amp;#39;https&amp;#39;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">scheme&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="n">HTTPS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">function&lt;/span> &lt;span class="n">redirectURL&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">applicationURL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">originalUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">securityEnabled&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Transport security is enabled.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">handling&lt;/span> &lt;span class="n">non&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">standard&lt;/span> &lt;span class="n">proxy&lt;/span> &lt;span class="n">headers&lt;/span> &lt;span class="n">ibm&lt;/span> &lt;span class="n">cf&lt;/span> &lt;span class="n">uses&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x-forwarded-proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">protocol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.$&lt;/span>&lt;span class="n">wssc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">wssc&lt;/span> &lt;span class="n">header&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">something&lt;/span> &lt;span class="n">that&lt;/span> &lt;span class="n">WebSphere&lt;/span> &lt;span class="n">inserts&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">pass&lt;/span> &lt;span class="n">the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">proxied&lt;/span> &lt;span class="n">protocol&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">downstream&lt;/span> &lt;span class="n">applications&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x-forwarded-proto&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="o">.$&lt;/span>&lt;span class="n">wssc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">securityEnabled&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">secure&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">log&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Redirecting insecure request for&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">originalUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">redirect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">301&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">redirectURL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="n">middleware&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;./middleware&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">app&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">middleware&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">transportSecurity&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>For more information check out &lt;a class="link" href="https://www.ng.bluemix.net/docs/manageapps/secapps.html" target="_blank" rel="noopener"
>the Bluemix SSL docs&lt;/a>.&lt;/p></description></item></channel></rss>